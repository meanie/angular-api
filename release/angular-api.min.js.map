{"version":3,"sources":["angular-api.min.js","action.service.js","api.service.js","baseModel.service.js","endpoint.service.js","request.service.js"],"names":["_typeof","Symbol","iterator","obj","constructor","window","angular","undefined","module","factory","$q","$injector","$log","$url","validatedModel","model","has","warn","ApiAction","action","endpoint","extend","this","url","concat","method","enforceDataFormat","config","key","hasOwnProperty","params","prototype","hasBody","test","expectsArray","Boolean","isArray","expectsModel","isModel","convertToModel","data","_this","map","Model","get","successInterceptor","response","errorInterceptor","reject","provider","defaults","verbose","baseUrl","actions","query","create","update","delete","id","stripTrailingSlashes","endpoints","setVerbose","setBaseUrl","replace","setEnforceDataFormat","enforce","setDefaultActions","setDefaultParams","setDefaultModel","setConfig","param","value","strip","registerEndpoint","name","$get","$apiEndpoint","Api","forEach","info","$window","dateStringToMoment","regex","match","date","moment","ISO_8601","isValid","copyProperty","_ret","arr","v","isFunction","clone","copy","$baseModel","parent","_parent","Object","defineProperty","enumerable","set","fromJSON","isString","isId","json","_this2","isObject","valueFromJSON","toJSON","valueToJSON","extract","properties","_this3","length","substr","merge","_this4","clear","stripId","ModelClass","$parent","isSame","setParent","_isAMomentObject","prop","onlyId","_len","arguments","keys","Array","_key","apply","includes","stripIds","str","$apiAction","$apiRequest","ApiEndpoint","$config","$actions","bind","$http","isValidDottedPath","path","lookupDottedPath","Error","split","i","combineParams","actionParams","givenParams","extractedParams","charAt","findUrlParams","urlParams","RegExp","cleanUpUrl","parseUrl","t","urlParam","val","isDefined","encodedVal","encodeUriSegment","tail","leadingSlashes","createRequestConfig","request","stripConfigKeys","indexOf","promise","then","raw"],"mappings":"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","file":"angular-api.min.js","sourcesContent":["/**\n * @meanie/angular-api * https://github.com/meanie/angular-api\n *\n * Copyright (c) 2017 Adam Reis <adam@reis.nz>\n * License: MIT\n */\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Action.Service', ['Url.Service'])\n\n  /**\n   * Factory definition\n   */\n  .factory('$apiAction', ['$q', '$injector', '$log', '$url', function $apiAction($q, $injector, $log, $url) {\n\n    /**\n     * Return validated model class\n     */\n    function validatedModel(model) {\n\n      //No model?\n      if (!model) {\n        return null;\n      }\n\n      //Validate\n      if (!$injector.has(model)) {\n        if (model !== '$baseModel') {\n          $log.warn('Unknown model class/service:', model);\n        }\n        return null;\n      }\n\n      //Return model\n      return model;\n    }\n\n    /**\n     * Constructor\n     */\n    function ApiAction(action, endpoint) {\n\n      //Set vars\n      angular.extend(this, action);\n\n      //Set full action url, model and method\n      this.url = $url.concat(endpoint.url, this.url || '');\n      this.model = this.model || endpoint.model || false;\n      this.method = this.method || 'GET';\n      this.enforceDataFormat = endpoint.enforceDataFormat || false;\n\n      //Append config\n      if (endpoint.config) {\n        for (var key in endpoint.config) {\n          if (endpoint.config.hasOwnProperty(key)) {\n            this[key] = endpoint.config[key];\n          }\n        }\n      }\n\n      //Determine params\n      if (typeof this.params === 'undefined') {\n        this.params = endpoint.params;\n      }\n\n      //Normalize\n      this.params = this.params || {};\n\n      //Validate model\n      this.model = validatedModel(this.model);\n    }\n\n    /**\n     * Has body check\n     */\n    ApiAction.prototype.hasBody = function () {\n      return (/^(POST|PUT|PATCH)$/i.test(this.method)\n      );\n    };\n\n    /**\n     * Expects array check\n     */\n    ApiAction.prototype.expectsArray = function () {\n      return Boolean(this.isArray);\n    };\n\n    /**\n     * Expects model check\n     */\n    ApiAction.prototype.expectsModel = function () {\n      return this.model && Boolean(this.isModel);\n    };\n\n    /**\n     * Convert raw response data to a model\n     */\n    ApiAction.prototype.convertToModel = function (data) {\n      var _this = this;\n\n      //Array given?\n      if (angular.isArray(data)) {\n        return data.map(function (data) {\n          return _this.convertToModel(data);\n        });\n      }\n\n      //Get model class and return model instance\n      var Model = $injector.get(this.model);\n      return new Model(data);\n    };\n\n    /**\n     * Default success response interceptor\n     */\n    ApiAction.prototype.successInterceptor = function (response) {\n\n      //Check if we expect an array\n      var expectsArray = this.expectsArray();\n      var isArray = angular.isArray(response.data);\n\n      //Validate data type\n      if (isArray !== expectsArray) {\n\n        //Issue warning\n        $log.warn('Expected', expectsArray ? 'array' : 'object', 'as response, got', isArray ? 'array' : _typeof(response.data));\n\n        //Enforce data format?\n        if (this.enforceDataFormat) {\n          response.data = expectsArray ? [] : {};\n        }\n      }\n\n      //Initialize if empty\n      return response.data || (expectsArray ? [] : {});\n    };\n\n    /**\n     * Default error response interceptor\n     */\n    ApiAction.prototype.errorInterceptor = function (response) {\n      return $q.reject(response);\n    };\n\n    //Return factory function\n    return function (action, endpoint) {\n      return new ApiAction(action, endpoint);\n    };\n  }]);\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Service', ['Api.Endpoint.Service'])\n\n  /**\n   * Provider definition\n   */\n  .provider('$api', function $apiProvider() {\n\n    //Defaults\n    this.defaults = {\n      verbose: false,\n      enforceDataFormat: false,\n      baseUrl: '/',\n      actions: {\n        query: {\n          method: 'GET',\n          isArray: true,\n          isModel: true\n        },\n        get: {\n          method: 'GET',\n          isModel: true\n        },\n        create: {\n          method: 'POST'\n        },\n        update: {\n          method: 'PUT'\n        },\n        delete: {\n          method: 'DELETE'\n        }\n      },\n      params: {\n        id: '@id'\n      },\n      model: '',\n      config: {},\n      stripTrailingSlashes: true\n    };\n\n    //Registered endpoints\n    this.endpoints = {};\n\n    /**\n     * Set verbose\n     */\n    this.setVerbose = function (verbose) {\n      this.defaults.verbose = !!verbose;\n      return this;\n    };\n\n    /**\n     * Set base URL\n     */\n    this.setBaseUrl = function (url) {\n      //TODO: the replacement is protecting port numbers from later becoming\n      //removed on account of the request service url parsing thinking it's a\n      //parameter. The code there should be updated to prevent port replacement,\n      //rather than \"protecting\" it in this manner here.\n      this.defaults.baseUrl = url.replace(/:([0-9]+)/, '\\\\:$1');\n      return this;\n    };\n\n    /**\n     * Set data format enforcing\n     */\n    this.setEnforceDataFormat = function (enforce) {\n      this.defaults.enforceDataFormat = !!enforce;\n      return this;\n    };\n\n    /**\n     * Set default actions\n     */\n    this.setDefaultActions = function (actions) {\n      this.defaults.actions = actions || {};\n      return this;\n    };\n\n    /**\n     * Set default params\n     */\n    this.setDefaultParams = function (params) {\n      this.defaults.params = params || {};\n      return this;\n    };\n\n    /**\n     * Set default model\n     */\n    this.setDefaultModel = function (model) {\n      this.defaults.model = model || false;\n      return this;\n    };\n\n    /**\n     * Set a generic config parameter (use only for config params that you\n     * want to pass on to the $http service)\n     */\n    this.setConfig = function (param, value) {\n      this.defaults.config[param] = value;\n      return this;\n    };\n\n    /**\n     * Strip trailing slashes behaviour\n     */\n    this.stripTrailingSlashes = function (strip) {\n      this.defaults.stripTrailingSlashes = !!strip;\n      return this;\n    };\n\n    /**\n     * Register endpoint\n     */\n    this.registerEndpoint = function (name, config) {\n      if (name) {\n        this.endpoints[name] = config || {};\n      }\n      return this;\n    };\n\n    /**\n     * Service getter\n     */\n    this.$get = ['$log', '$apiEndpoint', function ($log, $apiEndpoint) {\n      var _this = this;\n\n      //Initialize API interface\n      var Api = function Api(endpoint) {\n        return this[endpoint];\n      };\n\n      //Append all endpoints\n      angular.forEach(this.endpoints, function (config, name) {\n\n        //Warn if overwriting\n        if (Api[name]) {\n          $log.warn('API endpoint', name, 'is being overwritten.');\n        }\n\n        //Extend endpoint config with defaults\n        config = angular.extend({}, _this.defaults, config);\n        if (config.verbose) {\n          $log.info('API endpoint', name + ':', config);\n        }\n\n        //Initialize endpoint\n        Api[name] = $apiEndpoint(name, config);\n      });\n\n      //Return\n      return Api;\n    }];\n  });\n})(window, window.angular);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('BaseModel.Service', [])\n\n  /**\n   * Model definition\n   */\n  .factory('$baseModel', ['$window', '$log', '$injector', function ($window, $log, $injector) {\n\n    //See if we have the moment service available to us\n    var moment = void 0;\n    if ($injector.has('moment')) {\n      moment = $injector.get('moment');\n    } else if (typeof $window.moment !== 'undefined') {\n      moment = $window.moment;\n    }\n\n    /**\n     * Check if given string is a ISO 8601 date string,\n     * Returns a moment if it is and null if it's not\n     */\n    function dateStringToMoment(value) {\n      var regex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}).*/;\n      if (value.match(regex)) {\n        var date = moment(value, moment.ISO_8601, true);\n        if (date.isValid()) {\n          return date;\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Copy a property\n     */\n    function copyProperty(obj, key) {\n      if (angular.isArray(obj[key])) {\n        var _ret = function () {\n          var arr = obj[key];\n          //eslint-disable-next-line no-unused-vars\n          return {\n            v: arr.map(function (value, key) {\n              return copyProperty(arr, key);\n            })\n          };\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n      }\n      if (obj[key] && angular.isFunction(obj[key].clone)) {\n        return obj[key].clone();\n      }\n      return angular.copy(obj[key]);\n    }\n\n    /**\n     * Constructor\n     */\n    function $baseModel(data, parent) {\n\n      //Define parent property\n      var _parent = parent;\n      Object.defineProperty(this, '$parent', {\n        enumerable: false,\n        get: function get() {\n          return _parent;\n        },\n        set: function set(parent) {\n          _parent = parent;\n        }\n      });\n\n      //Load data\n      this.fromJSON(data);\n    }\n\n    /**************************************************************************\n     * Helper methods\n     ***/\n\n    /**\n     * Convert a property to a model\n     */\n    $baseModel.prototype.convertToModel = function (key, Model, isArray) {\n      var _this = this;\n\n      //Paremeter shuffling\n      if (typeof Model === 'boolean') {\n        isArray = Model;\n        Model = null;\n      }\n\n      //If undefined, check what we were expecting\n      if (typeof this[key] === 'undefined') {\n        if (isArray) {\n          this[key] = [];\n        } else {\n          this[key] = null;\n        }\n      }\n\n      //If no model specified or if empty, we're done\n      if (!Model || !this[key]) {\n        return;\n      }\n\n      //String specified, use injector\n      if (typeof Model === 'string') {\n        if (!$injector.has(Model)) {\n          return $log.warn('Unknown model', Model, 'specified for sub model conversion');\n        }\n        Model = $injector.get(Model);\n      }\n\n      //Get model class and initiate\n      if (angular.isArray(this[key])) {\n        this[key] = this[key].map(function (data) {\n          return new Model(data, _this);\n        });\n      } else if (angular.isString(this[key]) && $baseModel.isId(this[key])) {\n        this[key] = new Model({ id: this[key] }, this);\n      } else {\n        this[key] = new Model(this[key], this);\n      }\n    };\n\n    /**\n     * From JSON converter\n     */\n    $baseModel.prototype.fromJSON = function (json) {\n      var _this2 = this;\n\n      if (angular.isObject(json)) {\n        angular.forEach(json, function (value, key) {\n          _this2[key] = $baseModel.valueFromJSON(value);\n        }, this);\n      }\n      return this;\n    };\n\n    /**\n     * To JSON converter\n     */\n    $baseModel.prototype.toJSON = function (data) {\n      var json = {};\n      if (data && angular.isObject(data)) {\n        angular.forEach(data, function (value, key) {\n          json[key] = $baseModel.valueToJSON(value);\n        });\n      }\n      angular.forEach(this, function (value, key) {\n        if (!json.hasOwnProperty(key)) {\n          json[key] = $baseModel.valueToJSON(value);\n        }\n      });\n      return json;\n    };\n\n    /**\n     * Extract a subset of data from the model\n     */\n    $baseModel.prototype.extract = function (properties) {\n      var _this3 = this;\n\n      //If string given, just return copy of one property\n      if (typeof properties === 'string') {\n        return copyProperty(this, properties);\n      }\n\n      //Initialize object\n      var obj = {};\n\n      //No properties given? Iterate all object properties\n      if (!angular.isArray(properties) || !properties.length) {\n        //eslint-disable-next-line no-unused-vars\n        angular.forEach(this, function (value, key) {\n          if (key.substr(0, 2) !== '$$') {\n            obj[key] = copyProperty(_this3, key);\n          }\n        });\n      } else {\n        angular.forEach(properties, function (key) {\n          obj[key] = copyProperty(_this3, key);\n        });\n      }\n\n      //Return resulting object\n      return obj;\n    };\n\n    /**\n     * Merge a set of data into the model\n     */\n    $baseModel.prototype.merge = function (data) {\n      var _this4 = this;\n\n      if (data && angular.isObject(data)) {\n        //eslint-disable-next-line no-unused-vars\n        angular.forEach(data, function (value, key) {\n          _this4[key] = copyProperty(data, key);\n        });\n      }\n      return this;\n    };\n\n    /**\n     * Clear own properties\n     */\n    $baseModel.prototype.clear = function () {\n      for (var key in this) {\n        if (this.hasOwnProperty(key)) {\n          delete this[key];\n        }\n      }\n      return this;\n    };\n\n    /**\n     * Clone\n     */\n    $baseModel.prototype.clone = function (stripId) {\n      var ModelClass = this.constructor;\n      var clone = new ModelClass(this.extract(), this.$parent);\n      if (stripId) {\n        delete clone.id;\n      }\n      return clone;\n    };\n\n    /**\n     * Check if two models are the same (based on ID)\n     */\n    $baseModel.prototype.isSame = function (model) {\n      if (!angular.isObject(model)) {\n        return this.id === model;\n      }\n      return this.id && model.id && this.id === model.id;\n    };\n\n    /**\n     * Copy a property\n     */\n    $baseModel.prototype.copyProperty = function (obj, key) {\n      if (this[key] && angular.isFunction(this[key].clone)) {\n        obj[key] = this[key].clone();\n      } else {\n        obj[key] = angular.copy(this[key]);\n      }\n    };\n\n    /**\n     * Set parent\n     */\n    $baseModel.prototype.setParent = function (parent) {\n      this.$parent = parent;\n    };\n\n    /**************************************************************************\n     * Static methods\n     ***/\n\n    /**\n     * Helper to convert a value from JSON\n     */\n    $baseModel.valueFromJSON = function (value) {\n      if (angular.isArray(value)) {\n        return value.map($baseModel.valueFromJSON);\n      } else if (moment && angular.isString(value)) {\n        var date = dateStringToMoment(value);\n        return date || value;\n      } else if (value && angular.isObject(value)) {\n        if (value._isAMomentObject) {\n          return value.clone();\n        }\n        var copy = {};\n        for (var prop in value) {\n          if (value.hasOwnProperty(prop)) {\n            copy[prop] = $baseModel.valueFromJSON(value[prop]);\n          }\n        }\n        return copy;\n      }\n      return value;\n    };\n\n    /**\n    * Helper to convert a value to JSON\n    */\n    $baseModel.valueToJSON = function (value) {\n      if (angular.isArray(value)) {\n        return value.map($baseModel.valueToJSON);\n      } else if (value && angular.isObject(value)) {\n        if (angular.isFunction(value.toJSON)) {\n          return value.toJSON();\n        }\n        var copy = {};\n        for (var prop in value) {\n          if (value.hasOwnProperty(prop) && prop.substr(0, 2) !== '$$') {\n            copy[prop] = $baseModel.valueToJSON(value[prop]);\n          }\n        }\n        return copy;\n      }\n      return value;\n    };\n\n    /**\n     * Strip object to only ID\n     */\n    $baseModel.onlyId = function (obj) {\n      if (angular.isArray(obj)) {\n        return obj.map($baseModel.onlyId);\n      }\n      if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || !obj.id) {\n        return obj;\n      }\n      return obj.id;\n    };\n\n    /**\n     * Strip a given object to specific keys\n     */\n    $baseModel.strip = function (obj) {\n      for (var _len = arguments.length, keys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        keys[_key - 1] = arguments[_key];\n      }\n\n      if (angular.isArray(obj)) {\n        return obj.map(function (obj) {\n          return $baseModel.strip.apply($baseModel, [obj].concat(keys));\n        });\n      }\n      if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {\n        return obj;\n      }\n      //eslint-disable-next-line no-unused-vars\n      angular.forEach(obj, function (value, key) {\n        if (!keys.includes(key)) {\n          delete obj[key];\n        }\n      });\n      return obj;\n    };\n\n    /**\n     * Strip ID's recursively from a given object\n     */\n    $baseModel.stripIds = function (obj) {\n      if (angular.isArray(obj)) {\n        return obj.map(function (obj) {\n          return $baseModel.stripIds(obj);\n        });\n      }\n      if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {\n        return obj;\n      }\n      if (typeof obj.id !== 'undefined') {\n        delete obj.id;\n      }\n      angular.forEach(obj, function (value) {\n        if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n          $baseModel.stripIds(value);\n        }\n      });\n      return obj;\n    };\n\n    /**\n     * Test for MongoDB object ID\n     */\n    $baseModel.isId = function (str) {\n      return str.match(/^[a-f\\d]{24}$/i);\n    };\n\n    //Return\n    return $baseModel;\n  }]);\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Endpoint.Service', ['Api.Action.Service', 'Api.Request.Service', 'Url.Service'])\n\n  /**\n   * Factory definition\n   */\n  .factory('$apiEndpoint', ['$url', '$apiAction', '$apiRequest', function $apiEndpoint($url, $apiAction, $apiRequest) {\n\n    /**\n     * Constructor\n     */\n    function ApiEndpoint(name, config) {\n      var _this = this;\n\n      //Determine full URL of endpoint\n      config.actions = config.actions || {};\n      config.url = $url.concat(config.baseUrl, config.url || $url.concat(name, ':id'));\n\n      //Expose config and actions container\n      this.$config = config;\n      this.$actions = {};\n\n      //Create action instances and bind request method to action key on endpoint\n      angular.forEach(config.actions, function (action, key) {\n        _this.$actions[key] = $apiAction(action || {}, config);\n        _this[key] = angular.bind(_this, $apiRequest, _this.$actions[key]);\n      });\n    }\n\n    //Return factory function\n    return function (name, config) {\n      return new ApiEndpoint(name, config);\n    };\n  }]);\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Request.Service', ['Url.Service'])\n\n  /**\n   * Factory definition\n   */\n  .factory('$apiRequest', ['$http', '$url', function $apiRequest($http, $url) {\n\n    /**\n     * Check if dotted path is valid\n     */\n    function isValidDottedPath(path) {\n      return path && path !== 'hasOwnProperty' && /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test('.' + path);\n    }\n\n    /**\n     * Lookup dotted path in an object\n     */\n    function lookupDottedPath(obj, path) {\n\n      //Check if valid\n      if (!isValidDottedPath(path)) {\n        throw new Error('Invalid dotted path:' + path);\n      }\n\n      //Split path in object keys to traverse\n      var keys = path.split('.');\n      for (var i = 0; i < keys.length && obj !== undefined; i++) {\n        var key = keys[i];\n        obj = obj !== null ? obj[key] : undefined;\n      }\n\n      //Return reference\n      return obj;\n    }\n\n    /**\n     * Combine given params with extracted params from data\n     */\n    function combineParams(actionParams, givenParams, data) {\n\n      //Extract data params from action params\n      var extractedParams = {};\n      angular.forEach(actionParams || {}, function (value, key) {\n\n        //Function? Call now\n        if (angular.isFunction(value)) {\n          value = value();\n        }\n\n        //String value with @ identifier? Look up in data\n        if (angular.isString(value) && value.charAt(0) === '@') {\n          value = lookupDottedPath(data, value.substr(1));\n        }\n\n        //Set value\n        extractedParams[key] = value;\n      });\n\n      //Extend with given params\n      return angular.extend(extractedParams, givenParams || {});\n    }\n\n    /**\n     * Find URL params\n     */\n    function findUrlParams(url) {\n      var urlParams = {};\n      angular.forEach(url.split(/\\W/), function (param) {\n\n        //Filter hasOwnProperty\n        if (param === 'hasOwnProperty') {\n          throw new Error('Invalid parameter name: hasOwnProperty');\n        }\n\n        //Find all valid url params (have value, non digit)\n        if (param && !/^\\\\d+$/.test(param)) {\n          if (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url)) {\n            urlParams[param] = true;\n          }\n        }\n      });\n      return urlParams;\n    }\n\n    /**\n     * Clean up URL\n     */\n    function cleanUpUrl(url, stripTrailingSlashes) {\n\n      //Strip trailing slashes if needed\n      if (stripTrailingSlashes) {\n        url = url.replace(/\\/+$/, '') || '/';\n      }\n\n      //Replace collapsed `/.` if found in the last URL path segment before\n      //the query, e.g. `http://url.com/id./format?q=x` becomes\n      //`http://url.com/id.format?q=x`\n      return url.replace(/\\/\\.(?=\\w+($|\\?))/, '.').replace(/\\/\\\\\\./, '/.');\n    }\n\n    /**\n     * Parse URL\n     */\n    function parseUrl(url, params, urlParams, stripTrailingSlashes) {\n\n      //Replace escaped \\:\n      url = url.replace(/\\\\:/g, ':');\n\n      //Loop the valid URL params now\n      angular.forEach(urlParams, function (t, urlParam) {\n\n        //Extract value for this url param from given params\n        var val = params.hasOwnProperty(urlParam) ? params[urlParam] : null;\n        var regex = void 0;\n\n        //If defined and not null, encode it and replace in URL\n        if (angular.isDefined(val) && val !== null) {\n          (function () {\n            var encodedVal = $url.encodeUriSegment(val);\n            regex = new RegExp(':' + urlParam + '(\\\\W|$)', 'g');\n            url = url.replace(regex, function (match, tail) {\n              return encodedVal + tail;\n            });\n          })();\n        }\n\n        //Otherwise, remove from URL\n        else {\n            regex = new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g');\n            url = url.replace(regex, function (match, leadingSlashes, tail) {\n              if (tail.charAt(0) === '/') {\n                return tail;\n              } else {\n                return leadingSlashes + tail;\n              }\n            });\n          }\n      });\n\n      //Return cleaned up URL\n      return cleanUpUrl(url, stripTrailingSlashes);\n    }\n\n    /**\n     * Create request config\n     */\n    function createRequestConfig(action, params, data, config) {\n\n      //Initialize\n      var request = {};\n      var stripConfigKeys = ['params', 'model', 'isArray', 'isModel', 'successInterceptor', 'errorInterceptor', 'stripTrailingSlashes'];\n\n      //Map action config to http request config\n      angular.forEach(action, function (value, key) {\n        if (stripConfigKeys.indexOf(key) === -1) {\n          request[key] = angular.copy(value);\n        }\n      });\n\n      //Attach given extra config\n      if (config && angular.isObject(config)) {\n        angular.forEach(config, function (value, key) {\n          request[key] = angular.copy(value);\n        });\n      }\n\n      //Append data if we have a body\n      if (action.hasBody() && data && angular.isObject(data)) {\n        if (angular.isFunction(data.toJSON)) {\n          request.data = data.toJSON();\n        } else if (angular.isArray(data)) {\n          request.data = data;\n        } else {\n          request.data = angular.extend({}, data);\n        }\n      }\n\n      //Ensure we don't overwrite the params objects keys in place\n      params = angular.copy(params);\n\n      //Process params\n      if (params && angular.isObject(params)) {\n        for (var key in params) {\n          if (params.hasOwnProperty(key) && angular.isObject(params[key])) {\n            if (angular.isFunction(params[key].toJSON)) {\n              params[key] = params[key].toJSON();\n            }\n          }\n        }\n      }\n\n      //Combine params out of given params and data and find URL params\n      params = combineParams(action.params, params, data);\n      var urlParams = findUrlParams(request.url);\n\n      //Parse URL\n      request.url = parseUrl(action.url, params, urlParams, action.stripTrailingSlashes);\n\n      //Set remaining given non-url params as query params,\n      //delegate param encoding to $http\n      angular.forEach(params, function (value, key) {\n        if (!urlParams[key]) {\n          request.params = request.params || {};\n          request.params[key] = value;\n        }\n      });\n\n      //Return\n      return request;\n    }\n\n    /**\n     * Api request executer\n     */\n    return function ApiRequest(action, params, data, config) {\n\n      //Parameter juggling\n      if (action.hasBody() && params && !data) {\n        data = params;\n        params = null;\n      }\n\n      //Create request config and use $http to do the request\n      //and intercept the response\n      var request = createRequestConfig(action, params, data, config);\n      var promise = $http(request).then(action.successInterceptor.bind(action), action.errorInterceptor.bind(action));\n\n      //Then handle the raw data\n      return promise.then(function (raw) {\n        if (action.expectsModel()) {\n          return action.convertToModel(raw);\n        }\n        return raw;\n      });\n    };\n  }]);\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Action.Service', [\n  'Url.Service',\n])\n\n/**\n * Factory definition\n */\n.factory('$apiAction', function $apiAction($q, $injector, $log, $url) {\n\n  /**\n   * Return validated model class\n   */\n  function validatedModel(model) {\n\n    //No model?\n    if (!model) {\n      return null;\n    }\n\n    //Validate\n    if (!$injector.has(model)) {\n      if (model !== '$baseModel') {\n        $log.warn('Unknown model class/service:', model);\n      }\n      return null;\n    }\n\n    //Return model\n    return model;\n  }\n\n  /**\n   * Constructor\n   */\n  function ApiAction(action, endpoint) {\n\n    //Set vars\n    angular.extend(this, action);\n\n    //Set full action url, model and method\n    this.url = $url.concat(endpoint.url, this.url || '');\n    this.model = this.model || endpoint.model || false;\n    this.method = this.method || 'GET';\n    this.enforceDataFormat = endpoint.enforceDataFormat || false;\n\n    //Append config\n    if (endpoint.config) {\n      for (let key in endpoint.config) {\n        if (endpoint.config.hasOwnProperty(key)) {\n          this[key] = endpoint.config[key];\n        }\n      }\n    }\n\n    //Determine params\n    if (typeof this.params === 'undefined') {\n      this.params = endpoint.params;\n    }\n\n    //Normalize\n    this.params = this.params || {};\n\n    //Validate model\n    this.model = validatedModel(this.model);\n  }\n\n  /**\n   * Has body check\n   */\n  ApiAction.prototype.hasBody = function() {\n    return /^(POST|PUT|PATCH)$/i.test(this.method);\n  };\n\n  /**\n   * Expects array check\n   */\n  ApiAction.prototype.expectsArray = function() {\n    return Boolean(this.isArray);\n  };\n\n  /**\n   * Expects model check\n   */\n  ApiAction.prototype.expectsModel = function() {\n    return (this.model && Boolean(this.isModel));\n  };\n\n  /**\n   * Convert raw response data to a model\n   */\n  ApiAction.prototype.convertToModel = function(data) {\n\n    //Array given?\n    if (angular.isArray(data)) {\n      return data.map(data => this.convertToModel(data));\n    }\n\n    //Get model class and return model instance\n    let Model = $injector.get(this.model);\n    return new Model(data);\n  };\n\n  /**\n   * Default success response interceptor\n   */\n  ApiAction.prototype.successInterceptor = function(response) {\n\n    //Check if we expect an array\n    let expectsArray = this.expectsArray();\n    let isArray = angular.isArray(response.data);\n\n    //Validate data type\n    if (isArray !== expectsArray) {\n\n      //Issue warning\n      $log.warn(\n        'Expected', expectsArray ? 'array' : 'object',\n        'as response, got', isArray ? 'array' : (typeof response.data)\n      );\n\n      //Enforce data format?\n      if (this.enforceDataFormat) {\n        response.data = (expectsArray ? [] : {});\n      }\n    }\n\n    //Initialize if empty\n    return response.data || (expectsArray ? [] : {});\n  };\n\n  /**\n   * Default error response interceptor\n   */\n  ApiAction.prototype.errorInterceptor = function(response) {\n    return $q.reject(response);\n  };\n\n  //Return factory function\n  return function(action, endpoint) {\n    return new ApiAction(action, endpoint);\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Service', [\n  'Api.Endpoint.Service',\n])\n\n/**\n * Provider definition\n */\n.provider('$api', function $apiProvider() {\n\n  //Defaults\n  this.defaults = {\n    verbose: false,\n    enforceDataFormat: false,\n    baseUrl: '/',\n    actions: {\n      query: {\n        method: 'GET',\n        isArray: true,\n        isModel: true,\n      },\n      get: {\n        method: 'GET',\n        isModel: true,\n      },\n      create: {\n        method: 'POST',\n      },\n      update: {\n        method: 'PUT',\n      },\n      delete: {\n        method: 'DELETE',\n      },\n    },\n    params: {\n      id: '@id',\n    },\n    model: '',\n    config: {},\n    stripTrailingSlashes: true,\n  };\n\n  //Registered endpoints\n  this.endpoints = {};\n\n  /**\n   * Set verbose\n   */\n  this.setVerbose = function(verbose) {\n    this.defaults.verbose = !!verbose;\n    return this;\n  };\n\n  /**\n   * Set base URL\n   */\n  this.setBaseUrl = function(url) {\n    //TODO: the replacement is protecting port numbers from later becoming\n    //removed on account of the request service url parsing thinking it's a\n    //parameter. The code there should be updated to prevent port replacement,\n    //rather than \"protecting\" it in this manner here.\n    this.defaults.baseUrl = url.replace(/:([0-9]+)/, '\\\\:$1');\n    return this;\n  };\n\n  /**\n   * Set data format enforcing\n   */\n  this.setEnforceDataFormat = function(enforce) {\n    this.defaults.enforceDataFormat = !!enforce;\n    return this;\n  };\n\n  /**\n   * Set default actions\n   */\n  this.setDefaultActions = function(actions) {\n    this.defaults.actions = actions || {};\n    return this;\n  };\n\n  /**\n   * Set default params\n   */\n  this.setDefaultParams = function(params) {\n    this.defaults.params = params || {};\n    return this;\n  };\n\n  /**\n   * Set default model\n   */\n  this.setDefaultModel = function(model) {\n    this.defaults.model = model || false;\n    return this;\n  };\n\n  /**\n   * Set a generic config parameter (use only for config params that you\n   * want to pass on to the $http service)\n   */\n  this.setConfig = function(param, value) {\n    this.defaults.config[param] = value;\n    return this;\n  };\n\n  /**\n   * Strip trailing slashes behaviour\n   */\n  this.stripTrailingSlashes = function(strip) {\n    this.defaults.stripTrailingSlashes = !!strip;\n    return this;\n  };\n\n  /**\n   * Register endpoint\n   */\n  this.registerEndpoint = function(name, config) {\n    if (name) {\n      this.endpoints[name] = config || {};\n    }\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = function($log, $apiEndpoint) {\n\n    //Initialize API interface\n    let Api = function(endpoint) {\n      return this[endpoint];\n    };\n\n    //Append all endpoints\n    angular.forEach(this.endpoints, (config, name) => {\n\n      //Warn if overwriting\n      if (Api[name]) {\n        $log.warn('API endpoint', name, 'is being overwritten.');\n      }\n\n      //Extend endpoint config with defaults\n      config = angular.extend({}, this.defaults, config);\n      if (config.verbose) {\n        $log.info('API endpoint', name + ':', config);\n      }\n\n      //Initialize endpoint\n      Api[name] = $apiEndpoint(name, config);\n    });\n\n    //Return\n    return Api;\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('BaseModel.Service', [])\n\n/**\n * Model definition\n */\n.factory('$baseModel', function($window, $log, $injector) {\n\n  //See if we have the moment service available to us\n  let moment;\n  if ($injector.has('moment')) {\n    moment = $injector.get('moment');\n  }\n  else if (typeof $window.moment !== 'undefined') {\n    moment = $window.moment;\n  }\n\n  /**\n   * Check if given string is a ISO 8601 date string,\n   * Returns a moment if it is and null if it's not\n   */\n  function dateStringToMoment(value) {\n    let regex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}).*/;\n    if (value.match(regex)) {\n      let date = moment(value, moment.ISO_8601, true);\n      if (date.isValid()) {\n        return date;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Copy a property\n   */\n  function copyProperty(obj, key) {\n    if (angular.isArray(obj[key])) {\n      let arr = obj[key];\n      //eslint-disable-next-line no-unused-vars\n      return arr.map((value, key) => copyProperty(arr, key));\n    }\n    if (obj[key] && angular.isFunction(obj[key].clone)) {\n      return obj[key].clone();\n    }\n    return angular.copy(obj[key]);\n  }\n\n  /**\n   * Constructor\n   */\n  function $baseModel(data, parent) {\n\n    //Define parent property\n    let _parent = parent;\n    Object.defineProperty(this, '$parent', {\n      enumerable: false,\n      get() {\n        return _parent;\n      },\n      set(parent) {\n        _parent = parent;\n      },\n    });\n\n    //Load data\n    this.fromJSON(data);\n  }\n\n  /**************************************************************************\n   * Helper methods\n   ***/\n\n  /**\n   * Convert a property to a model\n   */\n  $baseModel.prototype.convertToModel = function(\n    key, Model, isArray\n  ) {\n\n    //Paremeter shuffling\n    if (typeof Model === 'boolean') {\n      isArray = Model;\n      Model = null;\n    }\n\n    //If undefined, check what we were expecting\n    if (typeof this[key] === 'undefined') {\n      if (isArray) {\n        this[key] = [];\n      }\n      else {\n        this[key] = null;\n      }\n    }\n\n    //If no model specified or if empty, we're done\n    if (!Model || !this[key]) {\n      return;\n    }\n\n    //String specified, use injector\n    if (typeof Model === 'string') {\n      if (!$injector.has(Model)) {\n        return $log.warn(\n          'Unknown model', Model, 'specified for sub model conversion'\n        );\n      }\n      Model = $injector.get(Model);\n    }\n\n    //Get model class and initiate\n    if (angular.isArray(this[key])) {\n      this[key] = this[key].map(data => new Model(data, this));\n    }\n    else if (angular.isString(this[key]) && $baseModel.isId(this[key])) {\n      this[key] = new Model({id: this[key]}, this);\n    }\n    else {\n      this[key] = new Model(this[key], this);\n    }\n  };\n\n  /**\n   * From JSON converter\n   */\n  $baseModel.prototype.fromJSON = function(json) {\n    if (angular.isObject(json)) {\n      angular.forEach(json, (value, key) => {\n        this[key] = $baseModel.valueFromJSON(value);\n      }, this);\n    }\n    return this;\n  };\n\n  /**\n   * To JSON converter\n   */\n  $baseModel.prototype.toJSON = function(data) {\n    let json = {};\n    if (data && angular.isObject(data)) {\n      angular.forEach(data, (value, key) => {\n        json[key] = $baseModel.valueToJSON(value);\n      });\n    }\n    angular.forEach(this, (value, key) => {\n      if (!json.hasOwnProperty(key)) {\n        json[key] = $baseModel.valueToJSON(value);\n      }\n    });\n    return json;\n  };\n\n  /**\n   * Extract a subset of data from the model\n   */\n  $baseModel.prototype.extract = function(properties) {\n\n    //If string given, just return copy of one property\n    if (typeof properties === 'string') {\n      return copyProperty(this, properties);\n    }\n\n    //Initialize object\n    let obj = {};\n\n    //No properties given? Iterate all object properties\n    if (!angular.isArray(properties) || !properties.length) {\n      //eslint-disable-next-line no-unused-vars\n      angular.forEach(this, (value, key) => {\n        if (key.substr(0, 2) !== '$$') {\n          obj[key] = copyProperty(this, key);\n        }\n      });\n    }\n    else {\n      angular.forEach(properties, key => {\n        obj[key] = copyProperty(this, key);\n      });\n    }\n\n    //Return resulting object\n    return obj;\n  };\n\n  /**\n   * Merge a set of data into the model\n   */\n  $baseModel.prototype.merge = function(data) {\n    if (data && angular.isObject(data)) {\n      //eslint-disable-next-line no-unused-vars\n      angular.forEach(data, (value, key) => {\n        this[key] = copyProperty(data, key);\n      });\n    }\n    return this;\n  };\n\n  /**\n   * Clear own properties\n   */\n  $baseModel.prototype.clear = function() {\n    for (let key in this) {\n      if (this.hasOwnProperty(key)) {\n        delete this[key];\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Clone\n   */\n  $baseModel.prototype.clone = function(stripId) {\n    let ModelClass = this.constructor;\n    let clone = new ModelClass(this.extract(), this.$parent);\n    if (stripId) {\n      delete clone.id;\n    }\n    return clone;\n  };\n\n  /**\n   * Check if two models are the same (based on ID)\n   */\n  $baseModel.prototype.isSame = function(model) {\n    if (!angular.isObject(model)) {\n      return (this.id === model);\n    }\n    return (this.id && model.id && this.id === model.id);\n  };\n\n  /**\n   * Copy a property\n   */\n  $baseModel.prototype.copyProperty = function(obj, key) {\n    if (this[key] && angular.isFunction(this[key].clone)) {\n      obj[key] = this[key].clone();\n    }\n    else {\n      obj[key] = angular.copy(this[key]);\n    }\n  };\n\n  /**\n   * Set parent\n   */\n  $baseModel.prototype.setParent = function(parent) {\n    this.$parent = parent;\n  };\n\n  /**************************************************************************\n   * Static methods\n   ***/\n\n  /**\n   * Helper to convert a value from JSON\n   */\n  $baseModel.valueFromJSON = function(value) {\n    if (angular.isArray(value)) {\n      return value.map($baseModel.valueFromJSON);\n    }\n    else if (moment && angular.isString(value)) {\n      let date = dateStringToMoment(value);\n      return date || value;\n    }\n    else if (value && angular.isObject(value)) {\n      if (value._isAMomentObject) {\n        return value.clone();\n      }\n      let copy = {};\n      for (let prop in value) {\n        if (value.hasOwnProperty(prop)) {\n          copy[prop] = $baseModel.valueFromJSON(value[prop]);\n        }\n      }\n      return copy;\n    }\n    return value;\n  };\n\n  /**\n  * Helper to convert a value to JSON\n  */\n  $baseModel.valueToJSON = function(value) {\n    if (angular.isArray(value)) {\n      return value.map($baseModel.valueToJSON);\n    }\n    else if (value && angular.isObject(value)) {\n      if (angular.isFunction(value.toJSON)) {\n        return value.toJSON();\n      }\n      let copy = {};\n      for (let prop in value) {\n        if (value.hasOwnProperty(prop) && prop.substr(0, 2) !== '$$') {\n          copy[prop] = $baseModel.valueToJSON(value[prop]);\n        }\n      }\n      return copy;\n    }\n    return value;\n  };\n\n  /**\n   * Strip object to only ID\n   */\n  $baseModel.onlyId = function(obj) {\n    if (angular.isArray(obj)) {\n      return obj.map($baseModel.onlyId);\n    }\n    if (!obj || typeof obj !== 'object' || !obj.id) {\n      return obj;\n    }\n    return obj.id;\n  };\n\n  /**\n   * Strip a given object to specific keys\n   */\n  $baseModel.strip = function(obj, ...keys) {\n    if (angular.isArray(obj)) {\n      return obj.map(obj => $baseModel.strip(obj, ...keys));\n    }\n    if (!obj || typeof obj !== 'object') {\n      return obj;\n    }\n    //eslint-disable-next-line no-unused-vars\n    angular.forEach(obj, (value, key) => {\n      if (!keys.includes(key)) {\n        delete obj[key];\n      }\n    });\n    return obj;\n  };\n\n  /**\n   * Strip ID's recursively from a given object\n   */\n  $baseModel.stripIds = function(obj) {\n    if (angular.isArray(obj)) {\n      return obj.map(obj => $baseModel.stripIds(obj));\n    }\n    if (!obj || typeof obj !== 'object') {\n      return obj;\n    }\n    if (typeof obj.id !== 'undefined') {\n      delete obj.id;\n    }\n    angular.forEach(obj, value => {\n      if (value && typeof value === 'object') {\n        $baseModel.stripIds(value);\n      }\n    });\n    return obj;\n  };\n\n  /**\n   * Test for MongoDB object ID\n   */\n  $baseModel.isId = function(str) {\n    return str.match(/^[a-f\\d]{24}$/i);\n  };\n\n  //Return\n  return $baseModel;\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Endpoint.Service', [\n  'Api.Action.Service',\n  'Api.Request.Service',\n  'Url.Service',\n])\n\n/**\n * Factory definition\n */\n.factory('$apiEndpoint', function $apiEndpoint($url, $apiAction, $apiRequest) {\n\n  /**\n   * Constructor\n   */\n  function ApiEndpoint(name, config) {\n\n    //Determine full URL of endpoint\n    config.actions = config.actions || {};\n    config.url = $url.concat(\n      config.baseUrl, config.url || $url.concat(name, ':id')\n    );\n\n    //Expose config and actions container\n    this.$config = config;\n    this.$actions = {};\n\n    //Create action instances and bind request method to action key on endpoint\n    angular.forEach(config.actions, (action, key) => {\n      this.$actions[key] = $apiAction(action || {}, config);\n      this[key] = angular.bind(this, $apiRequest, this.$actions[key]);\n    });\n  }\n\n  //Return factory function\n  return function(name, config) {\n    return new ApiEndpoint(name, config);\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Request.Service', [\n  'Url.Service',\n])\n\n/**\n * Factory definition\n */\n.factory('$apiRequest', function $apiRequest($http, $url) {\n\n  /**\n   * Check if dotted path is valid\n   */\n  function isValidDottedPath(path) {\n    return (\n      path && path !== 'hasOwnProperty' &&\n      /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test('.' + path)\n    );\n  }\n\n  /**\n   * Lookup dotted path in an object\n   */\n  function lookupDottedPath(obj, path) {\n\n    //Check if valid\n    if (!isValidDottedPath(path)) {\n      throw new Error('Invalid dotted path:' + path);\n    }\n\n    //Split path in object keys to traverse\n    let keys = path.split('.');\n    for (let i = 0; i < keys.length && obj !== undefined; i++) {\n      let key = keys[i];\n      obj = (obj !== null) ? obj[key] : undefined;\n    }\n\n    //Return reference\n    return obj;\n  }\n\n  /**\n   * Combine given params with extracted params from data\n   */\n  function combineParams(actionParams, givenParams, data) {\n\n    //Extract data params from action params\n    let extractedParams = {};\n    angular.forEach(actionParams || {}, (value, key) => {\n\n      //Function? Call now\n      if (angular.isFunction(value)) {\n        value = value();\n      }\n\n      //String value with @ identifier? Look up in data\n      if (angular.isString(value) && value.charAt(0) === '@') {\n        value = lookupDottedPath(data, value.substr(1));\n      }\n\n      //Set value\n      extractedParams[key] = value;\n    });\n\n    //Extend with given params\n    return angular.extend(extractedParams, givenParams || {});\n  }\n\n  /**\n   * Find URL params\n   */\n  function findUrlParams(url) {\n    let urlParams = {};\n    angular.forEach(url.split(/\\W/), param => {\n\n      //Filter hasOwnProperty\n      if (param === 'hasOwnProperty') {\n        throw new Error('Invalid parameter name: hasOwnProperty');\n      }\n\n      //Find all valid url params (have value, non digit)\n      if (param && !(/^\\\\d+$/.test(param))) {\n        if (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url)) {\n          urlParams[param] = true;\n        }\n      }\n    });\n    return urlParams;\n  }\n\n  /**\n   * Clean up URL\n   */\n  function cleanUpUrl(url, stripTrailingSlashes) {\n\n    //Strip trailing slashes if needed\n    if (stripTrailingSlashes) {\n      url = url.replace(/\\/+$/, '') || '/';\n    }\n\n    //Replace collapsed `/.` if found in the last URL path segment before\n    //the query, e.g. `http://url.com/id./format?q=x` becomes\n    //`http://url.com/id.format?q=x`\n    return url\n      .replace(/\\/\\.(?=\\w+($|\\?))/, '.')\n      .replace(/\\/\\\\\\./, '/.');\n  }\n\n  /**\n   * Parse URL\n   */\n  function parseUrl(url, params, urlParams, stripTrailingSlashes) {\n\n    //Replace escaped \\:\n    url = url.replace(/\\\\:/g, ':');\n\n    //Loop the valid URL params now\n    angular.forEach(urlParams, (t, urlParam) => {\n\n      //Extract value for this url param from given params\n      let val = params.hasOwnProperty(urlParam) ? params[urlParam] : null;\n      let regex;\n\n      //If defined and not null, encode it and replace in URL\n      if (angular.isDefined(val) && val !== null) {\n        let encodedVal = $url.encodeUriSegment(val);\n        regex = new RegExp(':' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, (match, tail) => {\n          return encodedVal + tail;\n        });\n      }\n\n      //Otherwise, remove from URL\n      else {\n        regex = new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, (match, leadingSlashes, tail) => {\n          if (tail.charAt(0) === '/') {\n            return tail;\n          }\n          else {\n            return leadingSlashes + tail;\n          }\n        });\n      }\n    });\n\n    //Return cleaned up URL\n    return cleanUpUrl(url, stripTrailingSlashes);\n  }\n\n  /**\n   * Create request config\n   */\n  function createRequestConfig(action, params, data, config) {\n\n    //Initialize\n    let request = {};\n    let stripConfigKeys = [\n      'params', 'model', 'isArray', 'isModel',\n      'successInterceptor', 'errorInterceptor',\n      'stripTrailingSlashes',\n    ];\n\n    //Map action config to http request config\n    angular.forEach(action, (value, key) => {\n      if (stripConfigKeys.indexOf(key) === -1) {\n        request[key] = angular.copy(value);\n      }\n    });\n\n    //Attach given extra config\n    if (config && angular.isObject(config)) {\n      angular.forEach(config, (value, key) => {\n        request[key] = angular.copy(value);\n      });\n    }\n\n    //Append data if we have a body\n    if (action.hasBody() && data && angular.isObject(data)) {\n      if (angular.isFunction(data.toJSON)) {\n        request.data = data.toJSON();\n      }\n      else if (angular.isArray(data)) {\n        request.data = data;\n      }\n      else {\n        request.data = angular.extend({}, data);\n      }\n    }\n\n    //Ensure we don't overwrite the params objects keys in place\n    params = angular.copy(params);\n\n    //Process params\n    if (params && angular.isObject(params)) {\n      for (let key in params) {\n        if (params.hasOwnProperty(key) && angular.isObject(params[key])) {\n          if (angular.isFunction(params[key].toJSON)) {\n            params[key] = params[key].toJSON();\n          }\n        }\n      }\n    }\n\n    //Combine params out of given params and data and find URL params\n    params = combineParams(action.params, params, data);\n    let urlParams = findUrlParams(request.url);\n\n    //Parse URL\n    request.url = parseUrl(\n      action.url, params, urlParams, action.stripTrailingSlashes);\n\n    //Set remaining given non-url params as query params,\n    //delegate param encoding to $http\n    angular.forEach(params, (value, key) => {\n      if (!urlParams[key]) {\n        request.params = request.params || {};\n        request.params[key] = value;\n      }\n    });\n\n    //Return\n    return request;\n  }\n\n  /**\n   * Api request executer\n   */\n  return function ApiRequest(action, params, data, config) {\n\n    //Parameter juggling\n    if (action.hasBody() && params && !data) {\n      data = params;\n      params = null;\n    }\n\n    //Create request config and use $http to do the request\n    //and intercept the response\n    let request = createRequestConfig(action, params, data, config);\n    let promise = $http(request).then(\n      action.successInterceptor.bind(action),\n      action.errorInterceptor.bind(action)\n    );\n\n    //Then handle the raw data\n    return promise.then(raw => {\n      if (action.expectsModel()) {\n        return action.convertToModel(raw);\n      }\n      return raw;\n    });\n  };\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}