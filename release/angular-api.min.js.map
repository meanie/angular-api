{"version":3,"sources":["action.service.js","api.service.js","baseModel.service.js","endpoint.service.js","request.service.js"],"names":["angular","model","ApiAction","$log","warn","url","concat","endpoint","enforceDataFormat","this","config","key","method","hasOwnProperty","params","prototype","expectsModel","convertToModel","data","_this","Model","isArray","expectsArray","response","action","baseUrl","isModel","create","update","delete","endpoints","setBaseUrl","setEnforceDataFormat","setDefaultActions","setDefaultParams","setDefaultModel","stripTrailingSlashes","registerEndpoint","$get","info","name","Api","$apiEndpoint","window","$window","moment","$injector","value","match","regex","copyProperty","obj","$baseModel","parent","set","_parent","fromJSON","has","map","json","valueToJSON","forEach","properties","isObject","clear","clone","id","valueFromJSON","_isAMomentObject","dateStringToMoment","prop","copy","substr","strip","_len","keys","Array","stripIds","_typeof","$url","$apiAction","$apiRequest","$config","$actions","ApiEndpoint","path","$http","lookupDottedPath","test","isValidDottedPath","i","combineParams","findUrlParams","givenParams","RegExp","param","urlParams","cleanUpUrl","replace","parseUrl","urlParam","tail","leadingSlashes","createRequestConfig","request","hasBody","isFunction","toJSON","extend","raw"],"mappings":"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","file":"angular-api.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Action.Service', [\n  'Url.Service',\n])\n\n/**\n * Factory definition\n */\n.factory('$apiAction', function $apiAction($q, $injector, $log, $url) {\n\n  /**\n   * Return validated model class\n   */\n  function validatedModel(model) {\n\n    //No model?\n    if (!model) {\n      return null;\n    }\n\n    //Validate\n    if (!$injector.has(model)) {\n      if (model !== '$baseModel') {\n        $log.warn('Unknown model class/service:', model);\n      }\n      return null;\n    }\n\n    //Return model\n    return model;\n  }\n\n  /**\n   * Constructor\n   */\n  function ApiAction(action, endpoint) {\n\n    //Set vars\n    angular.extend(this, action);\n\n    //Set full action url, model and method\n    this.url = $url.concat(endpoint.url, this.url || '');\n    this.model = this.model || endpoint.model || false;\n    this.method = this.method || 'GET';\n    this.enforceDataFormat = endpoint.enforceDataFormat || false;\n\n    //Append config\n    if (endpoint.config) {\n      for (let key in endpoint.config) {\n        if (endpoint.config.hasOwnProperty(key)) {\n          this[key] = endpoint.config[key];\n        }\n      }\n    }\n\n    //Determine params\n    if (typeof this.params === 'undefined') {\n      this.params = endpoint.params;\n    }\n\n    //Normalize\n    this.params = this.params || {};\n\n    //Validate model\n    this.model = validatedModel(this.model);\n  }\n\n  /**\n   * Has body check\n   */\n  ApiAction.prototype.hasBody = function() {\n    return /^(POST|PUT|PATCH)$/i.test(this.method);\n  };\n\n  /**\n   * Expects array check\n   */\n  ApiAction.prototype.expectsArray = function() {\n    return Boolean(this.isArray);\n  };\n\n  /**\n   * Expects model check\n   */\n  ApiAction.prototype.expectsModel = function() {\n    return (this.model && Boolean(this.isModel));\n  };\n\n  /**\n   * Convert raw response data to a model\n   */\n  ApiAction.prototype.convertToModel = function(data) {\n\n    //Array given?\n    if (angular.isArray(data)) {\n      return data.map(data => this.convertToModel(data));\n    }\n\n    //No data?\n    if (!data || data === null) {\n      return null;\n    }\n\n    //Get model class and return model instance\n    let Model = $injector.get(this.model);\n    return new Model(data);\n  };\n\n  /**\n   * Default success response interceptor\n   */\n  ApiAction.prototype.successInterceptor = function(response) {\n\n    //Check if we expect an array\n    let expectsArray = this.expectsArray();\n    let isArray = angular.isArray(response.data);\n\n    //Validate data type\n    if (isArray !== expectsArray) {\n\n      //Issue warning\n      $log.warn(\n        'Expected', expectsArray ? 'array' : 'object',\n        'as response, got', isArray ? 'array' : (typeof response.data),\n        'for', this.method, this.url\n      );\n\n      //Enforce data format?\n      if (this.enforceDataFormat) {\n        response.data = (expectsArray ? [] : {});\n      }\n    }\n\n    //Empty array if no data sent\n    if (expectsArray && !response.data) {\n      return [];\n    }\n\n    //Sent data as is (also if null)\n    return response.data;\n  };\n\n  /**\n   * Default error response interceptor\n   */\n  ApiAction.prototype.errorInterceptor = function(response) {\n    return $q.reject(response);\n  };\n\n  //Return factory function\n  return function(action, endpoint) {\n    return new ApiAction(action, endpoint);\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Service', [\n  'Api.Endpoint.Service',\n])\n\n/**\n * Provider definition\n */\n.provider('$api', function $apiProvider() {\n\n  //Defaults\n  this.defaults = {\n    verbose: false,\n    enforceDataFormat: false,\n    baseUrl: '/',\n    actions: {\n      query: {\n        method: 'GET',\n        isArray: true,\n        isModel: true,\n      },\n      get: {\n        method: 'GET',\n        isModel: true,\n      },\n      create: {\n        method: 'POST',\n      },\n      update: {\n        method: 'PUT',\n      },\n      delete: {\n        method: 'DELETE',\n      },\n    },\n    params: {\n      id: '@id',\n    },\n    model: '',\n    config: {},\n    stripTrailingSlashes: true,\n  };\n\n  //Registered endpoints\n  this.endpoints = {};\n\n  /**\n   * Set verbose\n   */\n  this.setVerbose = function(verbose) {\n    this.defaults.verbose = !!verbose;\n    return this;\n  };\n\n  /**\n   * Set base URL\n   */\n  this.setBaseUrl = function(url) {\n    //TODO: the replacement is protecting port numbers from later becoming\n    //removed on account of the request service url parsing thinking it's a\n    //parameter. The code there should be updated to prevent port replacement,\n    //rather than \"protecting\" it in this manner here.\n    this.defaults.baseUrl = url.replace(/:([0-9]+)/, '\\\\:$1');\n    return this;\n  };\n\n  /**\n   * Set data format enforcing\n   */\n  this.setEnforceDataFormat = function(enforce) {\n    this.defaults.enforceDataFormat = !!enforce;\n    return this;\n  };\n\n  /**\n   * Set default actions\n   */\n  this.setDefaultActions = function(actions) {\n    this.defaults.actions = actions || {};\n    return this;\n  };\n\n  /**\n   * Set default params\n   */\n  this.setDefaultParams = function(params) {\n    this.defaults.params = params || {};\n    return this;\n  };\n\n  /**\n   * Set default model\n   */\n  this.setDefaultModel = function(model) {\n    this.defaults.model = model || false;\n    return this;\n  };\n\n  /**\n   * Set a generic config parameter (use only for config params that you\n   * want to pass on to the $http service)\n   */\n  this.setConfig = function(param, value) {\n    this.defaults.config[param] = value;\n    return this;\n  };\n\n  /**\n   * Strip trailing slashes behaviour\n   */\n  this.stripTrailingSlashes = function(strip) {\n    this.defaults.stripTrailingSlashes = !!strip;\n    return this;\n  };\n\n  /**\n   * Register endpoint\n   */\n  this.registerEndpoint = function(name, config) {\n    if (name) {\n      this.endpoints[name] = config || {};\n    }\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = function($log, $apiEndpoint) {\n\n    //Initialize API interface\n    let Api = function(endpoint) {\n      return this[endpoint];\n    };\n\n    //Append all endpoints\n    angular.forEach(this.endpoints, (config, name) => {\n\n      //Warn if overwriting\n      if (Api[name]) {\n        $log.warn('API endpoint', name, 'is being overwritten.');\n      }\n\n      //Extend endpoint config with defaults\n      config = angular.extend({}, this.defaults, config);\n      if (config.verbose) {\n        $log.info('API endpoint', name + ':', config);\n      }\n\n      //Initialize endpoint\n      Api[name] = $apiEndpoint(name, config);\n    });\n\n    //Return\n    return Api;\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('BaseModel.Service', [])\n\n/**\n * Model definition\n */\n.factory('$baseModel', function($window, $log, $injector) {\n\n  //See if we have the moment service available to us\n  let moment;\n  if ($injector.has('moment')) {\n    moment = $injector.get('moment');\n  }\n  else if (typeof $window.moment !== 'undefined') {\n    moment = $window.moment;\n  }\n\n  /**\n   * Check if given string is a ISO 8601 date string,\n   * Returns a moment if it is and null if it's not\n   */\n  function dateStringToMoment(value) {\n    let regex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}).*/;\n    if (value.match(regex)) {\n      let date = moment(value, moment.ISO_8601, true);\n      if (date.isValid()) {\n        return date;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Copy a property\n   */\n  function copyProperty(obj, key) {\n    if (angular.isArray(obj[key])) {\n      let arr = obj[key];\n      //eslint-disable-next-line no-unused-vars\n      return arr.map((value, key) => copyProperty(arr, key));\n    }\n    if (obj[key] && angular.isFunction(obj[key].clone)) {\n      return obj[key].clone();\n    }\n    return angular.copy(obj[key]);\n  }\n\n  /**\n   * Constructor\n   */\n  function $baseModel(data, parent) {\n\n    //Define parent property\n    let _parent = parent;\n    Object.defineProperty(this, '$parent', {\n      enumerable: false,\n      get() {\n        return _parent;\n      },\n      set(parent) {\n        _parent = parent;\n      },\n    });\n\n    //Load data\n    this.fromJSON(data);\n  }\n\n  /**************************************************************************\n   * Helper methods\n   ***/\n\n  /**\n   * Convert a property to a model\n   */\n  $baseModel.prototype.convertToModel = function(\n    key, Model, isArray\n  ) {\n\n    //Paremeter shuffling\n    if (typeof Model === 'boolean') {\n      isArray = Model;\n      Model = null;\n    }\n\n    //If undefined, check what we were expecting\n    if (typeof this[key] === 'undefined') {\n      if (isArray) {\n        this[key] = [];\n      }\n      else {\n        this[key] = null;\n      }\n    }\n\n    //If no model specified or if empty, we're done\n    if (!Model || !this[key]) {\n      return;\n    }\n\n    //String specified, use injector\n    if (typeof Model === 'string') {\n      if (!$injector.has(Model)) {\n        return $log.warn(\n          'Unknown model', Model, 'specified for sub model conversion'\n        );\n      }\n      Model = $injector.get(Model);\n    }\n\n    //Get model class and initiate\n    if (angular.isArray(this[key])) {\n      this[key] = this[key].map(data => new Model(data, this));\n    }\n    else if (angular.isString(this[key]) && $baseModel.isId(this[key])) {\n      this[key] = new Model({id: this[key]}, this);\n    }\n    else {\n      this[key] = new Model(this[key], this);\n    }\n  };\n\n  /**\n   * From JSON converter\n   */\n  $baseModel.prototype.fromJSON = function(json) {\n    if (angular.isObject(json)) {\n      angular.forEach(json, (value, key) => {\n        this[key] = $baseModel.valueFromJSON(value);\n      }, this);\n    }\n    return this;\n  };\n\n  /**\n   * To JSON converter\n   */\n  $baseModel.prototype.toJSON = function(data) {\n    let json = {};\n    if (data && angular.isObject(data)) {\n      angular.forEach(data, (value, key) => {\n        json[key] = $baseModel.valueToJSON(value);\n      });\n    }\n    angular.forEach(this, (value, key) => {\n      if (!json.hasOwnProperty(key)) {\n        json[key] = $baseModel.valueToJSON(value);\n      }\n    });\n    return json;\n  };\n\n  /**\n   * Extract a subset of data from the model\n   */\n  $baseModel.prototype.extract = function(properties) {\n\n    //If string given, just return copy of one property\n    if (typeof properties === 'string') {\n      return copyProperty(this, properties);\n    }\n\n    //Initialize object\n    let obj = {};\n\n    //No properties given? Iterate all object properties\n    if (!angular.isArray(properties) || !properties.length) {\n      //eslint-disable-next-line no-unused-vars\n      angular.forEach(this, (value, key) => {\n        if (key.substr(0, 2) !== '$$') {\n          obj[key] = copyProperty(this, key);\n        }\n      });\n    }\n    else {\n      angular.forEach(properties, key => {\n        obj[key] = copyProperty(this, key);\n      });\n    }\n\n    //Return resulting object\n    return obj;\n  };\n\n  /**\n   * Merge a set of data into the model\n   */\n  $baseModel.prototype.merge = function(data) {\n    if (data && angular.isObject(data)) {\n      //eslint-disable-next-line no-unused-vars\n      angular.forEach(data, (value, key) => {\n        this[key] = copyProperty(data, key);\n      });\n    }\n    return this;\n  };\n\n  /**\n   * Clear own properties\n   */\n  $baseModel.prototype.clear = function() {\n    for (let key in this) {\n      if (this.hasOwnProperty(key)) {\n        delete this[key];\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Clone\n   */\n  $baseModel.prototype.clone = function(stripId) {\n    let ModelClass = this.constructor;\n    let clone = new ModelClass(this.extract(), this.$parent);\n    if (stripId) {\n      delete clone.id;\n    }\n    return clone;\n  };\n\n  /**\n   * Check if two models are the same (based on ID)\n   */\n  $baseModel.prototype.isSame = function(model) {\n    if (!angular.isObject(model)) {\n      return (this.id === model);\n    }\n    return (this.id && model.id && this.id === model.id);\n  };\n\n  /**\n   * Copy a property\n   */\n  $baseModel.prototype.copyProperty = function(obj, key) {\n    if (this[key] && angular.isFunction(this[key].clone)) {\n      obj[key] = this[key].clone();\n    }\n    else {\n      obj[key] = angular.copy(this[key]);\n    }\n  };\n\n  /**\n   * Set parent\n   */\n  $baseModel.prototype.setParent = function(parent) {\n    this.$parent = parent;\n  };\n\n  /**************************************************************************\n   * Static methods\n   ***/\n\n  /**\n   * Helper to convert a value from JSON\n   */\n  $baseModel.valueFromJSON = function(value) {\n    if (angular.isArray(value)) {\n      return value.map($baseModel.valueFromJSON);\n    }\n    else if (moment && angular.isString(value)) {\n      let date = dateStringToMoment(value);\n      return date || value;\n    }\n    else if (value && angular.isObject(value)) {\n      if (value._isAMomentObject) {\n        return value.clone();\n      }\n      let copy = {};\n      for (let prop in value) {\n        if (value.hasOwnProperty(prop)) {\n          copy[prop] = $baseModel.valueFromJSON(value[prop]);\n        }\n      }\n      return copy;\n    }\n    return value;\n  };\n\n  /**\n  * Helper to convert a value to JSON\n  */\n  $baseModel.valueToJSON = function(value) {\n    if (angular.isArray(value)) {\n      return value.map($baseModel.valueToJSON);\n    }\n    else if (value && angular.isObject(value)) {\n      if (angular.isFunction(value.toJSON)) {\n        return value.toJSON();\n      }\n      let copy = {};\n      for (let prop in value) {\n        if (value.hasOwnProperty(prop) && prop.substr(0, 2) !== '$$') {\n          copy[prop] = $baseModel.valueToJSON(value[prop]);\n        }\n      }\n      return copy;\n    }\n    return value;\n  };\n\n  /**\n   * Strip object to only ID\n   */\n  $baseModel.onlyId = function(obj) {\n    if (angular.isArray(obj)) {\n      return obj.map($baseModel.onlyId);\n    }\n    if (!obj || typeof obj !== 'object' || !obj.id) {\n      return obj;\n    }\n    return obj.id;\n  };\n\n  /**\n   * Strip a given object to specific keys\n   */\n  $baseModel.strip = function(obj, ...keys) {\n    if (angular.isArray(obj)) {\n      return obj.map(obj => $baseModel.strip(obj, ...keys));\n    }\n    if (!obj || typeof obj !== 'object') {\n      return obj;\n    }\n    //eslint-disable-next-line no-unused-vars\n    angular.forEach(obj, (value, key) => {\n      if (!keys.includes(key)) {\n        delete obj[key];\n      }\n    });\n    return obj;\n  };\n\n  /**\n   * Strip ID's recursively from a given object\n   */\n  $baseModel.stripIds = function(obj) {\n    if (angular.isArray(obj)) {\n      return obj.map(obj => $baseModel.stripIds(obj));\n    }\n    if (!obj || typeof obj !== 'object') {\n      return obj;\n    }\n    if (typeof obj.id !== 'undefined') {\n      delete obj.id;\n    }\n    angular.forEach(obj, value => {\n      if (value && typeof value === 'object') {\n        $baseModel.stripIds(value);\n      }\n    });\n    return obj;\n  };\n\n  /**\n   * Test for MongoDB object ID\n   */\n  $baseModel.isId = function(str) {\n    return str.match(/^[a-f\\d]{24}$/i);\n  };\n\n  //Return\n  return $baseModel;\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Endpoint.Service', [\n  'Api.Action.Service',\n  'Api.Request.Service',\n  'Url.Service',\n])\n\n/**\n * Factory definition\n */\n.factory('$apiEndpoint', function $apiEndpoint($url, $apiAction, $apiRequest) {\n\n  /**\n   * Constructor\n   */\n  function ApiEndpoint(name, config) {\n\n    //Determine full URL of endpoint\n    config.actions = config.actions || {};\n    config.url = $url.concat(\n      config.baseUrl, config.url || $url.concat(name, ':id')\n    );\n\n    //Expose config and actions container\n    this.$config = config;\n    this.$actions = {};\n\n    //Create action instances and bind request method to action key on endpoint\n    angular.forEach(config.actions, (action, key) => {\n      this.$actions[key] = $apiAction(action || {}, config);\n      this[key] = angular.bind(this, $apiRequest, this.$actions[key]);\n    });\n  }\n\n  //Return factory function\n  return function(name, config) {\n    return new ApiEndpoint(name, config);\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Request.Service', [\n  'Url.Service',\n])\n\n/**\n * Factory definition\n */\n.factory('$apiRequest', function $apiRequest($http, $url) {\n\n  /**\n   * Check if dotted path is valid\n   */\n  function isValidDottedPath(path) {\n    return (\n      path && path !== 'hasOwnProperty' &&\n      /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test('.' + path)\n    );\n  }\n\n  /**\n   * Lookup dotted path in an object\n   */\n  function lookupDottedPath(obj, path) {\n\n    //Check if valid\n    if (!isValidDottedPath(path)) {\n      throw new Error('Invalid dotted path:' + path);\n    }\n\n    //Split path in object keys to traverse\n    let keys = path.split('.');\n    for (let i = 0; i < keys.length && obj !== undefined; i++) {\n      let key = keys[i];\n      obj = (obj !== null) ? obj[key] : undefined;\n    }\n\n    //Return reference\n    return obj;\n  }\n\n  /**\n   * Combine given params with extracted params from data\n   */\n  function combineParams(actionParams, givenParams, data) {\n\n    //Extract data params from action params\n    let extractedParams = {};\n    angular.forEach(actionParams || {}, (value, key) => {\n\n      //Function? Call now\n      if (angular.isFunction(value)) {\n        value = value();\n      }\n\n      //String value with @ identifier? Look up in data\n      if (angular.isString(value) && value.charAt(0) === '@') {\n        value = lookupDottedPath(data, value.substr(1));\n      }\n\n      //Set value\n      extractedParams[key] = value;\n    });\n\n    //Extend with given params\n    return angular.extend(extractedParams, givenParams || {});\n  }\n\n  /**\n   * Find URL params\n   */\n  function findUrlParams(url) {\n    let urlParams = {};\n    angular.forEach(url.split(/\\W/), param => {\n\n      //Filter hasOwnProperty\n      if (param === 'hasOwnProperty') {\n        throw new Error('Invalid parameter name: hasOwnProperty');\n      }\n\n      //Find all valid url params (have value, non digit)\n      if (param && !(/^\\\\d+$/.test(param))) {\n        if (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url)) {\n          urlParams[param] = true;\n        }\n      }\n    });\n    return urlParams;\n  }\n\n  /**\n   * Clean up URL\n   */\n  function cleanUpUrl(url, stripTrailingSlashes) {\n\n    //Strip trailing slashes if needed\n    if (stripTrailingSlashes) {\n      url = url.replace(/\\/+$/, '') || '/';\n    }\n\n    //Replace collapsed `/.` if found in the last URL path segment before\n    //the query, e.g. `http://url.com/id./format?q=x` becomes\n    //`http://url.com/id.format?q=x`\n    return url\n      .replace(/\\/\\.(?=\\w+($|\\?))/, '.')\n      .replace(/\\/\\\\\\./, '/.');\n  }\n\n  /**\n   * Parse URL\n   */\n  function parseUrl(url, params, urlParams, stripTrailingSlashes) {\n\n    //Replace escaped \\:\n    url = url.replace(/\\\\:/g, ':');\n\n    //Loop the valid URL params now\n    //eslint-disable-next-line no-unused-vars\n    angular.forEach(urlParams, (t, urlParam) => {\n\n      //Extract value for this url param from given params\n      let val = params.hasOwnProperty(urlParam) ? params[urlParam] : null;\n      let regex;\n\n      //If defined and not null, encode it and replace in URL\n      if (angular.isDefined(val) && val !== null) {\n        let encodedVal = $url.encodeUriSegment(val);\n        regex = new RegExp(':' + urlParam + '(\\\\W|$)', 'g');\n        //eslint-disable-next-line no-unused-vars\n        url = url.replace(regex, (match, tail) => {\n          return encodedVal + tail;\n        });\n      }\n\n      //Otherwise, remove from URL\n      else {\n        regex = new RegExp('(/?):' + urlParam + '(\\\\W|$)', 'g');\n        //eslint-disable-next-line no-unused-vars\n        url = url.replace(regex, (match, leadingSlashes, tail) => {\n          if (tail.charAt(0) === '/') {\n            return tail;\n          }\n          else {\n            return leadingSlashes + tail;\n          }\n        });\n      }\n    });\n\n    //Return cleaned up URL\n    return cleanUpUrl(url, stripTrailingSlashes);\n  }\n\n  /**\n   * Create request config\n   */\n  function createRequestConfig(action, params, data, config) {\n\n    //Initialize\n    let request = {};\n    let stripConfigKeys = [\n      'params', 'model', 'isArray', 'isModel',\n      'successInterceptor', 'errorInterceptor',\n      'stripTrailingSlashes',\n    ];\n\n    //Map action config to http request config\n    angular.forEach(action, (value, key) => {\n      if (stripConfigKeys.indexOf(key) === -1) {\n        request[key] = angular.copy(value);\n      }\n    });\n\n    //Attach given extra config\n    if (config && angular.isObject(config)) {\n      angular.forEach(config, (value, key) => {\n        request[key] = angular.copy(value);\n      });\n    }\n\n    //Append data if we have a body\n    if (action.hasBody() && data && angular.isObject(data)) {\n      if (angular.isFunction(data.toJSON)) {\n        request.data = data.toJSON();\n      }\n      else if (angular.isArray(data)) {\n        request.data = data;\n      }\n      else {\n        request.data = angular.extend({}, data);\n      }\n    }\n\n    //Ensure we don't overwrite the params objects keys in place\n    params = angular.copy(params);\n\n    //Process params\n    if (params && angular.isObject(params)) {\n      for (let key in params) {\n        if (params.hasOwnProperty(key) && angular.isObject(params[key])) {\n          if (angular.isFunction(params[key].toJSON)) {\n            params[key] = params[key].toJSON();\n          }\n        }\n      }\n    }\n\n    //Combine params out of given params and data and find URL params\n    params = combineParams(action.params, params, data);\n    let urlParams = findUrlParams(request.url);\n\n    //Parse URL\n    request.url = parseUrl(\n      action.url, params, urlParams, action.stripTrailingSlashes);\n\n    //Set remaining given non-url params as query params,\n    //delegate param encoding to $http\n    angular.forEach(params, (value, key) => {\n      if (!urlParams[key]) {\n        request.params = request.params || {};\n        request.params[key] = value;\n      }\n    });\n\n    //Return\n    return request;\n  }\n\n  /**\n   * Api request executer\n   */\n  return function ApiRequest(action, params, data, config) {\n\n    //Parameter juggling\n    if (action.hasBody() && params && !data) {\n      data = params;\n      params = null;\n    }\n\n    //Create request config and use $http to do the request\n    //and intercept the response\n    let request = createRequestConfig(action, params, data, config);\n    return $http(request)\n      .then(action.successInterceptor.bind(action))\n      .catch(action.errorInterceptor.bind(action))\n      .then(raw => {\n        if (action.expectsModel()) {\n          return action.convertToModel(raw);\n        }\n        return raw;\n      });\n  };\n});\n\n})(window, window.angular);\n"]}