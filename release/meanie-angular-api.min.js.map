{"version":3,"sources":["meanie-angular-api.min.js","action.service.js","api.service.js","baseModel.service.js","endpoint.service.js","request.service.js"],"names":["_typeof","Symbol","iterator","obj","constructor","window","angular","undefined","module","factory","$q","$injector","$log","$url","validatedModel","model","has","warn","ApiAction","action","endpoint","extend","this","url","concat","method","enforceDataFormat","params","prototype","hasBody","test","expectsArray","Boolean","isArray","expectsModel","isModel","convertToModel","data","_this","map","Model","get","successInterceptor","response","errorInterceptor","reject","provider","defaults","verbose","baseUrl","actions","query","create","update","delete","id","stripTrailingSlashes","endpoints","setVerbose","setBaseUrl","replace","setEnforceDataFormat","enforce","setDefaultActions","setDefaultParams","setDefaultModel","setConfig","param","value","strip","registerEndpoint","name","config","$get","$apiEndpoint","Api","forEach","info","$window","dateStringToMoment","regex","match","date","moment","ISO_8601","isValid","copyProperty","key","_ret","arr","v","isFunction","clone","copy","$baseModel","parent","_parent","Object","defineProperty","enumerable","set","fromJSON","isString","isId","json","_this2","isObject","valueFromJSON","toJSON","valueToJSON","hasOwnProperty","extract","properties","_this3","length","substr","merge","_this4","clear","stripId","ModelClass","$parent","isSame","setParent","_isAMomentObject","prop","onlyId","_len","arguments","keys","Array","_key","apply","includes","stripIds","str","$apiAction","$apiRequest","ApiEndpoint","$config","$actions","bind","$http","isValidDottedPath","path","lookupDottedPath","Error","split","i","combineParams","actionParams","givenParams","extractedParams","charAt","findUrlParams","urlParams","RegExp","cleanUpUrl","parseUrl","t","urlParam","val","isDefined","encodedVal","encodeUriSegment","tail","leadingSlashes","createRequestConfig","request","stripConfigKeys","indexOf","promise","then","raw"],"mappings":"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","file":"meanie-angular-api.min.js","sourcesContent":["/**\n * meanie-angular-api * https://github.com/meanie/angular-api\n *\n * Copyright (c) 2017 Adam Reis <adam@reis.nz>\n * License: MIT\n */\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Action.Service', ['Url.Service'])\n\n  /**\n   * Factory definition\n   */\n  .factory('$apiAction', ['$q', '$injector', '$log', '$url', function $apiAction($q, $injector, $log, $url) {\n\n    /**\n     * Return validated model class\n     */\n    function validatedModel(model) {\n\n      //No model?\n      if (!model) {\n        return null;\n      }\n\n      //Validate\n      if (!$injector.has(model)) {\n        if (model !== '$baseModel') {\n          $log.warn('Unknown model class/service:', model);\n        }\n        return null;\n      }\n\n      //Return model\n      return model;\n    }\n\n    /**\n     * Constructor\n     */\n    function ApiAction(action, endpoint) {\n\n      //Set vars\n      angular.extend(this, action);\n\n      //Set full action url, model and method\n      this.url = $url.concat(endpoint.url, this.url || '');\n      this.model = this.model || endpoint.model || false;\n      this.method = this.method || 'GET';\n      this.enforceDataFormat = endpoint.enforceDataFormat || false;\n\n      //Determine params\n      if (typeof this.params === 'undefined') {\n        this.params = endpoint.params;\n      }\n\n      //Normalize\n      this.params = this.params || {};\n\n      //Validate model\n      this.model = validatedModel(this.model);\n    }\n\n    /**\n     * Has body check\n     */\n    ApiAction.prototype.hasBody = function () {\n      return (/^(POST|PUT|PATCH)$/i.test(this.method)\n      );\n    };\n\n    /**\n     * Expects array check\n     */\n    ApiAction.prototype.expectsArray = function () {\n      return Boolean(this.isArray);\n    };\n\n    /**\n     * Expects model check\n     */\n    ApiAction.prototype.expectsModel = function () {\n      return this.model && Boolean(this.isModel);\n    };\n\n    /**\n     * Convert raw response data to a model\n     */\n    ApiAction.prototype.convertToModel = function (data) {\n      var _this = this;\n\n      //Array given?\n      if (angular.isArray(data)) {\n        return data.map(function (data) {\n          return _this.convertToModel(data);\n        });\n      }\n\n      //Get model class and return model instance\n      var Model = $injector.get(this.model);\n      return new Model(data);\n    };\n\n    /**\n     * Default success response interceptor\n     */\n    ApiAction.prototype.successInterceptor = function (response) {\n\n      //Check if we expect an array\n      var expectsArray = this.expectsArray();\n      var isArray = angular.isArray(response.data);\n\n      //Validate data type\n      if (isArray !== expectsArray) {\n\n        //Issue warning\n        $log.warn('Expected', expectsArray ? 'array' : 'object', 'as response, got', isArray ? 'array' : _typeof(response.data));\n\n        //Enforce data format?\n        if (this.enforceDataFormat) {\n          response.data = expectsArray ? [] : {};\n        }\n      }\n\n      //Initialize if empty\n      return response.data || (expectsArray ? [] : {});\n    };\n\n    /**\n     * Default error response interceptor\n     */\n    ApiAction.prototype.errorInterceptor = function (response) {\n      return $q.reject(response);\n    };\n\n    //Return factory function\n    return function (action, endpoint) {\n      return new ApiAction(action, endpoint);\n    };\n  }]);\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Service', ['Api.Endpoint.Service'])\n\n  /**\n   * Provider definition\n   */\n  .provider('$api', function $apiProvider() {\n\n    //Defaults\n    this.defaults = {\n      verbose: false,\n      enforceDataFormat: false,\n      baseUrl: '/',\n      actions: {\n        query: {\n          method: 'GET',\n          isArray: true,\n          isModel: true\n        },\n        get: {\n          method: 'GET',\n          isModel: true\n        },\n        create: {\n          method: 'POST'\n        },\n        update: {\n          method: 'PUT'\n        },\n        delete: {\n          method: 'DELETE'\n        }\n      },\n      params: {\n        id: '@id'\n      },\n      model: '',\n      stripTrailingSlashes: true\n    };\n\n    //Registered endpoints\n    this.endpoints = {};\n\n    /**\n     * Set verbose\n     */\n    this.setVerbose = function (verbose) {\n      this.defaults.verbose = !!verbose;\n      return this;\n    };\n\n    /**\n     * Set base URL\n     */\n    this.setBaseUrl = function (url) {\n      //TODO: the replacement is protecting port numbers from later becoming\n      //removed on account of the request service url parsing thinking it's a\n      //parameter. The code there should be updated to prevent port replacement,\n      //rather than \"protecting\" it in this manner here.\n      this.defaults.baseUrl = url.replace(/:([0-9]+)/, '\\\\:$1');\n      return this;\n    };\n\n    /**\n     * Set data format enforcing\n     */\n    this.setEnforceDataFormat = function (enforce) {\n      this.defaults.enforceDataFormat = !!enforce;\n      return this;\n    };\n\n    /**\n     * Set default actions\n     */\n    this.setDefaultActions = function (actions) {\n      this.defaults.actions = actions || {};\n      return this;\n    };\n\n    /**\n     * Set default params\n     */\n    this.setDefaultParams = function (params) {\n      this.defaults.params = params || {};\n      return this;\n    };\n\n    /**\n     * Set default model\n     */\n    this.setDefaultModel = function (model) {\n      this.defaults.model = model || false;\n      return this;\n    };\n\n    /**\n     * Set a generic config parameter (use only for config params that you\n     * want to pass on to the $http service)\n     */\n    this.setConfig = function (param, value) {\n      this.defaults[param] = value;\n      return this;\n    };\n\n    /**\n     * Strip trailing slashes behaviour\n     */\n    this.stripTrailingSlashes = function (strip) {\n      this.defaults.stripTrailingSlashes = !!strip;\n      return this;\n    };\n\n    /**\n     * Register endpoint\n     */\n    this.registerEndpoint = function (name, config) {\n      if (name) {\n        this.endpoints[name] = config || {};\n      }\n      return this;\n    };\n\n    /**\n     * Service getter\n     */\n    this.$get = ['$log', '$apiEndpoint', function ($log, $apiEndpoint) {\n      var _this = this;\n\n      //Initialize API interface\n      var Api = function Api(endpoint) {\n        return this[endpoint];\n      };\n\n      //Append all endpoints\n      angular.forEach(this.endpoints, function (config, name) {\n\n        //Warn if overwriting\n        if (Api[name]) {\n          $log.warn('API endpoint', name, 'is being overwritten.');\n        }\n\n        //Extend endpoint config with defaults\n        config = angular.extend({}, _this.defaults, config);\n        if (config.verbose) {\n          $log.info('API endpoint', name + ':', config);\n        }\n\n        //Initialize endpoint\n        Api[name] = $apiEndpoint(name, config);\n      });\n\n      //Return\n      return Api;\n    }];\n  });\n})(window, window.angular);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('BaseModel.Service', [])\n\n  /**\n   * Model definition\n   */\n  .factory('$baseModel', ['$window', '$log', '$injector', function ($window, $log, $injector) {\n\n    //See if we have the moment service available to us\n    var moment = void 0;\n    if ($injector.has('moment')) {\n      moment = $injector.get('moment');\n    } else if (typeof $window.moment !== 'undefined') {\n      moment = $window.moment;\n    }\n\n    /**\n     * Check if given string is a ISO 8601 date string,\n     * Returns a moment if it is and null if it's not\n     */\n    function dateStringToMoment(value) {\n      var regex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2}).*/;\n      if (value.match(regex)) {\n        var date = moment(value, moment.ISO_8601, true);\n        if (date.isValid()) {\n          return date;\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Copy a property\n     */\n    function copyProperty(obj, key) {\n      if (angular.isArray(obj[key])) {\n        var _ret = function () {\n          var arr = obj[key];\n          return {\n            v: arr.map(function (value, key) {\n              return copyProperty(arr, key);\n            })\n          };\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n      }\n      if (obj[key] && angular.isFunction(obj[key].clone)) {\n        return obj[key].clone();\n      }\n      return angular.copy(obj[key]);\n    }\n\n    /**\n     * Constructor\n     */\n    function $baseModel(data, parent) {\n\n      //Define parent property\n      var _parent = parent;\n      Object.defineProperty(this, '$parent', {\n        enumerable: false,\n        get: function get() {\n          return _parent;\n        },\n        set: function set(parent) {\n          _parent = parent;\n        }\n      });\n\n      //Load data\n      this.fromJSON(data);\n    }\n\n    /**************************************************************************\n     * Helper methods\n     ***/\n\n    /**\n     * Convert a property to a model\n     */\n    $baseModel.prototype.convertToModel = function (key, Model, isArray) {\n      var _this = this;\n\n      //Paremeter shuffling\n      if (typeof Model === 'boolean') {\n        isArray = Model;\n        Model = null;\n      }\n\n      //If undefined, check what we were expecting\n      if (typeof this[key] === 'undefined') {\n        if (isArray) {\n          this[key] = [];\n        } else {\n          this[key] = null;\n        }\n      }\n\n      //If no model specified or if empty, we're done\n      if (!Model || !this[key]) {\n        return;\n      }\n\n      //String specified, use injector\n      if (typeof Model === 'string') {\n        if (!$injector.has(Model)) {\n          return $log.warn('Unknown model', Model, 'specified for sub model conversion');\n        }\n        Model = $injector.get(Model);\n      }\n\n      //Get model class and initiate\n      if (angular.isArray(this[key])) {\n        this[key] = this[key].map(function (data) {\n          return new Model(data, _this);\n        });\n      } else if (angular.isString(this[key]) && $baseModel.isId(this[key])) {\n        this[key] = new Model({ id: this[key] }, this);\n      } else {\n        this[key] = new Model(this[key], this);\n      }\n    };\n\n    /**\n     * From JSON converter\n     */\n    $baseModel.prototype.fromJSON = function (json) {\n      var _this2 = this;\n\n      if (angular.isObject(json)) {\n        angular.forEach(json, function (value, key) {\n          _this2[key] = $baseModel.valueFromJSON(value);\n        }, this);\n      }\n      return this;\n    };\n\n    /**\n     * To JSON converter\n     */\n    $baseModel.prototype.toJSON = function (data) {\n      var json = {};\n      if (data && angular.isObject(data)) {\n        angular.forEach(data, function (value, key) {\n          json[key] = $baseModel.valueToJSON(value);\n        });\n      }\n      angular.forEach(this, function (value, key) {\n        if (!json.hasOwnProperty(key)) {\n          json[key] = $baseModel.valueToJSON(value);\n        }\n      });\n      return json;\n    };\n\n    /**\n     * Extract a subset of data from the model\n     */\n    $baseModel.prototype.extract = function (properties) {\n      var _this3 = this;\n\n      //If string given, just return copy of one property\n      if (typeof properties === 'string') {\n        return copyProperty(this, properties);\n      }\n\n      //Initialize object\n      var obj = {};\n\n      //No properties given? Iterate all object properties\n      if (!angular.isArray(properties) || !properties.length) {\n        angular.forEach(this, function (value, key) {\n          if (key.substr(0, 2) !== '$$') {\n            obj[key] = copyProperty(_this3, key);\n          }\n        });\n      } else {\n        angular.forEach(properties, function (key) {\n          obj[key] = copyProperty(_this3, key);\n        });\n      }\n\n      //Return resulting object\n      return obj;\n    };\n\n    /**\n     * Merge a set of data into the model\n     */\n    $baseModel.prototype.merge = function (data) {\n      var _this4 = this;\n\n      if (data && angular.isObject(data)) {\n        angular.forEach(data, function (value, key) {\n          _this4[key] = copyProperty(data, key);\n        });\n      }\n    };\n\n    /**\n     * Clear own properties\n     */\n    $baseModel.prototype.clear = function () {\n      for (var key in this) {\n        if (this.hasOwnProperty(key)) {\n          delete this[key];\n        }\n      }\n    };\n\n    /**\n     * Clone\n     */\n    $baseModel.prototype.clone = function (stripId) {\n      var ModelClass = this.constructor;\n      var clone = new ModelClass(this.extract(), this.$parent);\n      if (stripId) {\n        delete clone.id;\n      }\n      return clone;\n    };\n\n    /**\n     * Check if two models are the same (based on ID)\n     */\n    $baseModel.prototype.isSame = function (model) {\n      if (!angular.isObject(model)) {\n        return this.id === model;\n      }\n      return this.id && model.id && this.id === model.id;\n    };\n\n    /**\n     * Copy a property\n     */\n    $baseModel.prototype.copyProperty = function (obj, key) {\n      if (this[key] && angular.isFunction(this[key].clone)) {\n        obj[key] = this[key].clone();\n      } else {\n        obj[key] = angular.copy(this[key]);\n      }\n    };\n\n    /**\n     * Set parent\n     */\n    $baseModel.prototype.setParent = function (parent) {\n      this.$parent = parent;\n    };\n\n    /**************************************************************************\n     * Static methods\n     ***/\n\n    /**\n     * Helper to convert a value from JSON\n     */\n    $baseModel.valueFromJSON = function (value) {\n      if (angular.isArray(value)) {\n        return value.map($baseModel.valueFromJSON);\n      } else if (moment && angular.isString(value)) {\n        var date = dateStringToMoment(value);\n        return date || value;\n      } else if (value && angular.isObject(value)) {\n        if (value._isAMomentObject) {\n          return value.clone();\n        }\n        var copy = {};\n        for (var prop in value) {\n          if (value.hasOwnProperty(prop)) {\n            copy[prop] = $baseModel.valueFromJSON(value[prop]);\n          }\n        }\n        return copy;\n      }\n      return value;\n    };\n\n    /**\n    * Helper to convert a value to JSON\n    */\n    $baseModel.valueToJSON = function (value) {\n      if (angular.isArray(value)) {\n        return value.map($baseModel.valueToJSON);\n      } else if (value && angular.isObject(value)) {\n        if (angular.isFunction(value.toJSON)) {\n          return value.toJSON();\n        }\n        var copy = {};\n        for (var prop in value) {\n          if (value.hasOwnProperty(prop) && prop.substr(0, 2) !== '$$') {\n            copy[prop] = $baseModel.valueToJSON(value[prop]);\n          }\n        }\n        return copy;\n      }\n      return value;\n    };\n\n    /**\n     * Strip object to only ID\n     */\n    $baseModel.onlyId = function (obj) {\n      if (angular.isArray(obj)) {\n        return obj.map($baseModel.onlyId);\n      }\n      if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || !obj.id) {\n        return obj;\n      }\n      return obj.id;\n    };\n\n    /**\n     * Strip a given object to specific keys\n     */\n    $baseModel.strip = function (obj) {\n      for (var _len = arguments.length, keys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        keys[_key - 1] = arguments[_key];\n      }\n\n      if (angular.isArray(obj)) {\n        return obj.map(function (obj) {\n          return $baseModel.strip.apply($baseModel, [obj].concat(keys));\n        });\n      }\n      if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {\n        return obj;\n      }\n      angular.forEach(obj, function (value, key) {\n        if (!keys.includes(key)) {\n          delete obj[key];\n        }\n      });\n      return obj;\n    };\n\n    /**\n     * Strip ID's recursively from a given object\n     */\n    $baseModel.stripIds = function (obj) {\n      if (angular.isArray(obj)) {\n        return obj.map(function (obj) {\n          return $baseModel.stripIds(obj);\n        });\n      }\n      if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {\n        return obj;\n      }\n      if (typeof obj.id !== 'undefined') {\n        delete obj.id;\n      }\n      angular.forEach(obj, function (value) {\n        if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n          $baseModel.stripIds(value);\n        }\n      });\n      return obj;\n    };\n\n    /**\n     * Test for MongoDB object ID\n     */\n    $baseModel.isId = function (str) {\n      return str.match(/^[a-f\\d]{24}$/i);\n    };\n\n    //Return\n    return $baseModel;\n  }]);\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Endpoint.Service', ['Api.Action.Service', 'Api.Request.Service', 'Url.Service'])\n\n  /**\n   * Factory definition\n   */\n  .factory('$apiEndpoint', ['$url', '$apiAction', '$apiRequest', function $apiEndpoint($url, $apiAction, $apiRequest) {\n\n    /**\n     * Constructor\n     */\n    function ApiEndpoint(name, config) {\n      var _this = this;\n\n      //Determine full URL of endpoint\n      config.actions = config.actions || {};\n      config.url = $url.concat(config.baseUrl, config.url || $url.concat(name, ':id'));\n\n      //Expose config and actions container\n      this.$config = config;\n      this.$actions = {};\n\n      //Create action instances and bind request method to action key on endpoint\n      angular.forEach(config.actions, function (action, key) {\n        _this.$actions[key] = $apiAction(action || {}, config);\n        _this[key] = angular.bind(_this, $apiRequest, _this.$actions[key]);\n      });\n    }\n\n    //Return factory function\n    return function (name, config) {\n      return new ApiEndpoint(name, config);\n    };\n  }]);\n})(window, window.angular);\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Request.Service', ['Url.Service'])\n\n  /**\n   * Factory definition\n   */\n  .factory('$apiRequest', ['$http', '$url', function $apiRequest($http, $url) {\n\n    /**\n     * Check if dotted path is valid\n     */\n    function isValidDottedPath(path) {\n      return path && path !== 'hasOwnProperty' && /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test('.' + path);\n    }\n\n    /**\n     * Lookup dotted path in an object\n     */\n    function lookupDottedPath(obj, path) {\n\n      //Check if valid\n      if (!isValidDottedPath(path)) {\n        throw new Error('Invalid dotted path:' + path);\n      }\n\n      //Split path in object keys to traverse\n      var keys = path.split('.');\n      for (var i = 0; i < keys.length && obj !== undefined; i++) {\n        var key = keys[i];\n        obj = obj !== null ? obj[key] : undefined;\n      }\n\n      //Return reference\n      return obj;\n    }\n\n    /**\n     * Combine given params with extracted params from data\n     */\n    function combineParams(actionParams, givenParams, data) {\n\n      //Extract data params from action params\n      var extractedParams = {};\n      angular.forEach(actionParams || {}, function (value, key) {\n\n        //Function? Call now\n        if (angular.isFunction(value)) {\n          value = value();\n        }\n\n        //String value with @ identifier? Look up in data\n        if (angular.isString(value) && value.charAt(0) === '@') {\n          value = lookupDottedPath(data, value.substr(1));\n        }\n\n        //Set value\n        extractedParams[key] = value;\n      });\n\n      //Extend with given params\n      return angular.extend(extractedParams, givenParams || {});\n    }\n\n    /**\n     * Find URL params\n     */\n    function findUrlParams(url) {\n      var urlParams = {};\n      angular.forEach(url.split(/\\W/), function (param) {\n\n        //Filter hasOwnProperty\n        if (param === 'hasOwnProperty') {\n          throw new Error('Invalid parameter name: hasOwnProperty');\n        }\n\n        //Find all valid url params (have value, non digit)\n        if (param && !/^\\\\d+$/.test(param)) {\n          if (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url)) {\n            urlParams[param] = true;\n          }\n        }\n      });\n      return urlParams;\n    }\n\n    /**\n     * Clean up URL\n     */\n    function cleanUpUrl(url, stripTrailingSlashes) {\n\n      //Strip trailing slashes if needed\n      if (stripTrailingSlashes) {\n        url = url.replace(/\\/+$/, '') || '/';\n      }\n\n      //Replace collapsed `/.` if found in the last URL path segment before\n      //the query, e.g. `http://url.com/id./format?q=x` becomes\n      //`http://url.com/id.format?q=x`\n      return url.replace(/\\/\\.(?=\\w+($|\\?))/, '.').replace(/\\/\\\\\\./, '/.');\n    }\n\n    /**\n     * Parse URL\n     */\n    function parseUrl(url, params, urlParams, stripTrailingSlashes) {\n\n      //Replace escaped \\:\n      url = url.replace(/\\\\:/g, ':');\n\n      //Loop the valid URL params now\n      angular.forEach(urlParams, function (t, urlParam) {\n\n        //Extract value for this url param from given params\n        var val = params.hasOwnProperty(urlParam) ? params[urlParam] : null;\n        var regex = void 0;\n\n        //If defined and not null, encode it and replace in URL\n        if (angular.isDefined(val) && val !== null) {\n          (function () {\n            var encodedVal = $url.encodeUriSegment(val);\n            regex = new RegExp(':' + urlParam + '(\\\\W|$)', 'g');\n            url = url.replace(regex, function (match, tail) {\n              return encodedVal + tail;\n            });\n          })();\n        }\n\n        //Otherwise, remove from URL\n        else {\n            regex = new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g');\n            url = url.replace(regex, function (match, leadingSlashes, tail) {\n              if (tail.charAt(0) === '/') {\n                return tail;\n              } else {\n                return leadingSlashes + tail;\n              }\n            });\n          }\n      });\n\n      //Return cleaned up URL\n      return cleanUpUrl(url, stripTrailingSlashes);\n    }\n\n    /**\n     * Create request config\n     */\n    function createRequestConfig(action, params, data, config) {\n\n      //Initialize\n      var request = {};\n      var stripConfigKeys = ['params', 'model', 'isArray', 'isModel', 'successInterceptor', 'errorInterceptor', 'stripTrailingSlashes'];\n\n      //Map action config to http request config\n      angular.forEach(action, function (value, key) {\n        if (stripConfigKeys.indexOf(key) === -1) {\n          request[key] = angular.copy(value);\n        }\n      });\n\n      //Attach given extra config\n      if (config && angular.isObject(config)) {\n        angular.forEach(config, function (value, key) {\n          request[key] = angular.copy(value);\n        });\n      }\n\n      //Append data if we have a body\n      if (action.hasBody() && data && angular.isObject(data)) {\n        if (angular.isFunction(data.toJSON)) {\n          request.data = data.toJSON();\n        } else if (angular.isArray(data)) {\n          request.data = data;\n        } else {\n          request.data = angular.extend({}, data);\n        }\n      }\n\n      //Ensure we don't overwrite the params objects keys in place\n      params = angular.copy(params);\n\n      //Process params\n      if (params && angular.isObject(params)) {\n        for (var key in params) {\n          if (params.hasOwnProperty(key) && angular.isObject(params[key])) {\n            if (angular.isFunction(params[key].toJSON)) {\n              params[key] = params[key].toJSON();\n            }\n          }\n        }\n      }\n\n      //Combine params out of given params and data and find URL params\n      params = combineParams(action.params, params, data);\n      var urlParams = findUrlParams(request.url);\n\n      //Parse URL\n      request.url = parseUrl(action.url, params, urlParams, action.stripTrailingSlashes);\n\n      //Set remaining given non-url params as query params,\n      //delegate param encoding to $http\n      angular.forEach(params, function (value, key) {\n        if (!urlParams[key]) {\n          request.params = request.params || {};\n          request.params[key] = value;\n        }\n      });\n\n      //Return\n      return request;\n    }\n\n    /**\n     * Api request executer\n     */\n    return function ApiRequest(action, params, data, config) {\n\n      //Parameter juggling\n      if (action.hasBody() && params && !data) {\n        data = params;\n        params = null;\n      }\n\n      //Create request config and use $http to do the request\n      //and intercept the response\n      var request = createRequestConfig(action, params, data, config);\n      var promise = $http(request).then(action.successInterceptor.bind(action), action.errorInterceptor.bind(action));\n\n      //Then handle the raw data\n      return promise.then(function (raw) {\n        if (action.expectsModel()) {\n          return action.convertToModel(raw);\n        }\n        return raw;\n      });\n    };\n  }]);\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Action.Service', [\n  'Url.Service',\n])\n\n/**\n * Factory definition\n */\n.factory('$apiAction', function $apiAction($q, $injector, $log, $url) {\n\n  /**\n   * Return validated model class\n   */\n  function validatedModel(model) {\n\n    //No model?\n    if (!model) {\n      return null;\n    }\n\n    //Validate\n    if (!$injector.has(model)) {\n      if (model !== '$baseModel') {\n        $log.warn('Unknown model class/service:', model);\n      }\n      return null;\n    }\n\n    //Return model\n    return model;\n  }\n\n  /**\n   * Constructor\n   */\n  function ApiAction(action, endpoint) {\n\n    //Set vars\n    angular.extend(this, action);\n\n    //Set full action url, model and method\n    this.url = $url.concat(endpoint.url, this.url || '');\n    this.model = this.model || endpoint.model || false;\n    this.method = this.method || 'GET';\n    this.enforceDataFormat = endpoint.enforceDataFormat || false;\n\n    //Determine params\n    if (typeof this.params === 'undefined') {\n      this.params = endpoint.params;\n    }\n\n    //Normalize\n    this.params = this.params || {};\n\n    //Validate model\n    this.model = validatedModel(this.model);\n  }\n\n  /**\n   * Has body check\n   */\n  ApiAction.prototype.hasBody = function() {\n    return /^(POST|PUT|PATCH)$/i.test(this.method);\n  };\n\n  /**\n   * Expects array check\n   */\n  ApiAction.prototype.expectsArray = function() {\n    return Boolean(this.isArray);\n  };\n\n  /**\n   * Expects model check\n   */\n  ApiAction.prototype.expectsModel = function() {\n    return (this.model && Boolean(this.isModel));\n  };\n\n  /**\n   * Convert raw response data to a model\n   */\n  ApiAction.prototype.convertToModel = function(data) {\n\n    //Array given?\n    if (angular.isArray(data)) {\n      return data.map(data => this.convertToModel(data));\n    }\n\n    //Get model class and return model instance\n    let Model = $injector.get(this.model);\n    return new Model(data);\n  };\n\n  /**\n   * Default success response interceptor\n   */\n  ApiAction.prototype.successInterceptor = function(response) {\n\n    //Check if we expect an array\n    let expectsArray = this.expectsArray();\n    let isArray = angular.isArray(response.data);\n\n    //Validate data type\n    if (isArray !== expectsArray) {\n\n      //Issue warning\n      $log.warn(\n        'Expected', expectsArray ? 'array' : 'object',\n        'as response, got', isArray ? 'array' : (typeof response.data)\n      );\n\n      //Enforce data format?\n      if (this.enforceDataFormat) {\n        response.data = (expectsArray ? [] : {});\n      }\n    }\n\n    //Initialize if empty\n    return response.data || (expectsArray ? [] : {});\n  };\n\n  /**\n   * Default error response interceptor\n   */\n  ApiAction.prototype.errorInterceptor = function(response) {\n    return $q.reject(response);\n  };\n\n  //Return factory function\n  return function(action, endpoint) {\n    return new ApiAction(action, endpoint);\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Service', [\n  'Api.Endpoint.Service',\n])\n\n/**\n * Provider definition\n */\n.provider('$api', function $apiProvider() {\n\n  //Defaults\n  this.defaults = {\n    verbose: false,\n    enforceDataFormat: false,\n    baseUrl: '/',\n    actions: {\n      query: {\n        method: 'GET',\n        isArray: true,\n        isModel: true,\n      },\n      get: {\n        method: 'GET',\n        isModel: true,\n      },\n      create: {\n        method: 'POST',\n      },\n      update: {\n        method: 'PUT',\n      },\n      delete: {\n        method: 'DELETE',\n      },\n    },\n    params: {\n      id: '@id',\n    },\n    model: '',\n    stripTrailingSlashes: true,\n  };\n\n  //Registered endpoints\n  this.endpoints = {};\n\n  /**\n   * Set verbose\n   */\n  this.setVerbose = function(verbose) {\n    this.defaults.verbose = !!verbose;\n    return this;\n  };\n\n  /**\n   * Set base URL\n   */\n  this.setBaseUrl = function(url) {\n    //TODO: the replacement is protecting port numbers from later becoming\n    //removed on account of the request service url parsing thinking it's a\n    //parameter. The code there should be updated to prevent port replacement,\n    //rather than \"protecting\" it in this manner here.\n    this.defaults.baseUrl = url.replace(/:([0-9]+)/, '\\\\:$1');\n    return this;\n  };\n\n  /**\n   * Set data format enforcing\n   */\n  this.setEnforceDataFormat = function(enforce) {\n    this.defaults.enforceDataFormat = !!enforce;\n    return this;\n  };\n\n  /**\n   * Set default actions\n   */\n  this.setDefaultActions = function(actions) {\n    this.defaults.actions = actions || {};\n    return this;\n  };\n\n  /**\n   * Set default params\n   */\n  this.setDefaultParams = function(params) {\n    this.defaults.params = params || {};\n    return this;\n  };\n\n  /**\n   * Set default model\n   */\n  this.setDefaultModel = function(model) {\n    this.defaults.model = model || false;\n    return this;\n  };\n\n  /**\n   * Set a generic config parameter (use only for config params that you\n   * want to pass on to the $http service)\n   */\n  this.setConfig = function(param, value) {\n    this.defaults[param] = value;\n    return this;\n  };\n\n  /**\n   * Strip trailing slashes behaviour\n   */\n  this.stripTrailingSlashes = function(strip) {\n    this.defaults.stripTrailingSlashes = !!strip;\n    return this;\n  };\n\n  /**\n   * Register endpoint\n   */\n  this.registerEndpoint = function(name, config) {\n    if (name) {\n      this.endpoints[name] = config || {};\n    }\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = function($log, $apiEndpoint) {\n\n    //Initialize API interface\n    let Api = function(endpoint) {\n      return this[endpoint];\n    };\n\n    //Append all endpoints\n    angular.forEach(this.endpoints, (config, name) => {\n\n      //Warn if overwriting\n      if (Api[name]) {\n        $log.warn('API endpoint', name, 'is being overwritten.');\n      }\n\n      //Extend endpoint config with defaults\n      config = angular.extend({}, this.defaults, config);\n      if (config.verbose) {\n        $log.info('API endpoint', name + ':', config);\n      }\n\n      //Initialize endpoint\n      Api[name] = $apiEndpoint(name, config);\n    });\n\n    //Return\n    return Api;\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('BaseModel.Service', [])\n\n/**\n * Model definition\n */\n.factory('$baseModel', function($window, $log, $injector) {\n\n  //See if we have the moment service available to us\n  let moment;\n  if ($injector.has('moment')) {\n    moment = $injector.get('moment');\n  }\n  else if (typeof $window.moment !== 'undefined') {\n    moment = $window.moment;\n  }\n\n  /**\n   * Check if given string is a ISO 8601 date string,\n   * Returns a moment if it is and null if it's not\n   */\n  function dateStringToMoment(value) {\n    let regex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2}).*/;\n    if (value.match(regex)) {\n      let date = moment(value, moment.ISO_8601, true);\n      if (date.isValid()) {\n        return date;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Copy a property\n   */\n  function copyProperty(obj, key) {\n    if (angular.isArray(obj[key])) {\n      let arr = obj[key];\n      return arr.map((value, key) => copyProperty(arr, key));\n    }\n    if (obj[key] && angular.isFunction(obj[key].clone)) {\n      return obj[key].clone();\n    }\n    return angular.copy(obj[key]);\n  }\n\n  /**\n   * Constructor\n   */\n  function $baseModel(data, parent) {\n\n    //Define parent property\n    let _parent = parent;\n    Object.defineProperty(this, '$parent', {\n      enumerable: false,\n      get() {\n        return _parent;\n      },\n      set(parent) {\n        _parent = parent;\n      },\n    });\n\n    //Load data\n    this.fromJSON(data);\n  }\n\n  /**************************************************************************\n   * Helper methods\n   ***/\n\n  /**\n   * Convert a property to a model\n   */\n  $baseModel.prototype.convertToModel = function(\n    key, Model, isArray\n  ) {\n\n    //Paremeter shuffling\n    if (typeof Model === 'boolean') {\n      isArray = Model;\n      Model = null;\n    }\n\n    //If undefined, check what we were expecting\n    if (typeof this[key] === 'undefined') {\n      if (isArray) {\n        this[key] = [];\n      }\n      else {\n        this[key] = null;\n      }\n    }\n\n    //If no model specified or if empty, we're done\n    if (!Model || !this[key]) {\n      return;\n    }\n\n    //String specified, use injector\n    if (typeof Model === 'string') {\n      if (!$injector.has(Model)) {\n        return $log.warn(\n          'Unknown model', Model, 'specified for sub model conversion'\n        );\n      }\n      Model = $injector.get(Model);\n    }\n\n    //Get model class and initiate\n    if (angular.isArray(this[key])) {\n      this[key] = this[key].map(data => new Model(data, this));\n    }\n    else if (angular.isString(this[key]) && $baseModel.isId(this[key])) {\n      this[key] = new Model({id: this[key]}, this);\n    }\n    else {\n      this[key] = new Model(this[key], this);\n    }\n  };\n\n  /**\n   * From JSON converter\n   */\n  $baseModel.prototype.fromJSON = function(json) {\n    if (angular.isObject(json)) {\n      angular.forEach(json, (value, key) => {\n        this[key] = $baseModel.valueFromJSON(value);\n      }, this);\n    }\n    return this;\n  };\n\n  /**\n   * To JSON converter\n   */\n  $baseModel.prototype.toJSON = function(data) {\n    let json = {};\n    if (data && angular.isObject(data)) {\n      angular.forEach(data, (value, key) => {\n        json[key] = $baseModel.valueToJSON(value);\n      });\n    }\n    angular.forEach(this, (value, key) => {\n      if (!json.hasOwnProperty(key)) {\n        json[key] = $baseModel.valueToJSON(value);\n      }\n    });\n    return json;\n  };\n\n  /**\n   * Extract a subset of data from the model\n   */\n  $baseModel.prototype.extract = function(properties) {\n\n    //If string given, just return copy of one property\n    if (typeof properties === 'string') {\n      return copyProperty(this, properties);\n    }\n\n    //Initialize object\n    let obj = {};\n\n    //No properties given? Iterate all object properties\n    if (!angular.isArray(properties) || !properties.length) {\n      angular.forEach(this, (value, key) => {\n        if (key.substr(0, 2) !== '$$') {\n          obj[key] = copyProperty(this, key);\n        }\n      });\n    }\n    else {\n      angular.forEach(properties, key => {\n        obj[key] = copyProperty(this, key);\n      });\n    }\n\n    //Return resulting object\n    return obj;\n  };\n\n  /**\n   * Merge a set of data into the model\n   */\n  $baseModel.prototype.merge = function(data) {\n    if (data && angular.isObject(data)) {\n      angular.forEach(data, (value, key) => {\n        this[key] = copyProperty(data, key);\n      });\n    }\n  };\n\n  /**\n   * Clear own properties\n   */\n  $baseModel.prototype.clear = function() {\n    for (let key in this) {\n      if (this.hasOwnProperty(key)) {\n        delete this[key];\n      }\n    }\n  };\n\n  /**\n   * Clone\n   */\n  $baseModel.prototype.clone = function(stripId) {\n    let ModelClass = this.constructor;\n    let clone = new ModelClass(this.extract(), this.$parent);\n    if (stripId) {\n      delete clone.id;\n    }\n    return clone;\n  };\n\n  /**\n   * Check if two models are the same (based on ID)\n   */\n  $baseModel.prototype.isSame = function(model) {\n    if (!angular.isObject(model)) {\n      return (this.id === model);\n    }\n    return (this.id && model.id && this.id === model.id);\n  };\n\n  /**\n   * Copy a property\n   */\n  $baseModel.prototype.copyProperty = function(obj, key) {\n    if (this[key] && angular.isFunction(this[key].clone)) {\n      obj[key] = this[key].clone();\n    }\n    else {\n      obj[key] = angular.copy(this[key]);\n    }\n  };\n\n  /**\n   * Set parent\n   */\n  $baseModel.prototype.setParent = function(parent) {\n    this.$parent = parent;\n  };\n\n  /**************************************************************************\n   * Static methods\n   ***/\n\n  /**\n   * Helper to convert a value from JSON\n   */\n  $baseModel.valueFromJSON = function(value) {\n    if (angular.isArray(value)) {\n      return value.map($baseModel.valueFromJSON);\n    }\n    else if (moment && angular.isString(value)) {\n      let date = dateStringToMoment(value);\n      return date || value;\n    }\n    else if (value && angular.isObject(value)) {\n      if (value._isAMomentObject) {\n        return value.clone();\n      }\n      let copy = {};\n      for (let prop in value) {\n        if (value.hasOwnProperty(prop)) {\n          copy[prop] = $baseModel.valueFromJSON(value[prop]);\n        }\n      }\n      return copy;\n    }\n    return value;\n  };\n\n  /**\n  * Helper to convert a value to JSON\n  */\n  $baseModel.valueToJSON = function(value) {\n    if (angular.isArray(value)) {\n      return value.map($baseModel.valueToJSON);\n    }\n    else if (value && angular.isObject(value)) {\n      if (angular.isFunction(value.toJSON)) {\n        return value.toJSON();\n      }\n      let copy = {};\n      for (let prop in value) {\n        if (value.hasOwnProperty(prop) && prop.substr(0, 2) !== '$$') {\n          copy[prop] = $baseModel.valueToJSON(value[prop]);\n        }\n      }\n      return copy;\n    }\n    return value;\n  };\n\n  /**\n   * Strip object to only ID\n   */\n  $baseModel.onlyId = function(obj) {\n    if (angular.isArray(obj)) {\n      return obj.map($baseModel.onlyId);\n    }\n    if (!obj || typeof obj !== 'object' || !obj.id) {\n      return obj;\n    }\n    return obj.id;\n  };\n\n  /**\n   * Strip a given object to specific keys\n   */\n  $baseModel.strip = function(obj, ...keys) {\n    if (angular.isArray(obj)) {\n      return obj.map(obj => $baseModel.strip(obj, ...keys));\n    }\n    if (!obj || typeof obj !== 'object') {\n      return obj;\n    }\n    angular.forEach(obj, (value, key) => {\n      if (!keys.includes(key)) {\n        delete obj[key];\n      }\n    });\n    return obj;\n  };\n\n  /**\n   * Strip ID's recursively from a given object\n   */\n  $baseModel.stripIds = function(obj) {\n    if (angular.isArray(obj)) {\n      return obj.map(obj => $baseModel.stripIds(obj));\n    }\n    if (!obj || typeof obj !== 'object') {\n      return obj;\n    }\n    if (typeof obj.id !== 'undefined') {\n      delete obj.id;\n    }\n    angular.forEach(obj, value => {\n      if (value && typeof value === 'object') {\n        $baseModel.stripIds(value);\n      }\n    });\n    return obj;\n  };\n\n  /**\n   * Test for MongoDB object ID\n   */\n  $baseModel.isId = function(str) {\n    return str.match(/^[a-f\\d]{24}$/i);\n  };\n\n  //Return\n  return $baseModel;\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Endpoint.Service', [\n  'Api.Action.Service',\n  'Api.Request.Service',\n  'Url.Service',\n])\n\n/**\n * Factory definition\n */\n.factory('$apiEndpoint', function $apiEndpoint($url, $apiAction, $apiRequest) {\n\n  /**\n   * Constructor\n   */\n  function ApiEndpoint(name, config) {\n\n    //Determine full URL of endpoint\n    config.actions = config.actions || {};\n    config.url = $url.concat(\n      config.baseUrl, config.url || $url.concat(name, ':id')\n    );\n\n    //Expose config and actions container\n    this.$config = config;\n    this.$actions = {};\n\n    //Create action instances and bind request method to action key on endpoint\n    angular.forEach(config.actions, (action, key) => {\n      this.$actions[key] = $apiAction(action || {}, config);\n      this[key] = angular.bind(this, $apiRequest, this.$actions[key]);\n    });\n  }\n\n  //Return factory function\n  return function(name, config) {\n    return new ApiEndpoint(name, config);\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Request.Service', [\n  'Url.Service',\n])\n\n/**\n * Factory definition\n */\n.factory('$apiRequest', function $apiRequest($http, $url) {\n\n  /**\n   * Check if dotted path is valid\n   */\n  function isValidDottedPath(path) {\n    return (\n      path && path !== 'hasOwnProperty' &&\n      /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test('.' + path)\n    );\n  }\n\n  /**\n   * Lookup dotted path in an object\n   */\n  function lookupDottedPath(obj, path) {\n\n    //Check if valid\n    if (!isValidDottedPath(path)) {\n      throw new Error('Invalid dotted path:' + path);\n    }\n\n    //Split path in object keys to traverse\n    let keys = path.split('.');\n    for (let i = 0; i < keys.length && obj !== undefined; i++) {\n      let key = keys[i];\n      obj = (obj !== null) ? obj[key] : undefined;\n    }\n\n    //Return reference\n    return obj;\n  }\n\n  /**\n   * Combine given params with extracted params from data\n   */\n  function combineParams(actionParams, givenParams, data) {\n\n    //Extract data params from action params\n    let extractedParams = {};\n    angular.forEach(actionParams || {}, (value, key) => {\n\n      //Function? Call now\n      if (angular.isFunction(value)) {\n        value = value();\n      }\n\n      //String value with @ identifier? Look up in data\n      if (angular.isString(value) && value.charAt(0) === '@') {\n        value = lookupDottedPath(data, value.substr(1));\n      }\n\n      //Set value\n      extractedParams[key] = value;\n    });\n\n    //Extend with given params\n    return angular.extend(extractedParams, givenParams || {});\n  }\n\n  /**\n   * Find URL params\n   */\n  function findUrlParams(url) {\n    let urlParams = {};\n    angular.forEach(url.split(/\\W/), param => {\n\n      //Filter hasOwnProperty\n      if (param === 'hasOwnProperty') {\n        throw new Error('Invalid parameter name: hasOwnProperty');\n      }\n\n      //Find all valid url params (have value, non digit)\n      if (param && !(/^\\\\d+$/.test(param))) {\n        if (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url)) {\n          urlParams[param] = true;\n        }\n      }\n    });\n    return urlParams;\n  }\n\n  /**\n   * Clean up URL\n   */\n  function cleanUpUrl(url, stripTrailingSlashes) {\n\n    //Strip trailing slashes if needed\n    if (stripTrailingSlashes) {\n      url = url.replace(/\\/+$/, '') || '/';\n    }\n\n    //Replace collapsed `/.` if found in the last URL path segment before\n    //the query, e.g. `http://url.com/id./format?q=x` becomes\n    //`http://url.com/id.format?q=x`\n    return url\n      .replace(/\\/\\.(?=\\w+($|\\?))/, '.')\n      .replace(/\\/\\\\\\./, '/.');\n  }\n\n  /**\n   * Parse URL\n   */\n  function parseUrl(url, params, urlParams, stripTrailingSlashes) {\n\n    //Replace escaped \\:\n    url = url.replace(/\\\\:/g, ':');\n\n    //Loop the valid URL params now\n    angular.forEach(urlParams, (t, urlParam) => {\n\n      //Extract value for this url param from given params\n      let val = params.hasOwnProperty(urlParam) ? params[urlParam] : null;\n      let regex;\n\n      //If defined and not null, encode it and replace in URL\n      if (angular.isDefined(val) && val !== null) {\n        let encodedVal = $url.encodeUriSegment(val);\n        regex = new RegExp(':' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, (match, tail) => {\n          return encodedVal + tail;\n        });\n      }\n\n      //Otherwise, remove from URL\n      else {\n        regex = new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, (match, leadingSlashes, tail) => {\n          if (tail.charAt(0) === '/') {\n            return tail;\n          }\n          else {\n            return leadingSlashes + tail;\n          }\n        });\n      }\n    });\n\n    //Return cleaned up URL\n    return cleanUpUrl(url, stripTrailingSlashes);\n  }\n\n  /**\n   * Create request config\n   */\n  function createRequestConfig(action, params, data, config) {\n\n    //Initialize\n    let request = {};\n    let stripConfigKeys = [\n      'params', 'model', 'isArray', 'isModel',\n      'successInterceptor', 'errorInterceptor',\n      'stripTrailingSlashes',\n    ];\n\n    //Map action config to http request config\n    angular.forEach(action, (value, key) => {\n      if (stripConfigKeys.indexOf(key) === -1) {\n        request[key] = angular.copy(value);\n      }\n    });\n\n    //Attach given extra config\n    if (config && angular.isObject(config)) {\n      angular.forEach(config, (value, key) => {\n        request[key] = angular.copy(value);\n      });\n    }\n\n    //Append data if we have a body\n    if (action.hasBody() && data && angular.isObject(data)) {\n      if (angular.isFunction(data.toJSON)) {\n        request.data = data.toJSON();\n      }\n      else if (angular.isArray(data)) {\n        request.data = data;\n      }\n      else {\n        request.data = angular.extend({}, data);\n      }\n    }\n\n    //Ensure we don't overwrite the params objects keys in place\n    params = angular.copy(params);\n\n    //Process params\n    if (params && angular.isObject(params)) {\n      for (let key in params) {\n        if (params.hasOwnProperty(key) && angular.isObject(params[key])) {\n          if (angular.isFunction(params[key].toJSON)) {\n            params[key] = params[key].toJSON();\n          }\n        }\n      }\n    }\n\n    //Combine params out of given params and data and find URL params\n    params = combineParams(action.params, params, data);\n    let urlParams = findUrlParams(request.url);\n\n    //Parse URL\n    request.url = parseUrl(\n      action.url, params, urlParams, action.stripTrailingSlashes);\n\n    //Set remaining given non-url params as query params,\n    //delegate param encoding to $http\n    angular.forEach(params, (value, key) => {\n      if (!urlParams[key]) {\n        request.params = request.params || {};\n        request.params[key] = value;\n      }\n    });\n\n    //Return\n    return request;\n  }\n\n  /**\n   * Api request executer\n   */\n  return function ApiRequest(action, params, data, config) {\n\n    //Parameter juggling\n    if (action.hasBody() && params && !data) {\n      data = params;\n      params = null;\n    }\n\n    //Create request config and use $http to do the request\n    //and intercept the response\n    let request = createRequestConfig(action, params, data, config);\n    let promise = $http(request).then(\n      action.successInterceptor.bind(action),\n      action.errorInterceptor.bind(action)\n    );\n\n    //Then handle the raw data\n    return promise.then(raw => {\n      if (action.expectsModel()) {\n        return action.convertToModel(raw);\n      }\n      return raw;\n    });\n  };\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}