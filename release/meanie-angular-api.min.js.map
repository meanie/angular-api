{"version":3,"sources":["action.service.js","api.service.js","baseModel.service.js","endpoint.service.js","request.service.js","meanie-angular-api.min.js"],"names":["window","angular","undefined","module","factory","$q","$injector","$log","$url","validatedModel","model","has","warn","ApiAction","action","endpoint","extend","this","url","concat","params","method","enforceDataFormat","prototype","hasBody","test","expectsArray","isArray","expectsModel","isModel","convertToModel","data","map","bind","Model","get","successInterceptor","response","errorInterceptor","reject","provider","defaults","verbose","baseUrl","actions","query","create","update","delete","id","stripTrailingSlashes","endpoints","setVerbose","setBaseUrl","replace","setEnforceDataFormat","enforce","setDefaultActions","setDefaultParams","setDefaultModel","strip","registerEndpoint","name","config","$get","$apiEndpoint","Api","forEach","info","$window","dateStringToMoment","value","regex","match","date","moment","ISO_8601","isValid","$baseModel","fromJSON","json","isObject","key","valueFromJSON","toJSON","valueToJSON","hasOwnProperty","extract","properties","obj","subset","length","indexOf","copy","merge","clear","clone","ModelClass","constructor","isString","isFunction","prop","onlyId","$apiAction","$apiRequest","ApiEndpoint","$config","$actions","$http","isValidDottedPath","path","lookupDottedPath","Error","keys","split","i","combineParams","actionParams","givenParams","extractedParams","charAt","substr","findUrlParams","urlParams","param","RegExp","cleanUpUrl","parseUrl","t","urlParam","val","isDefined","encodedVal","encodeUriSegment","tail","leadingSlashes","createRequestConfig","request","stripConfigKeys","toJson","toObject","console","promise","then","raw"],"mappings":"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","file":"meanie-angular-api.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Action.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiAction', ['$q', '$injector', '$log', '$url', function $apiAction($q, $injector, $log, $url) {\n\n  /**\n   * Return validated model class\n   */\n  function validatedModel(model) {\n\n    //No model?\n    if (!model) {\n      return null;\n    }\n\n    //Validate\n    if (!$injector.has(model)) {\n      $log.warn('Unknown model class/service:', model);\n      return null;\n    }\n\n    //Return model\n    return model;\n  }\n\n  /**\n   * Constructor\n   */\n  function ApiAction(action, endpoint) {\n\n    //Set vars\n    angular.extend(this, action);\n\n    //Set full action url, model and method\n    this.url = $url.concat(endpoint.url, this.url || '');\n    this.model = this.model || endpoint.model || false;\n    this.params = this.params || endpoint.params || {};\n    this.method = this.method || 'GET';\n    this.enforceDataFormat = endpoint.enforceDataFormat || false;\n\n    //Validate model\n    this.model = validatedModel(this.model);\n  }\n\n  /**\n   * Has body check\n   */\n  ApiAction.prototype.hasBody = function() {\n    return /^(POST|PUT|PATCH)$/i.test(this.method);\n  };\n\n  /**\n   * Expects array check\n   */\n  ApiAction.prototype.expectsArray = function() {\n    return !!this.isArray;\n  };\n\n  /**\n   * Expects model check\n   */\n  ApiAction.prototype.expectsModel = function() {\n    return (this.model && !!this.isModel);\n  };\n\n  /**\n   * Convert raw response data to a model\n   */\n  ApiAction.prototype.convertToModel = function(data) {\n\n    //Array given?\n    if (angular.isArray(data)) {\n      return data.map(this.convertToModel.bind(this));\n    }\n\n    //Get model class and return model instance\n    var Model = $injector.get(this.model);\n    return new Model(data);\n  };\n\n  /**\n   * Default success response interceptor\n   */\n  ApiAction.prototype.successInterceptor = function(response) {\n\n    //Check if we expect an array\n    var expectsArray = this.expectsArray();\n    var isArray = angular.isArray(response.data);\n\n    //Validate data type\n    if (isArray !== expectsArray) {\n\n      //Issue warning\n      $log.warn(\n        'Expected', expectsArray ? 'array' : 'object',\n        'as response, got', isArray ? 'array' : (typeof response.data)\n      );\n\n      //Enforce data format?\n      if (this.enforceDataFormat) {\n        response.data = (expectsArray ? [] : {});\n      }\n    }\n\n    //Initialize if empty\n    return response.data || (expectsArray ? [] : {});\n  };\n\n  /**\n   * Default error response interceptor\n   */\n  ApiAction.prototype.errorInterceptor = function(response) {\n    return $q.reject(response);\n  };\n\n  //Return factory function\n  return function(action, endpoint) {\n    return new ApiAction(action, endpoint);\n  };\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Service', [\n  'Api.Endpoint.Service'\n])\n\n/**\n * Provider definition\n */\n.provider('$api', function $apiProvider() {\n\n  //Defaults\n  this.defaults = {\n    verbose: false,\n    enforceDataFormat: false,\n    baseUrl: '/',\n    actions: {\n      query: {\n        method: 'GET',\n        isArray: true,\n        isModel: true\n      },\n      get: {\n        method: 'GET',\n        isModel: true\n      },\n      create: {\n        method: 'POST'\n      },\n      update: {\n        method: 'PUT'\n      },\n      delete: {\n        method: 'DELETE'\n      }\n    },\n    params: {\n      id: '@id'\n    },\n    model: '',\n    stripTrailingSlashes: true\n  };\n\n  //Registered endpoints\n  this.endpoints = {};\n\n  /**\n   * Set verbose\n   */\n  this.setVerbose = function(verbose) {\n    this.defaults.verbose = !!verbose;\n    return this;\n  };\n\n  /**\n   * Set base URL\n   */\n  this.setBaseUrl = function(url) {\n    //TODO: the replacement is protecting port numbers from later becoming\n    //removed on account of the request service url parsing thinking it's a\n    //parameter. The code there should be updated to prevent port replacement,\n    //rather than \"protecting\" it in this manner here.\n    this.defaults.baseUrl = url.replace(/:([0-9]+)/, '\\\\:$1');\n    return this;\n  };\n\n  /**\n   * Set data format enforcing\n   */\n  this.setEnforceDataFormat = function(enforce) {\n    this.defaults.enforceDataFormat = !!enforce;\n    return this;\n  };\n\n  /**\n   * Set default actions\n   */\n  this.setDefaultActions = function(actions) {\n    this.defaults.actions = actions || {};\n    return this;\n  };\n\n  /**\n   * Set default params\n   */\n  this.setDefaultParams = function(params) {\n    this.defaults.params = params || {};\n    return this;\n  };\n\n  /**\n   * Set default model\n   */\n  this.setDefaultModel = function(model) {\n    this.defaults.model = model || false;\n    return this;\n  };\n\n  /**\n   * Strip trailing slashes behaviour\n   */\n  this.stripTrailingSlashes = function(strip) {\n    this.defaults.stripTrailingSlashes = !!strip;\n    return this;\n  };\n\n  /**\n   * Register endpoint\n   */\n  this.registerEndpoint = function(name, config) {\n    if (name) {\n      this.endpoints[name] = config || {};\n    }\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$log', '$apiEndpoint', function($log, $apiEndpoint) {\n\n    //Initialize API interface\n    var Api = function(endpoint) {\n      return this[endpoint];\n    };\n\n    //Append all endpoints\n    angular.forEach(this.endpoints, function(config, name) {\n\n      //Warn if overwriting\n      if (Api[name]) {\n        $log.warn('API endpoint', name, 'is being overwritten.');\n      }\n\n      //Extend endpoint config with defaults\n      config = angular.extend({}, this.defaults, config);\n      if (config.verbose) {\n        $log.info('API endpoint', name + ':', config);\n      }\n\n      //Initialize endpoint\n      Api[name] = $apiEndpoint(name, config);\n    }, this);\n\n    //Return\n    return Api;\n  }];\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('BaseModel.Service', [])\n\n/**\n * Model definition\n */\n.factory('$baseModel', ['$window', '$injector', function($window, $injector) {\n\n  //See if we have the moment service available to us\n  var moment;\n  if ($injector.has('moment')) {\n    moment = $injector.get('moment');\n  }\n  else if (typeof $window.moment !== 'undefined') {\n    moment = $window.moment;\n  }\n\n  /**\n   * Check if given string is a ISO 8601 date string,\n   * Returns a moment if it is and null if it's not\n   */\n  function dateStringToMoment(value) {\n    var regex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2}).*/;\n    if (value.match(regex)) {\n      var date = moment(value, moment.ISO_8601, true);\n      if (date.isValid()) {\n        return date;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Constructor\n   */\n  function $baseModel(data) {\n    this.fromJSON(data);\n  }\n\n  /*****************************************************************************\n   * Instance methods\n   ***/\n\n  /**\n   * From JSON converter\n   */\n  $baseModel.prototype.fromJSON = function(json) {\n    if (angular.isObject(json)) {\n      angular.forEach(json, function(value, key) {\n        this[key] = $baseModel.valueFromJSON(value);\n      }, this);\n    }\n    return this;\n  };\n\n  /**\n   * To JSON converter\n   */\n  $baseModel.prototype.toJSON = function(data) {\n    var json = {};\n    if (data && angular.isObject(data)) {\n      angular.forEach(data, function(value, key) {\n        json[key] = $baseModel.valueToJSON(value);\n      });\n    }\n    angular.forEach(this, function(value, key) {\n      if (!json.hasOwnProperty(key)) {\n        json[key] = $baseModel.valueToJSON(value);\n      }\n    });\n    return json;\n  };\n\n  /**\n   * Extract a subset of data from the model\n   */\n  $baseModel.prototype.extract = function(properties) {\n    var obj = {};\n    var subset = (angular.isArray(properties) && properties.length);\n    angular.forEach(this, function(value, key) {\n      if (!subset || properties.indexOf(key) >= 0) {\n        obj[key] = angular.copy(value);\n      }\n    });\n    return obj;\n  };\n\n  /**\n   * Merge a set of data into the model\n   */\n  $baseModel.prototype.merge = function(data) {\n    if (data && angular.isObject(data)) {\n      angular.forEach(data, function(value, key) {\n        this[key] = angular.copy(value);\n      });\n    }\n  };\n\n  /**\n   * Clear own properties\n   */\n  $baseModel.prototype.clear = function() {\n    for (var key in this) {\n      if (this.hasOwnProperty(key)) {\n        delete this[key];\n      }\n    }\n  };\n\n  /**\n   * Clone\n   */\n  $baseModel.prototype.clone = function() {\n    var ModelClass = this.constructor;\n    return new ModelClass(this.extract());\n  };\n\n  /*****************************************************************************\n   * Static methods\n   ***/\n\n  /**\n   * Helper to convert a value from JSON\n   */\n  $baseModel.valueFromJSON = function(value) {\n    if (angular.isArray(value)) {\n      return value.map($baseModel.valueFromJSON);\n    }\n    else if (moment && angular.isString(value)) {\n      var date = dateStringToMoment(value);\n      return date || value;\n    }\n    return angular.copy(value);\n  };\n\n  /**\n  * Helper to convert a value to JSON\n  */\n  $baseModel.valueToJSON = function(value) {\n    if (angular.isArray(value)) {\n      return value.map($baseModel.valueToJSON);\n    }\n    else if (value && angular.isObject(value)) {\n      if (angular.isFunction(value.toJSON)) {\n        return value.toJSON();\n      }\n      var copy = {};\n      for (var prop in value) {\n        if (value.hasOwnProperty(prop)) {\n          copy[prop] = $baseModel.valueToJSON(value[prop]);\n        }\n      }\n      return copy;\n    }\n    return value;\n  };\n\n  /**\n   * Strip object to only ID\n   */\n  $baseModel.onlyId = function(obj) {\n    if (angular.isArray(obj)) {\n      return obj.map($baseModel.onlyId);\n    }\n    if (!obj || typeof obj !== 'object' || !obj.id) {\n      return obj;\n    }\n    return obj.id;\n  };\n\n  //Return\n  return $baseModel;\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Endpoint.Service', [\n  'Api.Action.Service',\n  'Api.Request.Service',\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiEndpoint', ['$url', '$apiAction', '$apiRequest', function $apiEndpoint($url, $apiAction, $apiRequest) {\n\n  /**\n   * Constructor\n   */\n  function ApiEndpoint(name, config) {\n\n    //Determine full URL of endpoint\n    config.url = $url.concat(config.baseUrl, config.url || $url.concat(name, ':id'));\n    config.actions = config.actions || {};\n\n    //Expose config and actions container\n    this.$config = config;\n    this.$actions = {};\n\n    //Create action instances and bind request method to action key on endpoint\n    angular.forEach(config.actions, function(action, key) {\n      this.$actions[key] = $apiAction(action || {}, config);\n      this[key] = angular.bind(this, $apiRequest, this.$actions[key]);\n    }, this);\n  }\n\n  //Return factory function\n  return function(name, config) {\n    return new ApiEndpoint(name, config);\n  };\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Request.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiRequest', ['$http', '$url', function $apiRequest($http, $url) {\n\n  /**\n   * Check if dotted path is valid\n   */\n  function isValidDottedPath(path) {\n    return (\n      path && path !== 'hasOwnProperty' && /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test('.' + path)\n    );\n  }\n\n  /**\n   * Lookup dotted path in an object\n   */\n  function lookupDottedPath(obj, path) {\n\n    //Check if valid\n    if (!isValidDottedPath(path)) {\n      throw new Error('Invalid dotted path:' + path);\n    }\n\n    //Split path in object keys to traverse\n    var keys = path.split('.');\n    for (var i = 0; i < keys.length && obj !== undefined; i++) {\n      var key = keys[i];\n      obj = (obj !== null) ? obj[key] : undefined;\n    }\n\n    //Return reference\n    return obj;\n  }\n\n  /**\n   * Combine given params with extracted params from data\n   */\n  function combineParams(actionParams, givenParams, data) {\n\n    //Extract data params from action params\n    var extractedParams = {};\n    angular.forEach(actionParams || {}, function(value, key) {\n\n      //Function? Call now\n      if (angular.isFunction(value)) {\n        value = value();\n      }\n\n      //String value with @ identifier? Look up in data\n      if (angular.isString(value) && value.charAt(0) === '@') {\n        value = lookupDottedPath(data, value.substr(1));\n      }\n\n      //Set value\n      extractedParams[key] = value;\n    });\n\n    //Extend with given params\n    return angular.extend(extractedParams, givenParams || {});\n  }\n\n  /**\n   * Find URL params\n   */\n  function findUrlParams(url) {\n    var urlParams = {};\n    angular.forEach(url.split(/\\W/), function(param) {\n\n      //Filter hasOwnProperty\n      if (param === 'hasOwnProperty') {\n        throw new Error('Invalid parameter name: hasOwnProperty');\n      }\n\n      //Find all valid url params (have value, non digit)\n      if (param && !(/^\\\\d+$/.test(param))) {\n        if (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url)) {\n          urlParams[param] = true;\n        }\n      }\n    });\n    return urlParams;\n  }\n\n  /**\n   * Clean up URL\n   */\n  function cleanUpUrl(url, stripTrailingSlashes) {\n\n    //Strip trailing slashes if needed\n    if (stripTrailingSlashes) {\n      url = url.replace(/\\/+$/, '') || '/';\n    }\n\n    //Replace collapsed `/.` if found in the last URL path segment before the query\n    //E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`\n    return url\n      .replace(/\\/\\.(?=\\w+($|\\?))/, '.')\n      .replace(/\\/\\\\\\./, '/.');\n  }\n\n  /**\n   * Parse URL\n   */\n  function parseUrl(url, params, urlParams, stripTrailingSlashes) {\n\n    //Replace escaped \\:\n    url = url.replace(/\\\\:/g, ':');\n\n    //Loop the valid URL params now\n    angular.forEach(urlParams, function(t, urlParam) {\n\n      //Extract value for this url param from given params\n      var val = params.hasOwnProperty(urlParam) ? params[urlParam] : null;\n      var regex;\n\n      //If defined and not null, encode it and replace in URL\n      if (angular.isDefined(val) && val !== null) {\n        var encodedVal = $url.encodeUriSegment(val);\n        regex = new RegExp(':' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, function(match, tail) {\n          return encodedVal + tail;\n        });\n      }\n\n      //Otherwise, remove from URL\n      else {\n        regex = new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, function(match, leadingSlashes, tail) {\n          if (tail.charAt(0) === '/') {\n            return tail;\n          }\n          else {\n            return leadingSlashes + tail;\n          }\n        });\n      }\n    });\n\n    //Return cleaned up URL\n    return cleanUpUrl(url, stripTrailingSlashes);\n  }\n\n  /**\n   * Create request config\n   */\n  function createRequestConfig(action, params, data) {\n\n    //Initialize\n    var request = {};\n    var stripConfigKeys = [\n      'params', 'model', 'isArray', 'stripTrailingSlashes',\n      'successInterceptor', 'errorInterceptor'\n    ];\n\n    //Map action config to http request config\n    angular.forEach(action, function(value, key) {\n      if (stripConfigKeys.indexOf(key) === -1) {\n        request[key] = angular.copy(value);\n      }\n    });\n\n    //Append data if we have a body\n    if (action.hasBody() && data && angular.isObject(data)) {\n\n      //If toJson method present, use that, otherwise convert to simple object\n      if (angular.isFunction(data.toJson)) {\n        request.data = data.toJson();\n      }\n      else if (angular.isFunction(data.toObject)) {\n        //TODO: remove altogether in next major release\n        console.warn(\n          'Using `toObject` for model to JSON conversion is deprecated.\\n',\n          'Please provide a `toJSON` method on your model instead.'\n        );\n        request.data = data.toObject();\n      }\n      else {\n        request.data = angular.extend({}, data);\n      }\n    }\n\n    //Combine params out of given params and data and find URL params\n    params = combineParams(action.params, params, data);\n    var urlParams = findUrlParams(request.url);\n\n    //Parse URL\n    request.url = parseUrl(action.url, params, urlParams, action.stripTrailingSlashes);\n\n    //Set remaining given non-url params as query params, delegate param encoding to $http\n    angular.forEach(params, function(value, key) {\n      if (!urlParams[key]) {\n        request.params = request.params || {};\n        request.params[key] = value;\n      }\n    });\n\n    //Return\n    return request;\n  }\n\n  /**\n   * Api request executer\n   */\n  return function ApiRequest(action, params, data) {\n\n    //Parameter juggling\n    if (action.hasBody() && params && !data) {\n      data = params;\n      params = null;\n    }\n\n    //Create request config and use $http to do the request and intercept the response\n    var request = createRequestConfig(action, params, data);\n    var promise = $http(request).then(\n      action.successInterceptor.bind(action),\n      action.errorInterceptor.bind(action)\n    );\n\n    //Then handle the raw data\n    return promise.then(function(raw) {\n      if (action.expectsModel()) {\n        return action.convertToModel(raw);\n      }\n      return raw;\n    });\n  };\n}]);\n\n})(window, window.angular);\n","/**\n * meanie-angular-api - v1.4.3 - 9-1-2016\n * https://github.com/meanie/angular-api\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Action.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiAction', ['$q', '$injector', '$log', '$url', function $apiAction($q, $injector, $log, $url) {\n\n  /**\n   * Return validated model class\n   */\n  function validatedModel(model) {\n\n    //No model?\n    if (!model) {\n      return null;\n    }\n\n    //Validate\n    if (!$injector.has(model)) {\n      $log.warn('Unknown model class/service:', model);\n      return null;\n    }\n\n    //Return model\n    return model;\n  }\n\n  /**\n   * Constructor\n   */\n  function ApiAction(action, endpoint) {\n\n    //Set vars\n    angular.extend(this, action);\n\n    //Set full action url, model and method\n    this.url = $url.concat(endpoint.url, this.url || '');\n    this.model = this.model || endpoint.model || false;\n    this.params = this.params || endpoint.params || {};\n    this.method = this.method || 'GET';\n    this.enforceDataFormat = endpoint.enforceDataFormat || false;\n\n    //Validate model\n    this.model = validatedModel(this.model);\n  }\n\n  /**\n   * Has body check\n   */\n  ApiAction.prototype.hasBody = function() {\n    return /^(POST|PUT|PATCH)$/i.test(this.method);\n  };\n\n  /**\n   * Expects array check\n   */\n  ApiAction.prototype.expectsArray = function() {\n    return !!this.isArray;\n  };\n\n  /**\n   * Expects model check\n   */\n  ApiAction.prototype.expectsModel = function() {\n    return (this.model && !!this.isModel);\n  };\n\n  /**\n   * Convert raw response data to a model\n   */\n  ApiAction.prototype.convertToModel = function(data) {\n\n    //Array given?\n    if (angular.isArray(data)) {\n      return data.map(this.convertToModel.bind(this));\n    }\n\n    //Get model class and return model instance\n    var Model = $injector.get(this.model);\n    return new Model(data);\n  };\n\n  /**\n   * Default success response interceptor\n   */\n  ApiAction.prototype.successInterceptor = function(response) {\n\n    //Check if we expect an array\n    var expectsArray = this.expectsArray();\n    var isArray = angular.isArray(response.data);\n\n    //Validate data type\n    if (isArray !== expectsArray) {\n\n      //Issue warning\n      $log.warn(\n        'Expected', expectsArray ? 'array' : 'object',\n        'as response, got', isArray ? 'array' : (typeof response.data)\n      );\n\n      //Enforce data format?\n      if (this.enforceDataFormat) {\n        response.data = (expectsArray ? [] : {});\n      }\n    }\n\n    //Initialize if empty\n    return response.data || (expectsArray ? [] : {});\n  };\n\n  /**\n   * Default error response interceptor\n   */\n  ApiAction.prototype.errorInterceptor = function(response) {\n    return $q.reject(response);\n  };\n\n  //Return factory function\n  return function(action, endpoint) {\n    return new ApiAction(action, endpoint);\n  };\n}]);\n\n})(window, window.angular);\n\n(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Service', [\n  'Api.Endpoint.Service'\n])\n\n/**\n * Provider definition\n */\n.provider('$api', function $apiProvider() {\n\n  //Defaults\n  this.defaults = {\n    verbose: false,\n    enforceDataFormat: false,\n    baseUrl: '/',\n    actions: {\n      query: {\n        method: 'GET',\n        isArray: true,\n        isModel: true\n      },\n      get: {\n        method: 'GET',\n        isModel: true\n      },\n      create: {\n        method: 'POST'\n      },\n      update: {\n        method: 'PUT'\n      },\n      delete: {\n        method: 'DELETE'\n      }\n    },\n    params: {\n      id: '@id'\n    },\n    model: '',\n    stripTrailingSlashes: true\n  };\n\n  //Registered endpoints\n  this.endpoints = {};\n\n  /**\n   * Set verbose\n   */\n  this.setVerbose = function(verbose) {\n    this.defaults.verbose = !!verbose;\n    return this;\n  };\n\n  /**\n   * Set base URL\n   */\n  this.setBaseUrl = function(url) {\n    //TODO: the replacement is protecting port numbers from later becoming\n    //removed on account of the request service url parsing thinking it's a\n    //parameter. The code there should be updated to prevent port replacement,\n    //rather than \"protecting\" it in this manner here.\n    this.defaults.baseUrl = url.replace(/:([0-9]+)/, '\\\\:$1');\n    return this;\n  };\n\n  /**\n   * Set data format enforcing\n   */\n  this.setEnforceDataFormat = function(enforce) {\n    this.defaults.enforceDataFormat = !!enforce;\n    return this;\n  };\n\n  /**\n   * Set default actions\n   */\n  this.setDefaultActions = function(actions) {\n    this.defaults.actions = actions || {};\n    return this;\n  };\n\n  /**\n   * Set default params\n   */\n  this.setDefaultParams = function(params) {\n    this.defaults.params = params || {};\n    return this;\n  };\n\n  /**\n   * Set default model\n   */\n  this.setDefaultModel = function(model) {\n    this.defaults.model = model || false;\n    return this;\n  };\n\n  /**\n   * Strip trailing slashes behaviour\n   */\n  this.stripTrailingSlashes = function(strip) {\n    this.defaults.stripTrailingSlashes = !!strip;\n    return this;\n  };\n\n  /**\n   * Register endpoint\n   */\n  this.registerEndpoint = function(name, config) {\n    if (name) {\n      this.endpoints[name] = config || {};\n    }\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$log', '$apiEndpoint', function($log, $apiEndpoint) {\n\n    //Initialize API interface\n    var Api = function(endpoint) {\n      return this[endpoint];\n    };\n\n    //Append all endpoints\n    angular.forEach(this.endpoints, function(config, name) {\n\n      //Warn if overwriting\n      if (Api[name]) {\n        $log.warn('API endpoint', name, 'is being overwritten.');\n      }\n\n      //Extend endpoint config with defaults\n      config = angular.extend({}, this.defaults, config);\n      if (config.verbose) {\n        $log.info('API endpoint', name + ':', config);\n      }\n\n      //Initialize endpoint\n      Api[name] = $apiEndpoint(name, config);\n    }, this);\n\n    //Return\n    return Api;\n  }];\n});\n\n})(window, window.angular);\n\n(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('BaseModel.Service', [])\n\n/**\n * Model definition\n */\n.factory('$baseModel', ['$window', '$injector', function($window, $injector) {\n\n  //See if we have the moment service available to us\n  var moment;\n  if ($injector.has('moment')) {\n    moment = $injector.get('moment');\n  }\n  else if (typeof $window.moment !== 'undefined') {\n    moment = $window.moment;\n  }\n\n  /**\n   * Check if given string is a ISO 8601 date string,\n   * Returns a moment if it is and null if it's not\n   */\n  function dateStringToMoment(value) {\n    var regex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2}).*/;\n    if (value.match(regex)) {\n      var date = moment(value, moment.ISO_8601, true);\n      if (date.isValid()) {\n        return date;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Constructor\n   */\n  function $baseModel(data) {\n    this.fromJSON(data);\n  }\n\n  /*****************************************************************************\n   * Instance methods\n   ***/\n\n  /**\n   * From JSON converter\n   */\n  $baseModel.prototype.fromJSON = function(json) {\n    if (angular.isObject(json)) {\n      angular.forEach(json, function(value, key) {\n        this[key] = $baseModel.valueFromJSON(value);\n      }, this);\n    }\n    return this;\n  };\n\n  /**\n   * To JSON converter\n   */\n  $baseModel.prototype.toJSON = function(data) {\n    var json = {};\n    if (data && angular.isObject(data)) {\n      angular.forEach(data, function(value, key) {\n        json[key] = $baseModel.valueToJSON(value);\n      });\n    }\n    angular.forEach(this, function(value, key) {\n      if (!json.hasOwnProperty(key)) {\n        json[key] = $baseModel.valueToJSON(value);\n      }\n    });\n    return json;\n  };\n\n  /**\n   * Extract a subset of data from the model\n   */\n  $baseModel.prototype.extract = function(properties) {\n    var obj = {};\n    var subset = (angular.isArray(properties) && properties.length);\n    angular.forEach(this, function(value, key) {\n      if (!subset || properties.indexOf(key) >= 0) {\n        obj[key] = angular.copy(value);\n      }\n    });\n    return obj;\n  };\n\n  /**\n   * Merge a set of data into the model\n   */\n  $baseModel.prototype.merge = function(data) {\n    if (data && angular.isObject(data)) {\n      angular.forEach(data, function(value, key) {\n        this[key] = angular.copy(value);\n      });\n    }\n  };\n\n  /**\n   * Clear own properties\n   */\n  $baseModel.prototype.clear = function() {\n    for (var key in this) {\n      if (this.hasOwnProperty(key)) {\n        delete this[key];\n      }\n    }\n  };\n\n  /**\n   * Clone\n   */\n  $baseModel.prototype.clone = function() {\n    var ModelClass = this.constructor;\n    return new ModelClass(this.extract());\n  };\n\n  /*****************************************************************************\n   * Static methods\n   ***/\n\n  /**\n   * Helper to convert a value from JSON\n   */\n  $baseModel.valueFromJSON = function(value) {\n    if (angular.isArray(value)) {\n      return value.map($baseModel.valueFromJSON);\n    }\n    else if (moment && angular.isString(value)) {\n      var date = dateStringToMoment(value);\n      return date || value;\n    }\n    return angular.copy(value);\n  };\n\n  /**\n  * Helper to convert a value to JSON\n  */\n  $baseModel.valueToJSON = function(value) {\n    if (angular.isArray(value)) {\n      return value.map($baseModel.valueToJSON);\n    }\n    else if (value && angular.isObject(value)) {\n      if (angular.isFunction(value.toJSON)) {\n        return value.toJSON();\n      }\n      var copy = {};\n      for (var prop in value) {\n        if (value.hasOwnProperty(prop)) {\n          copy[prop] = $baseModel.valueToJSON(value[prop]);\n        }\n      }\n      return copy;\n    }\n    return value;\n  };\n\n  /**\n   * Strip object to only ID\n   */\n  $baseModel.onlyId = function(obj) {\n    if (angular.isArray(obj)) {\n      return obj.map($baseModel.onlyId);\n    }\n    if (!obj || typeof obj !== 'object' || !obj.id) {\n      return obj;\n    }\n    return obj.id;\n  };\n\n  //Return\n  return $baseModel;\n}]);\n\n})(window, window.angular);\n\n(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Endpoint.Service', [\n  'Api.Action.Service',\n  'Api.Request.Service',\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiEndpoint', ['$url', '$apiAction', '$apiRequest', function $apiEndpoint($url, $apiAction, $apiRequest) {\n\n  /**\n   * Constructor\n   */\n  function ApiEndpoint(name, config) {\n\n    //Determine full URL of endpoint\n    config.url = $url.concat(config.baseUrl, config.url || $url.concat(name, ':id'));\n    config.actions = config.actions || {};\n\n    //Expose config and actions container\n    this.$config = config;\n    this.$actions = {};\n\n    //Create action instances and bind request method to action key on endpoint\n    angular.forEach(config.actions, function(action, key) {\n      this.$actions[key] = $apiAction(action || {}, config);\n      this[key] = angular.bind(this, $apiRequest, this.$actions[key]);\n    }, this);\n  }\n\n  //Return factory function\n  return function(name, config) {\n    return new ApiEndpoint(name, config);\n  };\n}]);\n\n})(window, window.angular);\n\n(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Request.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiRequest', ['$http', '$url', function $apiRequest($http, $url) {\n\n  /**\n   * Check if dotted path is valid\n   */\n  function isValidDottedPath(path) {\n    return (\n      path && path !== 'hasOwnProperty' && /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test('.' + path)\n    );\n  }\n\n  /**\n   * Lookup dotted path in an object\n   */\n  function lookupDottedPath(obj, path) {\n\n    //Check if valid\n    if (!isValidDottedPath(path)) {\n      throw new Error('Invalid dotted path:' + path);\n    }\n\n    //Split path in object keys to traverse\n    var keys = path.split('.');\n    for (var i = 0; i < keys.length && obj !== undefined; i++) {\n      var key = keys[i];\n      obj = (obj !== null) ? obj[key] : undefined;\n    }\n\n    //Return reference\n    return obj;\n  }\n\n  /**\n   * Combine given params with extracted params from data\n   */\n  function combineParams(actionParams, givenParams, data) {\n\n    //Extract data params from action params\n    var extractedParams = {};\n    angular.forEach(actionParams || {}, function(value, key) {\n\n      //Function? Call now\n      if (angular.isFunction(value)) {\n        value = value();\n      }\n\n      //String value with @ identifier? Look up in data\n      if (angular.isString(value) && value.charAt(0) === '@') {\n        value = lookupDottedPath(data, value.substr(1));\n      }\n\n      //Set value\n      extractedParams[key] = value;\n    });\n\n    //Extend with given params\n    return angular.extend(extractedParams, givenParams || {});\n  }\n\n  /**\n   * Find URL params\n   */\n  function findUrlParams(url) {\n    var urlParams = {};\n    angular.forEach(url.split(/\\W/), function(param) {\n\n      //Filter hasOwnProperty\n      if (param === 'hasOwnProperty') {\n        throw new Error('Invalid parameter name: hasOwnProperty');\n      }\n\n      //Find all valid url params (have value, non digit)\n      if (param && !(/^\\\\d+$/.test(param))) {\n        if (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url)) {\n          urlParams[param] = true;\n        }\n      }\n    });\n    return urlParams;\n  }\n\n  /**\n   * Clean up URL\n   */\n  function cleanUpUrl(url, stripTrailingSlashes) {\n\n    //Strip trailing slashes if needed\n    if (stripTrailingSlashes) {\n      url = url.replace(/\\/+$/, '') || '/';\n    }\n\n    //Replace collapsed `/.` if found in the last URL path segment before the query\n    //E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`\n    return url\n      .replace(/\\/\\.(?=\\w+($|\\?))/, '.')\n      .replace(/\\/\\\\\\./, '/.');\n  }\n\n  /**\n   * Parse URL\n   */\n  function parseUrl(url, params, urlParams, stripTrailingSlashes) {\n\n    //Replace escaped \\:\n    url = url.replace(/\\\\:/g, ':');\n\n    //Loop the valid URL params now\n    angular.forEach(urlParams, function(t, urlParam) {\n\n      //Extract value for this url param from given params\n      var val = params.hasOwnProperty(urlParam) ? params[urlParam] : null;\n      var regex;\n\n      //If defined and not null, encode it and replace in URL\n      if (angular.isDefined(val) && val !== null) {\n        var encodedVal = $url.encodeUriSegment(val);\n        regex = new RegExp(':' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, function(match, tail) {\n          return encodedVal + tail;\n        });\n      }\n\n      //Otherwise, remove from URL\n      else {\n        regex = new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, function(match, leadingSlashes, tail) {\n          if (tail.charAt(0) === '/') {\n            return tail;\n          }\n          else {\n            return leadingSlashes + tail;\n          }\n        });\n      }\n    });\n\n    //Return cleaned up URL\n    return cleanUpUrl(url, stripTrailingSlashes);\n  }\n\n  /**\n   * Create request config\n   */\n  function createRequestConfig(action, params, data) {\n\n    //Initialize\n    var request = {};\n    var stripConfigKeys = [\n      'params', 'model', 'isArray', 'stripTrailingSlashes',\n      'successInterceptor', 'errorInterceptor'\n    ];\n\n    //Map action config to http request config\n    angular.forEach(action, function(value, key) {\n      if (stripConfigKeys.indexOf(key) === -1) {\n        request[key] = angular.copy(value);\n      }\n    });\n\n    //Append data if we have a body\n    if (action.hasBody() && data && angular.isObject(data)) {\n\n      //If toJson method present, use that, otherwise convert to simple object\n      if (angular.isFunction(data.toJson)) {\n        request.data = data.toJson();\n      }\n      else if (angular.isFunction(data.toObject)) {\n        //TODO: remove altogether in next major release\n        console.warn(\n          'Using `toObject` for model to JSON conversion is deprecated.\\n',\n          'Please provide a `toJSON` method on your model instead.'\n        );\n        request.data = data.toObject();\n      }\n      else {\n        request.data = angular.extend({}, data);\n      }\n    }\n\n    //Combine params out of given params and data and find URL params\n    params = combineParams(action.params, params, data);\n    var urlParams = findUrlParams(request.url);\n\n    //Parse URL\n    request.url = parseUrl(action.url, params, urlParams, action.stripTrailingSlashes);\n\n    //Set remaining given non-url params as query params, delegate param encoding to $http\n    angular.forEach(params, function(value, key) {\n      if (!urlParams[key]) {\n        request.params = request.params || {};\n        request.params[key] = value;\n      }\n    });\n\n    //Return\n    return request;\n  }\n\n  /**\n   * Api request executer\n   */\n  return function ApiRequest(action, params, data) {\n\n    //Parameter juggling\n    if (action.hasBody() && params && !data) {\n      data = params;\n      params = null;\n    }\n\n    //Create request config and use $http to do the request and intercept the response\n    var request = createRequestConfig(action, params, data);\n    var promise = $http(request).then(\n      action.successInterceptor.bind(action),\n      action.errorInterceptor.bind(action)\n    );\n\n    //Then handle the raw data\n    return promise.then(function(raw) {\n      if (action.expectsModel()) {\n        return action.convertToModel(raw);\n      }\n      return raw;\n    });\n  };\n}]);\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}