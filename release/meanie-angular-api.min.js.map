{"version":3,"sources":["action.service.js","api.model.js","api.service.js","duplicateRequestsFilter.js","endpoint.service.js","request.service.js","meanie-angular-api.min.js"],"names":["window","angular","undefined","module","factory","$q","$injector","$log","$url","validatedModel","model","has","warn","ApiAction","action","endpoint","extend","this","url","concat","params","method","prototype","hasBody","test","expectsArray","isArray","convertToModel","data","map","element","Model","get","successInterceptor","response","errorInterceptor","reject","ApiModel","fromObject","isObject","forEach","value","key","toObject","provider","defaults","verbose","baseUrl","actions","query","create","update","destroy","id","stripTrailingSlashes","endpoints","setVerbose","setBaseUrl","setDefaultActions","setDefaultParams","setDefaultModel","strip","registerEndpoint","name","config","$get","$apiEndpoint","Api","info","$provide","decorator","$delegate","hash","str","h","strlen","length","n","i","charCodeAt","getRequestIdentifier","toJson","pendingRequests","$http","$duplicateRequestsFilter","ignoreDuplicateRequest","identifier","rejectDuplicateRequest","headers","status","rejectDuplicateStatusCode","Object","keys","filter","$apiAction","$apiRequest","ApiEndpoint","$config","$actions","bind","isModel","isFunction","isValidDottedPath","path","lookupDottedPath","obj","Error","split","combineParams","actionParams","givenParams","extractedParams","isString","charAt","substr","findUrlParams","urlParams","param","RegExp","cleanUpUrl","replace","parseUrl","t","urlParam","regex","val","hasOwnProperty","isDefined","encodedVal","encodeUriSegment","match","tail","leadingSlashes","createRequestConfig","request","stripConfigKeys","indexOf","copy","expectsModel","promise","then","raw"],"mappings":"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","file":"meanie-angular-api.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Action.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiAction', ['$q', '$injector', '$log', '$url', function $apiAction($q, $injector, $log, $url) {\n\n  /**\n   * Return validated model class\n   */\n  function validatedModel(model) {\n\n    //No model?\n    if (!model) {\n      return null;\n    }\n\n    //Validate\n    if (!$injector.has(model)) {\n      $log.warn('Unknown model class/service:', model);\n      return null;\n    }\n\n    //Return model\n    return model;\n  }\n\n  /**\n   * Constructor\n   */\n  function ApiAction(action, endpoint) {\n\n    //Set vars\n    angular.extend(this, action);\n\n    //Set full action url, model and method\n    this.url = $url.concat(endpoint.url, this.url || '');\n    this.model = this.model || endpoint.model || false;\n    this.params = this.params || endpoint.params || {};\n    this.method = this.method || 'GET';\n\n    //Validate model\n    this.model = validatedModel(this.model);\n  }\n\n  /**\n   * Has body check\n   */\n  ApiAction.prototype.hasBody = function() {\n    return /^(POST|PUT|PATCH)$/i.test(this.method);\n  };\n\n  /**\n   * Expects array check\n   */\n  ApiAction.prototype.expectsArray = function() {\n    return !!this.isArray;\n  };\n\n  /**\n   * Convert raw response data to a model\n   */\n  ApiAction.prototype.convertToModel = function(data) {\n\n    //Array given?\n    if (angular.isArray(data)) {\n      return data.map(function(element) {\n        return this.convertToModel(element);\n      }, this);\n    }\n\n    //Instantiate new model\n    var Model = $injector.get(this.model);\n    return new Model(data);\n  };\n\n  /**\n   * Default success response interceptor\n   */\n  ApiAction.prototype.successInterceptor = function(response) {\n\n    //Check if we expect an array\n    var expectsArray = this.expectsArray();\n\n    //Validate data type\n    if (angular.isArray(response.data) !== expectsArray) {\n      $log.warn(\n        'Expected', expectsArray ? 'array' : 'object',\n        'as response, got', response.data\n      );\n    }\n\n    //Initialize if empty\n    return response.data || (expectsArray ? [] : {});\n  };\n\n  /**\n   * Default error response interceptor\n   */\n  ApiAction.prototype.errorInterceptor = function(response) {\n    return $q.reject(response);\n  };\n\n  //Return factory function\n  return function(action, endpoint) {\n    return new ApiAction(action, endpoint);\n  };\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Model', [])\n\n/**\n * Model definition\n */\n.factory('$apiModel', function $apiModel() {\n\n  /**\n   * Constructor\n   */\n  function ApiModel(data) {\n    this.fromObject(data);\n  }\n\n  /**\n   * From plain object converter\n   */\n  ApiModel.prototype.fromObject = function(data) {\n\n    //No data?\n    if (!angular.isObject(data)) {\n      return this;\n    }\n\n    //Load from JSON data\n    angular.forEach(data, function(value, key) {\n      this[key] = value;\n    }, this);\n\n    //Return self\n    return this;\n  };\n\n  /**\n   * To plain object converter\n   */\n  ApiModel.prototype.toObject = function() {\n\n    //Copy our properties onto a simple object\n    var data = angular.extend({}, this);\n    return data;\n  };\n\n  //Return\n  return ApiModel;\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Service', [\n  'Api.Endpoint.Service',\n  'Api.Model'\n])\n\n/**\n * Provider definition\n */\n.provider('$api', function $apiProvider() {\n\n  //Defaults\n  this.defaults = {\n    verbose: false,\n    baseUrl: '/',\n    actions: {\n      query: {\n        method: 'GET',\n        isArray: true\n      },\n      get: {\n        method: 'GET'\n      },\n      create: {\n        method: 'POST'\n      },\n      update: {\n        method: 'PUT'\n      },\n      destroy: {\n        method: 'DELETE'\n      }\n    },\n    params: {\n      id: '@id'\n    },\n    model: '$apiModel',\n    stripTrailingSlashes: true\n  };\n\n  //Registered endpoints\n  this.endpoints = {};\n\n  /**\n   * Set verbose\n   */\n  this.setVerbose = function(verbose) {\n    this.defaults.verbose = !!verbose;\n    return this;\n  };\n\n  /**\n   * Set base URL\n   */\n  this.setBaseUrl = function(url) {\n    this.defaults.baseUrl = url;\n    return this;\n  };\n\n  /**\n   * Set default actions\n   */\n  this.setDefaultActions = function(actions) {\n    this.defaults.actions = actions || {};\n    return this;\n  };\n\n  /**\n   * Set default params\n   */\n  this.setDefaultParams = function(params) {\n    this.defaults.params = params || {};\n    return this;\n  };\n\n  /**\n   * Set default model\n   */\n  this.setDefaultModel = function(model) {\n    this.defaults.model = model || false;\n    return this;\n  };\n\n  /**\n   * Strip trailing slashes behaviour\n   */\n  this.stripTrailingSlashes = function(strip) {\n    this.defaults.stripTrailingSlashes = !!strip;\n    return this;\n  };\n\n  /**\n   * Register endpoint\n   */\n  this.registerEndpoint = function(name, config) {\n    if (name) {\n      this.endpoints[name] = config || {};\n    }\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$injector', '$log', '$apiEndpoint', function($injector, $log, $apiEndpoint) {\n\n    //Initialize API interface\n    var Api = function(endpoint) {\n      return this[endpoint];\n    };\n\n    //Append all endpoints\n    angular.forEach(this.endpoints, function(config, name) {\n\n      //Warn if overwriting\n      if (Api[name]) {\n        $log.warn('API endpoint', name, 'is being overwritten.');\n      }\n\n      //Extend endpoint config with defaults and initialize it\n      config = angular.extend({}, this.defaults, config);\n      if (config.verbose) {\n        $log.info('API endpoint', name + ':', config);\n      }\n\n      //Initialize endpoint\n      Api[name] = $apiEndpoint(name, config);\n    }, this);\n\n    //Return\n    return Api;\n  }];\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.DuplicateRequestsFilter.Decorator', [])\n\n/**\n * Config\n */\n.config(['$provide', function($provide) {\n\n  /**\n   * Decorator for the $http service\n   */\n  $provide.decorator('$http', ['$delegate', '$q', function($delegate, $q) {\n\n    /**\n     * Pending requests and local $http var for natural reference\n     */\n    var pendingRequests = {};\n    var $http = $delegate;\n\n    /**\n     * Hash generator\n     */\n    function hash(str) {\n      var h = 0;\n      var strlen = str.length;\n      if (strlen === 0) {\n        return h;\n      }\n      for (var i = 0, n; i < strlen; ++i) {\n        n = str.charCodeAt(i);\n        h = ((h << 5) - h) + n;\n        h = h & h;\n      }\n      return h >>> 0;\n    }\n\n    /**\n     * Helper to generate a unique identifier for a request\n     */\n    function getRequestIdentifier(config) {\n      var str = config.method + config.url;\n      if (config.data && typeof config.data === 'object') {\n        str += angular.toJson(config.data);\n      }\n      return hash(str);\n    }\n\n    /**\n     * Modified $http service\n     */\n    var $duplicateRequestsFilter = function(config) {\n\n      //Ignore for this request?\n      if (config.ignoreDuplicateRequest) {\n        return $http(config);\n      }\n\n      //Get unique request identifier\n      var identifier = getRequestIdentifier(config);\n\n      //Check if such a request is pending already\n      if (pendingRequests[identifier]) {\n        if (config.rejectDuplicateRequest) {\n          return $q.reject({\n            data: '',\n            headers: {},\n            status: config.rejectDuplicateStatusCode || 400,\n            config: config\n          });\n        }\n        return pendingRequests[identifier];\n      }\n\n      //Create promise using $http and make sure it's reset when resolved\n      pendingRequests[identifier] = $http(config).finally(function() {\n        delete pendingRequests[identifier];\n      });\n\n      //Return promise\n      return pendingRequests[identifier];\n    };\n\n    //Map rest of methods\n    Object.keys($http).filter(function(key) {\n      return (typeof $http[key] === 'function');\n    }).forEach(function(key) {\n      $duplicateRequestsFilter[key] = $http[key];\n    });\n\n    //Return it\n    return $duplicateRequestsFilter;\n  }]);\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Endpoint.Service', [\n  'Api.Action.Service',\n  'Api.Request.Service',\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiEndpoint', ['$url', '$apiAction', '$apiRequest', function $apiEndpoint($url, $apiAction, $apiRequest) {\n\n  /**\n   * Constructor\n   */\n  function ApiEndpoint(name, config) {\n\n    //Determine full URL of endpoint\n    config.url = $url.concat(config.baseUrl, config.url || $url.concat(name, ':id'));\n    config.actions = config.actions || {};\n\n    //Expose config and actions container\n    this.$config = config;\n    this.$actions = {};\n\n    //Create action instances and bind request method to action key on endpoint\n    angular.forEach(config.actions, function(action, key) {\n      this.$actions[key] = $apiAction(action || {}, config);\n      this[key] = angular.bind(this, $apiRequest, this.$actions[key]);\n    }, this);\n  }\n\n  //Return factory function\n  return function(name, config) {\n    return new ApiEndpoint(name, config);\n  };\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Request.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiRequest', ['$http', '$url', function $apiRequest($http, $url) {\n\n  /**\n   * Check if a data object is a model\n   */\n  function isModel(data) {\n    return angular.isObject(data) && angular.isFunction(data.toObject);\n  }\n\n  /**\n   * Check if dotted path is valid\n   */\n  function isValidDottedPath(path) {\n    return (\n      path && path !== 'hasOwnProperty' && /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test('.' + path)\n    );\n  }\n\n  /**\n   * Lookup dotted path in an object\n   */\n  function lookupDottedPath(obj, path) {\n\n    //Check if valid\n    if (!isValidDottedPath(path)) {\n      throw new Error('Invalid dotted path:' + path);\n    }\n\n    //Split path in object keys to traverse\n    var keys = path.split('.');\n    for (var i = 0; i < keys.length && obj !== undefined; i++) {\n      var key = keys[i];\n      obj = (obj !== null) ? obj[key] : undefined;\n    }\n\n    //Return reference\n    return obj;\n  }\n\n  /**\n   * Combine given params with extracted params from data\n   */\n  function combineParams(actionParams, givenParams, data) {\n\n    //Extract data params from action params\n    var extractedParams = {};\n    angular.forEach(actionParams || {}, function(value, key) {\n\n      //Function? Call now\n      if (angular.isFunction(value)) {\n        value = value();\n      }\n\n      //String value with @ identifier? Look up in data\n      if (angular.isString(value) && value.charAt(0) === '@') {\n        value = lookupDottedPath(data, value.substr(1));\n      }\n\n      //Set value\n      extractedParams[key] = value;\n    });\n\n    //Extend with given params\n    return angular.extend(extractedParams, givenParams || {});\n  }\n\n  /**\n   * Find URL params\n   */\n  function findUrlParams(url) {\n    var urlParams = {};\n    angular.forEach(url.split(/\\W/), function(param) {\n\n      //Filter hasOwnProperty\n      if (param === 'hasOwnProperty') {\n        throw new Error('Invalid parameter name: hasOwnProperty');\n      }\n\n      //Find all valid url params (have value, non digit)\n      if (param && !(/^\\\\d+$/.test(param))) {\n        if (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url)) {\n          urlParams[param] = true;\n        }\n      }\n    });\n    return urlParams;\n  }\n\n  /**\n   * Clean up URL\n   */\n  function cleanUpUrl(url, stripTrailingSlashes) {\n\n    //Strip trailing slashes if needed\n    if (stripTrailingSlashes) {\n      url = url.replace(/\\/+$/, '') || '/';\n    }\n\n    //Replace collapsed `/.` if found in the last URL path segment before the query\n    //E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`\n    return url\n      .replace(/\\/\\.(?=\\w+($|\\?))/, '.')\n      .replace(/\\/\\\\\\./, '/.');\n  }\n\n  /**\n   * Parse URL\n   */\n  function parseUrl(url, params, urlParams, stripTrailingSlashes) {\n\n    //Replace escaped \\:\n    url = url.replace(/\\\\:/g, ':');\n\n    //Loop the valid URL params now\n    angular.forEach(urlParams, function(t, urlParam) {\n\n      //Extract value for this url param from given params\n      var val = params.hasOwnProperty(urlParam) ? params[urlParam] : null;\n      var regex;\n\n      //If defined and not null, encode it and replace in URL\n      if (angular.isDefined(val) && val !== null) {\n        var encodedVal = $url.encodeUriSegment(val);\n        regex = new RegExp(':' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, function(match, tail) {\n          return encodedVal + tail;\n        });\n      }\n\n      //Otherwise, remove from URL\n      else {\n        regex = new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, function(match, leadingSlashes, tail) {\n          if (tail.charAt(0) === '/') {\n            return tail;\n          }\n          else {\n            return leadingSlashes + tail;\n          }\n        });\n      }\n    });\n\n    //Return cleaned up URL\n    return cleanUpUrl(url, stripTrailingSlashes);\n  }\n\n  /**\n   * Create request config\n   */\n  function createRequestConfig(action, params, data) {\n\n    //Initialize\n    var request = {};\n    var stripConfigKeys = [\n      'params', 'model', 'isArray', 'stripTrailingSlashes',\n      'successInterceptor', 'errorInterceptor'\n    ];\n\n    //Map action config to http request config\n    angular.forEach(action, function(value, key) {\n      if (stripConfigKeys.indexOf(key) === -1) {\n        request[key] = angular.copy(value);\n      }\n    });\n\n    //Append data if we have a body\n    if (action.hasBody() && data) {\n      if (isModel(data)) {\n        data = data.toObject();\n      }\n      request.data = data;\n    }\n\n    //Combine params out of given params and data and find URL params\n    params = combineParams(action.params, params, data);\n    var urlParams = findUrlParams(request.url);\n\n    //Parse URL\n    request.url = parseUrl(action.url, params, urlParams, action.stripTrailingSlashes);\n\n    //Set remaining given non-url params as query params, delegate param encoding to $http\n    angular.forEach(params, function(value, key) {\n      if (!urlParams[key]) {\n        request.params = request.params || {};\n        request.params[key] = value;\n      }\n    });\n\n    //Return\n    return request;\n  }\n\n  /**\n   * Api request executer\n   */\n  return function ApiRequest(action, params, data) {\n\n    //Parameter juggling\n    if (action.hasBody() && params && !data) {\n      data = params;\n      params = null;\n    }\n\n    //Create request config\n    var request = createRequestConfig(action, params, data);\n    var expectsModel = action.model && /^(GET|POST|PUT|PATCH)$/i.test(action.method);\n\n    //Use $http to do the request and intercept the response\n    var promise = $http(request).then(\n      action.successInterceptor.bind(action),\n      action.errorInterceptor.bind(action)\n    );\n\n    //Then handle the raw data\n    return promise.then(function(raw) {\n      if (action.hasBody() && isModel(data)) {\n        return data.fromObject(raw);\n      }\n      else if (expectsModel) {\n        return action.convertToModel(raw);\n      }\n      return raw;\n    });\n  };\n}]);\n\n})(window, window.angular);\n","/**\n * meanie-angular-api - v0.5.0 - 31-6-2015\n * https://github.com/meanie/angular-api\n *\n * Copyright (c) 2015 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n!function(t,e,n){\"use strict\";e.module(\"Api.Action.Service\",[\"Url.Service\"]).factory(\"$apiAction\",[\"$q\",\"$injector\",\"$log\",\"$url\",function(t,n,r,i){function o(t){return t?n.has(t)?t:(r.warn(\"Unknown model class/service:\",t),null):null}function s(t,n){e.extend(this,t),this.url=i.concat(n.url,this.url||\"\"),this.model=this.model||n.model||!1,this.params=this.params||n.params||{},this.method=this.method||\"GET\",this.model=o(this.model)}return s.prototype.hasBody=function(){return/^(POST|PUT|PATCH)$/i.test(this.method)},s.prototype.expectsArray=function(){return!!this.isArray},s.prototype.convertToModel=function(t){if(e.isArray(t))return t.map(function(t){return this.convertToModel(t)},this);var r=n.get(this.model);return new r(t)},s.prototype.successInterceptor=function(t){var n=this.expectsArray();return e.isArray(t.data)!==n&&r.warn(\"Expected\",n?\"array\":\"object\",\"as response, got\",t.data),t.data||(n?[]:{})},s.prototype.errorInterceptor=function(e){return t.reject(e)},function(t,e){return new s(t,e)}}])}(window,window.angular),function(t,e,n){\"use strict\";e.module(\"Api.Model\",[]).factory(\"$apiModel\",function(){function t(t){this.fromObject(t)}return t.prototype.fromObject=function(t){return e.isObject(t)?(e.forEach(t,function(t,e){this[e]=t},this),this):this},t.prototype.toObject=function(){var t=e.extend({},this);return t},t})}(window,window.angular),function(t,e,n){\"use strict\";e.module(\"Api.Service\",[\"Api.Endpoint.Service\",\"Api.Model\"]).provider(\"$api\",function(){this.defaults={verbose:!1,baseUrl:\"/\",actions:{query:{method:\"GET\",isArray:!0},get:{method:\"GET\"},create:{method:\"POST\"},update:{method:\"PUT\"},destroy:{method:\"DELETE\"}},params:{id:\"@id\"},model:\"$apiModel\",stripTrailingSlashes:!0},this.endpoints={},this.setVerbose=function(t){return this.defaults.verbose=!!t,this},this.setBaseUrl=function(t){return this.defaults.baseUrl=t,this},this.setDefaultActions=function(t){return this.defaults.actions=t||{},this},this.setDefaultParams=function(t){return this.defaults.params=t||{},this},this.setDefaultModel=function(t){return this.defaults.model=t||!1,this},this.stripTrailingSlashes=function(t){return this.defaults.stripTrailingSlashes=!!t,this},this.registerEndpoint=function(t,e){return t&&(this.endpoints[t]=e||{}),this},this.$get=[\"$injector\",\"$log\",\"$apiEndpoint\",function(t,n,r){var i=function(t){return this[t]};return e.forEach(this.endpoints,function(t,o){i[o]&&n.warn(\"API endpoint\",o,\"is being overwritten.\"),t=e.extend({},this.defaults,t),t.verbose&&n.info(\"API endpoint\",o+\":\",t),i[o]=r(o,t)},this),i}]})}(window,window.angular),function(t,e,n){\"use strict\";e.module(\"Api.DuplicateRequestsFilter.Decorator\",[]).config([\"$provide\",function(t){t.decorator(\"$http\",[\"$delegate\",\"$q\",function(t,n){function r(t){var e=0,n=t.length;if(0===n)return e;for(var r,i=0;n>i;++i)r=t.charCodeAt(i),e=(e<<5)-e+r,e&=e;return e>>>0}function i(t){var n=t.method+t.url;return t.data&&\"object\"==typeof t.data&&(n+=e.toJson(t.data)),r(n)}var o={},s=t,a=function(t){if(t.ignoreDuplicateRequest)return s(t);var e=i(t);return o[e]?t.rejectDuplicateRequest?n.reject({data:\"\",headers:{},status:t.rejectDuplicateStatusCode||400,config:t}):o[e]:(o[e]=s(t)[\"finally\"](function(){delete o[e]}),o[e])};return Object.keys(s).filter(function(t){return\"function\"==typeof s[t]}).forEach(function(t){a[t]=s[t]}),a}])}])}(window,window.angular),function(t,e,n){\"use strict\";e.module(\"Api.Endpoint.Service\",[\"Api.Action.Service\",\"Api.Request.Service\",\"Url.Service\"]).factory(\"$apiEndpoint\",[\"$url\",\"$apiAction\",\"$apiRequest\",function(t,n,r){function i(i,o){o.url=t.concat(o.baseUrl,o.url||t.concat(i,\":id\")),o.actions=o.actions||{},this.$config=o,this.$actions={},e.forEach(o.actions,function(t,i){this.$actions[i]=n(t||{},o),this[i]=e.bind(this,r,this.$actions[i])},this)}return function(t,e){return new i(t,e)}}])}(window,window.angular),function(t,e,n){\"use strict\";e.module(\"Api.Request.Service\",[\"Url.Service\"]).factory(\"$apiRequest\",[\"$http\",\"$url\",function(t,r){function i(t){return e.isObject(t)&&e.isFunction(t.toObject)}function o(t){return t&&\"hasOwnProperty\"!==t&&/^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test(\".\"+t)}function s(t,e){if(!o(e))throw new Error(\"Invalid dotted path:\"+e);for(var r=e.split(\".\"),i=0;i<r.length&&t!==n;i++){var s=r[i];t=null!==t?t[s]:n}return t}function a(t,n,r){var i={};return e.forEach(t||{},function(t,n){e.isFunction(t)&&(t=t()),e.isString(t)&&\"@\"===t.charAt(0)&&(t=s(r,t.substr(1))),i[n]=t}),e.extend(i,n||{})}function u(t){var n={};return e.forEach(t.split(/\\W/),function(e){if(\"hasOwnProperty\"===e)throw new Error(\"Invalid parameter name: hasOwnProperty\");e&&!/^\\\\d+$/.test(e)&&new RegExp(\"(^|[^\\\\\\\\]):\"+e+\"(\\\\W|$)\").test(t)&&(n[e]=!0)}),n}function c(t,e){return e&&(t=t.replace(/\\/+$/,\"\")||\"/\"),t.replace(/\\/\\.(?=\\w+($|\\?))/,\".\").replace(/\\/\\\\\\./,\"/.\")}function l(t,n,i,o){return t=t.replace(/\\\\:/g,\":\"),e.forEach(i,function(i,o){var s,a=n.hasOwnProperty(o)?n[o]:null;if(e.isDefined(a)&&null!==a){var u=r.encodeUriSegment(a);s=new RegExp(\":\"+o+\"(\\\\W|$)\",\"g\"),t=t.replace(s,function(t,e){return u+e})}else s=new RegExp(\"(/?):\"+o+\"(\\\\W|$)\",\"g\"),t=t.replace(s,function(t,e,n){return\"/\"===n.charAt(0)?n:e+n})}),c(t,o)}function f(t,n,r){var o={},s=[\"params\",\"model\",\"isArray\",\"stripTrailingSlashes\",\"successInterceptor\",\"errorInterceptor\"];e.forEach(t,function(t,n){-1===s.indexOf(n)&&(o[n]=e.copy(t))}),t.hasBody()&&r&&(i(r)&&(r=r.toObject()),o.data=r),n=a(t.params,n,r);var c=u(o.url);return o.url=l(t.url,n,c,t.stripTrailingSlashes),e.forEach(n,function(t,e){c[e]||(o.params=o.params||{},o.params[e]=t)}),o}return function(e,n,r){e.hasBody()&&n&&!r&&(r=n,n=null);var o=f(e,n,r),s=e.model&&/^(GET|POST|PUT|PATCH)$/i.test(e.method),a=t(o).then(e.successInterceptor.bind(e),e.errorInterceptor.bind(e));return a.then(function(t){return e.hasBody()&&i(r)?r.fromObject(t):s?e.convertToModel(t):t})}}])}(window,window.angular);\n//# sourceMappingURL=meanie-angular-api.min.js.map"],"sourceRoot":"/source/"}