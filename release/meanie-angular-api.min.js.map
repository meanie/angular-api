{"version":3,"sources":["meanie-angular-api.min.js","action.service.js","api.service.js","baseModel.service.js","endpoint.service.js","request.service.js"],"names":["_typeof","Symbol","iterator","obj","constructor","window","angular","undefined","module","factory","$q","$injector","$log","$url","validatedModel","model","has","warn","ApiAction","action","endpoint","extend","this","url","concat","params","method","enforceDataFormat","prototype","hasBody","test","expectsArray","isArray","expectsModel","isModel","convertToModel","data","map","bind","Model","get","successInterceptor","response","errorInterceptor","reject","provider","defaults","verbose","baseUrl","actions","query","create","update","delete","id","stripTrailingSlashes","endpoints","setVerbose","setBaseUrl","replace","setEnforceDataFormat","enforce","setDefaultActions","setDefaultParams","setDefaultModel","strip","registerEndpoint","name","config","$get","$apiEndpoint","Api","forEach","info","$window","dateStringToMoment","value","regex","match","date","moment","ISO_8601","isValid","$baseModel","fromJSON","parseProperty","key","json","_this","isObject","valueFromJSON","toJSON","valueToJSON","hasOwnProperty","extract","properties","subset","length","indexOf","copy","merge","_this2","clear","clone","ModelClass","isString","isFunction","prop","onlyId","$apiAction","$apiRequest","ApiEndpoint","$config","$actions","$http","isValidDottedPath","path","lookupDottedPath","Error","keys","split","i","combineParams","actionParams","givenParams","extractedParams","charAt","substr","findUrlParams","urlParams","param","RegExp","cleanUpUrl","parseUrl","t","urlParam","val","isDefined","encodedVal","encodeUriSegment","tail","leadingSlashes","createRequestConfig","request","stripConfigKeys","toJson","toObject","console","promise","then","raw"],"mappings":"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","file":"meanie-angular-api.min.js","sourcesContent":["/**\n * meanie-angular-api - v1.5.0 - 12-1-2016\n * https://github.com/meanie/angular-api\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Action.Service', ['Url.Service'])\n\n  /**\n   * Factory definition\n   */\n  .factory('$apiAction', ['$q', '$injector', '$log', '$url', function $apiAction($q, $injector, $log, $url) {\n\n    /**\n     * Return validated model class\n     */\n    function validatedModel(model) {\n\n      //No model?\n      if (!model) {\n        return null;\n      }\n\n      //Validate\n      if (!$injector.has(model)) {\n        $log.warn('Unknown model class/service:', model);\n        return null;\n      }\n\n      //Return model\n      return model;\n    }\n\n    /**\n     * Constructor\n     */\n    function ApiAction(action, endpoint) {\n\n      //Set vars\n      angular.extend(this, action);\n\n      //Set full action url, model and method\n      this.url = $url.concat(endpoint.url, this.url || '');\n      this.model = this.model || endpoint.model || false;\n      this.params = this.params || endpoint.params || {};\n      this.method = this.method || 'GET';\n      this.enforceDataFormat = endpoint.enforceDataFormat || false;\n\n      //Validate model\n      this.model = validatedModel(this.model);\n    }\n\n    /**\n     * Has body check\n     */\n    ApiAction.prototype.hasBody = function () {\n      return (/^(POST|PUT|PATCH)$/i.test(this.method)\n      );\n    };\n\n    /**\n     * Expects array check\n     */\n    ApiAction.prototype.expectsArray = function () {\n      return !!this.isArray;\n    };\n\n    /**\n     * Expects model check\n     */\n    ApiAction.prototype.expectsModel = function () {\n      return this.model && !!this.isModel;\n    };\n\n    /**\n     * Convert raw response data to a model\n     */\n    ApiAction.prototype.convertToModel = function (data) {\n\n      //Array given?\n      if (angular.isArray(data)) {\n        return data.map(this.convertToModel.bind(this));\n      }\n\n      //Get model class and return model instance\n      var Model = $injector.get(this.model);\n      return new Model(data);\n    };\n\n    /**\n     * Default success response interceptor\n     */\n    ApiAction.prototype.successInterceptor = function (response) {\n\n      //Check if we expect an array\n      var expectsArray = this.expectsArray();\n      var isArray = angular.isArray(response.data);\n\n      //Validate data type\n      if (isArray !== expectsArray) {\n\n        //Issue warning\n        $log.warn('Expected', expectsArray ? 'array' : 'object', 'as response, got', isArray ? 'array' : _typeof(response.data));\n\n        //Enforce data format?\n        if (this.enforceDataFormat) {\n          response.data = expectsArray ? [] : {};\n        }\n      }\n\n      //Initialize if empty\n      return response.data || (expectsArray ? [] : {});\n    };\n\n    /**\n     * Default error response interceptor\n     */\n    ApiAction.prototype.errorInterceptor = function (response) {\n      return $q.reject(response);\n    };\n\n    //Return factory function\n    return function (action, endpoint) {\n      return new ApiAction(action, endpoint);\n    };\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Service', ['Api.Endpoint.Service'])\n\n  /**\n   * Provider definition\n   */\n  .provider('$api', function $apiProvider() {\n\n    //Defaults\n    this.defaults = {\n      verbose: false,\n      enforceDataFormat: false,\n      baseUrl: '/',\n      actions: {\n        query: {\n          method: 'GET',\n          isArray: true,\n          isModel: true\n        },\n        get: {\n          method: 'GET',\n          isModel: true\n        },\n        create: {\n          method: 'POST'\n        },\n        update: {\n          method: 'PUT'\n        },\n        delete: {\n          method: 'DELETE'\n        }\n      },\n      params: {\n        id: '@id'\n      },\n      model: '',\n      stripTrailingSlashes: true\n    };\n\n    //Registered endpoints\n    this.endpoints = {};\n\n    /**\n     * Set verbose\n     */\n    this.setVerbose = function (verbose) {\n      this.defaults.verbose = !!verbose;\n      return this;\n    };\n\n    /**\n     * Set base URL\n     */\n    this.setBaseUrl = function (url) {\n      //TODO: the replacement is protecting port numbers from later becoming\n      //removed on account of the request service url parsing thinking it's a\n      //parameter. The code there should be updated to prevent port replacement,\n      //rather than \"protecting\" it in this manner here.\n      this.defaults.baseUrl = url.replace(/:([0-9]+)/, '\\\\:$1');\n      return this;\n    };\n\n    /**\n     * Set data format enforcing\n     */\n    this.setEnforceDataFormat = function (enforce) {\n      this.defaults.enforceDataFormat = !!enforce;\n      return this;\n    };\n\n    /**\n     * Set default actions\n     */\n    this.setDefaultActions = function (actions) {\n      this.defaults.actions = actions || {};\n      return this;\n    };\n\n    /**\n     * Set default params\n     */\n    this.setDefaultParams = function (params) {\n      this.defaults.params = params || {};\n      return this;\n    };\n\n    /**\n     * Set default model\n     */\n    this.setDefaultModel = function (model) {\n      this.defaults.model = model || false;\n      return this;\n    };\n\n    /**\n     * Strip trailing slashes behaviour\n     */\n    this.stripTrailingSlashes = function (strip) {\n      this.defaults.stripTrailingSlashes = !!strip;\n      return this;\n    };\n\n    /**\n     * Register endpoint\n     */\n    this.registerEndpoint = function (name, config) {\n      if (name) {\n        this.endpoints[name] = config || {};\n      }\n      return this;\n    };\n\n    /**\n     * Service getter\n     */\n    this.$get = ['$log', '$apiEndpoint', function ($log, $apiEndpoint) {\n\n      //Initialize API interface\n      var Api = function Api(endpoint) {\n        return this[endpoint];\n      };\n\n      //Append all endpoints\n      angular.forEach(this.endpoints, function (config, name) {\n\n        //Warn if overwriting\n        if (Api[name]) {\n          $log.warn('API endpoint', name, 'is being overwritten.');\n        }\n\n        //Extend endpoint config with defaults\n        config = angular.extend({}, this.defaults, config);\n        if (config.verbose) {\n          $log.info('API endpoint', name + ':', config);\n        }\n\n        //Initialize endpoint\n        Api[name] = $apiEndpoint(name, config);\n      }, this);\n\n      //Return\n      return Api;\n    }];\n  });\n})(window, window.angular);\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('BaseModel.Service', [])\n\n  /**\n   * Model definition\n   */\n  .factory('$baseModel', ['$window', '$log', '$injector', function ($window, $log, $injector) {\n\n    //See if we have the moment service available to us\n    var moment = void 0;\n    if ($injector.has('moment')) {\n      moment = $injector.get('moment');\n    } else if (typeof $window.moment !== 'undefined') {\n      moment = $window.moment;\n    }\n\n    /**\n     * Check if given string is a ISO 8601 date string,\n     * Returns a moment if it is and null if it's not\n     */\n    function dateStringToMoment(value) {\n      var regex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2}).*/;\n      if (value.match(regex)) {\n        var date = moment(value, moment.ISO_8601, true);\n        if (date.isValid()) {\n          return date;\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Constructor\n     */\n    function $baseModel(data) {\n      this.fromJSON(data);\n    }\n\n    /**************************************************************************\n     * Helper methods\n     ***/\n\n    /**\n     * Parse a property\n     */\n    $baseModel.prototype.parseProperty = function (key, isArray, Model) {\n\n      //If undefined, check what we were expecting\n      if (typeof this[key] === 'undefined') {\n        if (isArray) {\n          this[key] = [];\n        } else {\n          this[key] = null;\n        }\n      }\n\n      //If no model specified, we're done\n      if (!Model) {\n        return;\n      }\n\n      //String specified, use injector\n      if (typeof Model === 'string') {\n        if (!$injector.has(Model)) {\n          return $log.warn('Unknown model', Model, 'specified for sub model conversion');\n        }\n        Model = $injector.get(Model);\n      }\n\n      //Get model class and initiate\n      if (angular.isArray(this[key])) {\n        this[key] = this[key].map(function (data) {\n          return new Model(data);\n        });\n      } else {\n        this[key] = new Model(this[key]);\n      }\n    };\n\n    /**\n     * From JSON converter\n     */\n    $baseModel.prototype.fromJSON = function (json) {\n      var _this = this;\n\n      if (angular.isObject(json)) {\n        angular.forEach(json, function (value, key) {\n          _this[key] = $baseModel.valueFromJSON(value);\n        }, this);\n      }\n      return this;\n    };\n\n    /**\n     * To JSON converter\n     */\n    $baseModel.prototype.toJSON = function (data) {\n      var json = {};\n      if (data && angular.isObject(data)) {\n        angular.forEach(data, function (value, key) {\n          json[key] = $baseModel.valueToJSON(value);\n        });\n      }\n      angular.forEach(this, function (value, key) {\n        if (!json.hasOwnProperty(key)) {\n          json[key] = $baseModel.valueToJSON(value);\n        }\n      });\n      return json;\n    };\n\n    /**\n     * Extract a subset of data from the model\n     */\n    $baseModel.prototype.extract = function (properties) {\n      var obj = {};\n      var subset = angular.isArray(properties) && properties.length;\n      angular.forEach(this, function (value, key) {\n        if (!subset || properties.indexOf(key) >= 0) {\n          obj[key] = angular.copy(value);\n        }\n      });\n      return obj;\n    };\n\n    /**\n     * Merge a set of data into the model\n     */\n    $baseModel.prototype.merge = function (data) {\n      var _this2 = this;\n\n      if (data && angular.isObject(data)) {\n        angular.forEach(data, function (value, key) {\n          _this2[key] = angular.copy(value);\n        });\n      }\n    };\n\n    /**\n     * Clear own properties\n     */\n    $baseModel.prototype.clear = function () {\n      for (var key in this) {\n        if (this.hasOwnProperty(key)) {\n          delete this[key];\n        }\n      }\n    };\n\n    /**\n     * Clone\n     */\n    $baseModel.prototype.clone = function () {\n      var ModelClass = this.constructor;\n      return new ModelClass(this.extract());\n    };\n\n    /**************************************************************************\n     * Static methods\n     ***/\n\n    /**\n     * Helper to convert a value from JSON\n     */\n    $baseModel.valueFromJSON = function (value) {\n      if (angular.isArray(value)) {\n        return value.map($baseModel.valueFromJSON);\n      } else if (moment && angular.isString(value)) {\n        var date = dateStringToMoment(value);\n        return date || value;\n      }\n      return angular.copy(value);\n    };\n\n    /**\n    * Helper to convert a value to JSON\n    */\n    $baseModel.valueToJSON = function (value) {\n      if (angular.isArray(value)) {\n        return value.map($baseModel.valueToJSON);\n      } else if (value && angular.isObject(value)) {\n        if (angular.isFunction(value.toJSON)) {\n          return value.toJSON();\n        }\n        var copy = {};\n        for (var prop in value) {\n          if (value.hasOwnProperty(prop)) {\n            copy[prop] = $baseModel.valueToJSON(value[prop]);\n          }\n        }\n        return copy;\n      }\n      return value;\n    };\n\n    /**\n     * Strip object to only ID\n     */\n    $baseModel.onlyId = function (obj) {\n      if (angular.isArray(obj)) {\n        return obj.map($baseModel.onlyId);\n      }\n      if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || !obj.id) {\n        return obj;\n      }\n      return obj.id;\n    };\n\n    //Return\n    return $baseModel;\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Endpoint.Service', ['Api.Action.Service', 'Api.Request.Service', 'Url.Service'])\n\n  /**\n   * Factory definition\n   */\n  .factory('$apiEndpoint', ['$url', '$apiAction', '$apiRequest', function $apiEndpoint($url, $apiAction, $apiRequest) {\n\n    /**\n     * Constructor\n     */\n    function ApiEndpoint(name, config) {\n\n      //Determine full URL of endpoint\n      config.url = $url.concat(config.baseUrl, config.url || $url.concat(name, ':id'));\n      config.actions = config.actions || {};\n\n      //Expose config and actions container\n      this.$config = config;\n      this.$actions = {};\n\n      //Create action instances and bind request method to action key on endpoint\n      angular.forEach(config.actions, function (action, key) {\n        this.$actions[key] = $apiAction(action || {}, config);\n        this[key] = angular.bind(this, $apiRequest, this.$actions[key]);\n      }, this);\n    }\n\n    //Return factory function\n    return function (name, config) {\n      return new ApiEndpoint(name, config);\n    };\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Request.Service', ['Url.Service'])\n\n  /**\n   * Factory definition\n   */\n  .factory('$apiRequest', ['$http', '$url', function $apiRequest($http, $url) {\n\n    /**\n     * Check if dotted path is valid\n     */\n    function isValidDottedPath(path) {\n      return path && path !== 'hasOwnProperty' && /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test('.' + path);\n    }\n\n    /**\n     * Lookup dotted path in an object\n     */\n    function lookupDottedPath(obj, path) {\n\n      //Check if valid\n      if (!isValidDottedPath(path)) {\n        throw new Error('Invalid dotted path:' + path);\n      }\n\n      //Split path in object keys to traverse\n      var keys = path.split('.');\n      for (var i = 0; i < keys.length && obj !== undefined; i++) {\n        var key = keys[i];\n        obj = obj !== null ? obj[key] : undefined;\n      }\n\n      //Return reference\n      return obj;\n    }\n\n    /**\n     * Combine given params with extracted params from data\n     */\n    function combineParams(actionParams, givenParams, data) {\n\n      //Extract data params from action params\n      var extractedParams = {};\n      angular.forEach(actionParams || {}, function (value, key) {\n\n        //Function? Call now\n        if (angular.isFunction(value)) {\n          value = value();\n        }\n\n        //String value with @ identifier? Look up in data\n        if (angular.isString(value) && value.charAt(0) === '@') {\n          value = lookupDottedPath(data, value.substr(1));\n        }\n\n        //Set value\n        extractedParams[key] = value;\n      });\n\n      //Extend with given params\n      return angular.extend(extractedParams, givenParams || {});\n    }\n\n    /**\n     * Find URL params\n     */\n    function findUrlParams(url) {\n      var urlParams = {};\n      angular.forEach(url.split(/\\W/), function (param) {\n\n        //Filter hasOwnProperty\n        if (param === 'hasOwnProperty') {\n          throw new Error('Invalid parameter name: hasOwnProperty');\n        }\n\n        //Find all valid url params (have value, non digit)\n        if (param && !/^\\\\d+$/.test(param)) {\n          if (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url)) {\n            urlParams[param] = true;\n          }\n        }\n      });\n      return urlParams;\n    }\n\n    /**\n     * Clean up URL\n     */\n    function cleanUpUrl(url, stripTrailingSlashes) {\n\n      //Strip trailing slashes if needed\n      if (stripTrailingSlashes) {\n        url = url.replace(/\\/+$/, '') || '/';\n      }\n\n      //Replace collapsed `/.` if found in the last URL path segment before the query\n      //E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`\n      return url.replace(/\\/\\.(?=\\w+($|\\?))/, '.').replace(/\\/\\\\\\./, '/.');\n    }\n\n    /**\n     * Parse URL\n     */\n    function parseUrl(url, params, urlParams, stripTrailingSlashes) {\n\n      //Replace escaped \\:\n      url = url.replace(/\\\\:/g, ':');\n\n      //Loop the valid URL params now\n      angular.forEach(urlParams, function (t, urlParam) {\n\n        //Extract value for this url param from given params\n        var val = params.hasOwnProperty(urlParam) ? params[urlParam] : null;\n        var regex;\n\n        //If defined and not null, encode it and replace in URL\n        if (angular.isDefined(val) && val !== null) {\n          var encodedVal = $url.encodeUriSegment(val);\n          regex = new RegExp(':' + urlParam + '(\\\\W|$)', 'g');\n          url = url.replace(regex, function (match, tail) {\n            return encodedVal + tail;\n          });\n        }\n\n        //Otherwise, remove from URL\n        else {\n            regex = new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g');\n            url = url.replace(regex, function (match, leadingSlashes, tail) {\n              if (tail.charAt(0) === '/') {\n                return tail;\n              } else {\n                return leadingSlashes + tail;\n              }\n            });\n          }\n      });\n\n      //Return cleaned up URL\n      return cleanUpUrl(url, stripTrailingSlashes);\n    }\n\n    /**\n     * Create request config\n     */\n    function createRequestConfig(action, params, data) {\n\n      //Initialize\n      var request = {};\n      var stripConfigKeys = ['params', 'model', 'isArray', 'stripTrailingSlashes', 'successInterceptor', 'errorInterceptor'];\n\n      //Map action config to http request config\n      angular.forEach(action, function (value, key) {\n        if (stripConfigKeys.indexOf(key) === -1) {\n          request[key] = angular.copy(value);\n        }\n      });\n\n      //Append data if we have a body\n      if (action.hasBody() && data && angular.isObject(data)) {\n\n        //If toJson method present, use that, otherwise convert to simple object\n        if (angular.isFunction(data.toJson)) {\n          request.data = data.toJson();\n        } else if (angular.isFunction(data.toObject)) {\n          //TODO: remove altogether in next major release\n          console.warn('Using `toObject` for model to JSON conversion is deprecated.\\n', 'Please provide a `toJSON` method on your model instead.');\n          request.data = data.toObject();\n        } else {\n          request.data = angular.extend({}, data);\n        }\n      }\n\n      //Combine params out of given params and data and find URL params\n      params = combineParams(action.params, params, data);\n      var urlParams = findUrlParams(request.url);\n\n      //Parse URL\n      request.url = parseUrl(action.url, params, urlParams, action.stripTrailingSlashes);\n\n      //Set remaining given non-url params as query params, delegate param encoding to $http\n      angular.forEach(params, function (value, key) {\n        if (!urlParams[key]) {\n          request.params = request.params || {};\n          request.params[key] = value;\n        }\n      });\n\n      //Return\n      return request;\n    }\n\n    /**\n     * Api request executer\n     */\n    return function ApiRequest(action, params, data) {\n\n      //Parameter juggling\n      if (action.hasBody() && params && !data) {\n        data = params;\n        params = null;\n      }\n\n      //Create request config and use $http to do the request and intercept the response\n      var request = createRequestConfig(action, params, data);\n      var promise = $http(request).then(action.successInterceptor.bind(action), action.errorInterceptor.bind(action));\n\n      //Then handle the raw data\n      return promise.then(function (raw) {\n        if (action.expectsModel()) {\n          return action.convertToModel(raw);\n        }\n        return raw;\n      });\n    };\n  }]);\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Action.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiAction', ['$q', '$injector', '$log', '$url', function $apiAction($q, $injector, $log, $url) {\n\n  /**\n   * Return validated model class\n   */\n  function validatedModel(model) {\n\n    //No model?\n    if (!model) {\n      return null;\n    }\n\n    //Validate\n    if (!$injector.has(model)) {\n      $log.warn('Unknown model class/service:', model);\n      return null;\n    }\n\n    //Return model\n    return model;\n  }\n\n  /**\n   * Constructor\n   */\n  function ApiAction(action, endpoint) {\n\n    //Set vars\n    angular.extend(this, action);\n\n    //Set full action url, model and method\n    this.url = $url.concat(endpoint.url, this.url || '');\n    this.model = this.model || endpoint.model || false;\n    this.params = this.params || endpoint.params || {};\n    this.method = this.method || 'GET';\n    this.enforceDataFormat = endpoint.enforceDataFormat || false;\n\n    //Validate model\n    this.model = validatedModel(this.model);\n  }\n\n  /**\n   * Has body check\n   */\n  ApiAction.prototype.hasBody = function() {\n    return /^(POST|PUT|PATCH)$/i.test(this.method);\n  };\n\n  /**\n   * Expects array check\n   */\n  ApiAction.prototype.expectsArray = function() {\n    return !!this.isArray;\n  };\n\n  /**\n   * Expects model check\n   */\n  ApiAction.prototype.expectsModel = function() {\n    return (this.model && !!this.isModel);\n  };\n\n  /**\n   * Convert raw response data to a model\n   */\n  ApiAction.prototype.convertToModel = function(data) {\n\n    //Array given?\n    if (angular.isArray(data)) {\n      return data.map(this.convertToModel.bind(this));\n    }\n\n    //Get model class and return model instance\n    var Model = $injector.get(this.model);\n    return new Model(data);\n  };\n\n  /**\n   * Default success response interceptor\n   */\n  ApiAction.prototype.successInterceptor = function(response) {\n\n    //Check if we expect an array\n    var expectsArray = this.expectsArray();\n    var isArray = angular.isArray(response.data);\n\n    //Validate data type\n    if (isArray !== expectsArray) {\n\n      //Issue warning\n      $log.warn(\n        'Expected', expectsArray ? 'array' : 'object',\n        'as response, got', isArray ? 'array' : (typeof response.data)\n      );\n\n      //Enforce data format?\n      if (this.enforceDataFormat) {\n        response.data = (expectsArray ? [] : {});\n      }\n    }\n\n    //Initialize if empty\n    return response.data || (expectsArray ? [] : {});\n  };\n\n  /**\n   * Default error response interceptor\n   */\n  ApiAction.prototype.errorInterceptor = function(response) {\n    return $q.reject(response);\n  };\n\n  //Return factory function\n  return function(action, endpoint) {\n    return new ApiAction(action, endpoint);\n  };\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Service', [\n  'Api.Endpoint.Service'\n])\n\n/**\n * Provider definition\n */\n.provider('$api', function $apiProvider() {\n\n  //Defaults\n  this.defaults = {\n    verbose: false,\n    enforceDataFormat: false,\n    baseUrl: '/',\n    actions: {\n      query: {\n        method: 'GET',\n        isArray: true,\n        isModel: true\n      },\n      get: {\n        method: 'GET',\n        isModel: true\n      },\n      create: {\n        method: 'POST'\n      },\n      update: {\n        method: 'PUT'\n      },\n      delete: {\n        method: 'DELETE'\n      }\n    },\n    params: {\n      id: '@id'\n    },\n    model: '',\n    stripTrailingSlashes: true\n  };\n\n  //Registered endpoints\n  this.endpoints = {};\n\n  /**\n   * Set verbose\n   */\n  this.setVerbose = function(verbose) {\n    this.defaults.verbose = !!verbose;\n    return this;\n  };\n\n  /**\n   * Set base URL\n   */\n  this.setBaseUrl = function(url) {\n    //TODO: the replacement is protecting port numbers from later becoming\n    //removed on account of the request service url parsing thinking it's a\n    //parameter. The code there should be updated to prevent port replacement,\n    //rather than \"protecting\" it in this manner here.\n    this.defaults.baseUrl = url.replace(/:([0-9]+)/, '\\\\:$1');\n    return this;\n  };\n\n  /**\n   * Set data format enforcing\n   */\n  this.setEnforceDataFormat = function(enforce) {\n    this.defaults.enforceDataFormat = !!enforce;\n    return this;\n  };\n\n  /**\n   * Set default actions\n   */\n  this.setDefaultActions = function(actions) {\n    this.defaults.actions = actions || {};\n    return this;\n  };\n\n  /**\n   * Set default params\n   */\n  this.setDefaultParams = function(params) {\n    this.defaults.params = params || {};\n    return this;\n  };\n\n  /**\n   * Set default model\n   */\n  this.setDefaultModel = function(model) {\n    this.defaults.model = model || false;\n    return this;\n  };\n\n  /**\n   * Strip trailing slashes behaviour\n   */\n  this.stripTrailingSlashes = function(strip) {\n    this.defaults.stripTrailingSlashes = !!strip;\n    return this;\n  };\n\n  /**\n   * Register endpoint\n   */\n  this.registerEndpoint = function(name, config) {\n    if (name) {\n      this.endpoints[name] = config || {};\n    }\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$log', '$apiEndpoint', function($log, $apiEndpoint) {\n\n    //Initialize API interface\n    var Api = function(endpoint) {\n      return this[endpoint];\n    };\n\n    //Append all endpoints\n    angular.forEach(this.endpoints, function(config, name) {\n\n      //Warn if overwriting\n      if (Api[name]) {\n        $log.warn('API endpoint', name, 'is being overwritten.');\n      }\n\n      //Extend endpoint config with defaults\n      config = angular.extend({}, this.defaults, config);\n      if (config.verbose) {\n        $log.info('API endpoint', name + ':', config);\n      }\n\n      //Initialize endpoint\n      Api[name] = $apiEndpoint(name, config);\n    }, this);\n\n    //Return\n    return Api;\n  }];\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('BaseModel.Service', [])\n\n/**\n * Model definition\n */\n.factory('$baseModel', ['$window', '$log', '$injector', function($window, $log, $injector) {\n\n  //See if we have the moment service available to us\n  let moment;\n  if ($injector.has('moment')) {\n    moment = $injector.get('moment');\n  }\n  else if (typeof $window.moment !== 'undefined') {\n    moment = $window.moment;\n  }\n\n  /**\n   * Check if given string is a ISO 8601 date string,\n   * Returns a moment if it is and null if it's not\n   */\n  function dateStringToMoment(value) {\n    let regex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2}).*/;\n    if (value.match(regex)) {\n      let date = moment(value, moment.ISO_8601, true);\n      if (date.isValid()) {\n        return date;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Constructor\n   */\n  function $baseModel(data) {\n    this.fromJSON(data);\n  }\n\n  /**************************************************************************\n   * Helper methods\n   ***/\n\n  /**\n   * Parse a property\n   */\n  $baseModel.prototype.parseProperty = function(key, isArray, Model) {\n\n    //If undefined, check what we were expecting\n    if (typeof this[key] === 'undefined') {\n      if (isArray) {\n        this[key] = [];\n      }\n      else {\n        this[key] = null;\n      }\n    }\n\n    //If no model specified, we're done\n    if (!Model) {\n      return;\n    }\n\n    //String specified, use injector\n    if (typeof Model === 'string') {\n      if (!$injector.has(Model)) {\n        return $log.warn('Unknown model', Model, 'specified for sub model conversion');\n      }\n      Model = $injector.get(Model);\n    }\n\n    //Get model class and initiate\n    if (angular.isArray(this[key])) {\n      this[key] = this[key].map(data => new Model(data));\n    }\n    else {\n      this[key] = new Model(this[key]);\n    }\n  };\n\n  /**\n   * From JSON converter\n   */\n  $baseModel.prototype.fromJSON = function(json) {\n    if (angular.isObject(json)) {\n      angular.forEach(json, (value, key) => {\n        this[key] = $baseModel.valueFromJSON(value);\n      }, this);\n    }\n    return this;\n  };\n\n  /**\n   * To JSON converter\n   */\n  $baseModel.prototype.toJSON = function(data) {\n    let json = {};\n    if (data && angular.isObject(data)) {\n      angular.forEach(data, (value, key) => {\n        json[key] = $baseModel.valueToJSON(value);\n      });\n    }\n    angular.forEach(this, (value, key) => {\n      if (!json.hasOwnProperty(key)) {\n        json[key] = $baseModel.valueToJSON(value);\n      }\n    });\n    return json;\n  };\n\n  /**\n   * Extract a subset of data from the model\n   */\n  $baseModel.prototype.extract = function(properties) {\n    let obj = {};\n    let subset = (angular.isArray(properties) && properties.length);\n    angular.forEach(this, (value, key) => {\n      if (!subset || properties.indexOf(key) >= 0) {\n        obj[key] = angular.copy(value);\n      }\n    });\n    return obj;\n  };\n\n  /**\n   * Merge a set of data into the model\n   */\n  $baseModel.prototype.merge = function(data) {\n    if (data && angular.isObject(data)) {\n      angular.forEach(data, (value, key) => {\n        this[key] = angular.copy(value);\n      });\n    }\n  };\n\n  /**\n   * Clear own properties\n   */\n  $baseModel.prototype.clear = function() {\n    for (let key in this) {\n      if (this.hasOwnProperty(key)) {\n        delete this[key];\n      }\n    }\n  };\n\n  /**\n   * Clone\n   */\n  $baseModel.prototype.clone = function() {\n    let ModelClass = this.constructor;\n    return new ModelClass(this.extract());\n  };\n\n  /**************************************************************************\n   * Static methods\n   ***/\n\n  /**\n   * Helper to convert a value from JSON\n   */\n  $baseModel.valueFromJSON = function(value) {\n    if (angular.isArray(value)) {\n      return value.map($baseModel.valueFromJSON);\n    }\n    else if (moment && angular.isString(value)) {\n      let date = dateStringToMoment(value);\n      return date || value;\n    }\n    return angular.copy(value);\n  };\n\n  /**\n  * Helper to convert a value to JSON\n  */\n  $baseModel.valueToJSON = function(value) {\n    if (angular.isArray(value)) {\n      return value.map($baseModel.valueToJSON);\n    }\n    else if (value && angular.isObject(value)) {\n      if (angular.isFunction(value.toJSON)) {\n        return value.toJSON();\n      }\n      let copy = {};\n      for (let prop in value) {\n        if (value.hasOwnProperty(prop)) {\n          copy[prop] = $baseModel.valueToJSON(value[prop]);\n        }\n      }\n      return copy;\n    }\n    return value;\n  };\n\n  /**\n   * Strip object to only ID\n   */\n  $baseModel.onlyId = function(obj) {\n    if (angular.isArray(obj)) {\n      return obj.map($baseModel.onlyId);\n    }\n    if (!obj || typeof obj !== 'object' || !obj.id) {\n      return obj;\n    }\n    return obj.id;\n  };\n\n  //Return\n  return $baseModel;\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Endpoint.Service', [\n  'Api.Action.Service',\n  'Api.Request.Service',\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiEndpoint', ['$url', '$apiAction', '$apiRequest', function $apiEndpoint($url, $apiAction, $apiRequest) {\n\n  /**\n   * Constructor\n   */\n  function ApiEndpoint(name, config) {\n\n    //Determine full URL of endpoint\n    config.url = $url.concat(config.baseUrl, config.url || $url.concat(name, ':id'));\n    config.actions = config.actions || {};\n\n    //Expose config and actions container\n    this.$config = config;\n    this.$actions = {};\n\n    //Create action instances and bind request method to action key on endpoint\n    angular.forEach(config.actions, function(action, key) {\n      this.$actions[key] = $apiAction(action || {}, config);\n      this[key] = angular.bind(this, $apiRequest, this.$actions[key]);\n    }, this);\n  }\n\n  //Return factory function\n  return function(name, config) {\n    return new ApiEndpoint(name, config);\n  };\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Request.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiRequest', ['$http', '$url', function $apiRequest($http, $url) {\n\n  /**\n   * Check if dotted path is valid\n   */\n  function isValidDottedPath(path) {\n    return (\n      path && path !== 'hasOwnProperty' && /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test('.' + path)\n    );\n  }\n\n  /**\n   * Lookup dotted path in an object\n   */\n  function lookupDottedPath(obj, path) {\n\n    //Check if valid\n    if (!isValidDottedPath(path)) {\n      throw new Error('Invalid dotted path:' + path);\n    }\n\n    //Split path in object keys to traverse\n    var keys = path.split('.');\n    for (var i = 0; i < keys.length && obj !== undefined; i++) {\n      var key = keys[i];\n      obj = (obj !== null) ? obj[key] : undefined;\n    }\n\n    //Return reference\n    return obj;\n  }\n\n  /**\n   * Combine given params with extracted params from data\n   */\n  function combineParams(actionParams, givenParams, data) {\n\n    //Extract data params from action params\n    var extractedParams = {};\n    angular.forEach(actionParams || {}, function(value, key) {\n\n      //Function? Call now\n      if (angular.isFunction(value)) {\n        value = value();\n      }\n\n      //String value with @ identifier? Look up in data\n      if (angular.isString(value) && value.charAt(0) === '@') {\n        value = lookupDottedPath(data, value.substr(1));\n      }\n\n      //Set value\n      extractedParams[key] = value;\n    });\n\n    //Extend with given params\n    return angular.extend(extractedParams, givenParams || {});\n  }\n\n  /**\n   * Find URL params\n   */\n  function findUrlParams(url) {\n    var urlParams = {};\n    angular.forEach(url.split(/\\W/), function(param) {\n\n      //Filter hasOwnProperty\n      if (param === 'hasOwnProperty') {\n        throw new Error('Invalid parameter name: hasOwnProperty');\n      }\n\n      //Find all valid url params (have value, non digit)\n      if (param && !(/^\\\\d+$/.test(param))) {\n        if (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url)) {\n          urlParams[param] = true;\n        }\n      }\n    });\n    return urlParams;\n  }\n\n  /**\n   * Clean up URL\n   */\n  function cleanUpUrl(url, stripTrailingSlashes) {\n\n    //Strip trailing slashes if needed\n    if (stripTrailingSlashes) {\n      url = url.replace(/\\/+$/, '') || '/';\n    }\n\n    //Replace collapsed `/.` if found in the last URL path segment before the query\n    //E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`\n    return url\n      .replace(/\\/\\.(?=\\w+($|\\?))/, '.')\n      .replace(/\\/\\\\\\./, '/.');\n  }\n\n  /**\n   * Parse URL\n   */\n  function parseUrl(url, params, urlParams, stripTrailingSlashes) {\n\n    //Replace escaped \\:\n    url = url.replace(/\\\\:/g, ':');\n\n    //Loop the valid URL params now\n    angular.forEach(urlParams, function(t, urlParam) {\n\n      //Extract value for this url param from given params\n      var val = params.hasOwnProperty(urlParam) ? params[urlParam] : null;\n      var regex;\n\n      //If defined and not null, encode it and replace in URL\n      if (angular.isDefined(val) && val !== null) {\n        var encodedVal = $url.encodeUriSegment(val);\n        regex = new RegExp(':' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, function(match, tail) {\n          return encodedVal + tail;\n        });\n      }\n\n      //Otherwise, remove from URL\n      else {\n        regex = new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, function(match, leadingSlashes, tail) {\n          if (tail.charAt(0) === '/') {\n            return tail;\n          }\n          else {\n            return leadingSlashes + tail;\n          }\n        });\n      }\n    });\n\n    //Return cleaned up URL\n    return cleanUpUrl(url, stripTrailingSlashes);\n  }\n\n  /**\n   * Create request config\n   */\n  function createRequestConfig(action, params, data) {\n\n    //Initialize\n    var request = {};\n    var stripConfigKeys = [\n      'params', 'model', 'isArray', 'stripTrailingSlashes',\n      'successInterceptor', 'errorInterceptor'\n    ];\n\n    //Map action config to http request config\n    angular.forEach(action, function(value, key) {\n      if (stripConfigKeys.indexOf(key) === -1) {\n        request[key] = angular.copy(value);\n      }\n    });\n\n    //Append data if we have a body\n    if (action.hasBody() && data && angular.isObject(data)) {\n\n      //If toJson method present, use that, otherwise convert to simple object\n      if (angular.isFunction(data.toJson)) {\n        request.data = data.toJson();\n      }\n      else if (angular.isFunction(data.toObject)) {\n        //TODO: remove altogether in next major release\n        console.warn(\n          'Using `toObject` for model to JSON conversion is deprecated.\\n',\n          'Please provide a `toJSON` method on your model instead.'\n        );\n        request.data = data.toObject();\n      }\n      else {\n        request.data = angular.extend({}, data);\n      }\n    }\n\n    //Combine params out of given params and data and find URL params\n    params = combineParams(action.params, params, data);\n    var urlParams = findUrlParams(request.url);\n\n    //Parse URL\n    request.url = parseUrl(action.url, params, urlParams, action.stripTrailingSlashes);\n\n    //Set remaining given non-url params as query params, delegate param encoding to $http\n    angular.forEach(params, function(value, key) {\n      if (!urlParams[key]) {\n        request.params = request.params || {};\n        request.params[key] = value;\n      }\n    });\n\n    //Return\n    return request;\n  }\n\n  /**\n   * Api request executer\n   */\n  return function ApiRequest(action, params, data) {\n\n    //Parameter juggling\n    if (action.hasBody() && params && !data) {\n      data = params;\n      params = null;\n    }\n\n    //Create request config and use $http to do the request and intercept the response\n    var request = createRequestConfig(action, params, data);\n    var promise = $http(request).then(\n      action.successInterceptor.bind(action),\n      action.errorInterceptor.bind(action)\n    );\n\n    //Then handle the raw data\n    return promise.then(function(raw) {\n      if (action.expectsModel()) {\n        return action.convertToModel(raw);\n      }\n      return raw;\n    });\n  };\n}]);\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}