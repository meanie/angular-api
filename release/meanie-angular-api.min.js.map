{"version":3,"sources":["action.service.js","api.model.js","api.service.js","endpoint.service.js","request.service.js","meanie-angular-api.min.js"],"names":["window","angular","undefined","module","factory","$q","$injector","$log","$url","validatedModel","model","has","warn","ApiAction","action","endpoint","extend","this","url","concat","params","method","enforceDataFormat","prototype","hasBody","test","expectsArray","isArray","convertToModel","data","map","element","Model","get","successInterceptor","response","errorInterceptor","reject","ApiModel","fromObject","merge","key","hasOwnProperty","isObject","forEach","value","toObject","provider","defaults","verbose","baseUrl","actions","query","create","update","delete","id","stripTrailingSlashes","endpoints","setVerbose","setBaseUrl","setEnforceDataFormat","enforce","setDefaultActions","setDefaultParams","setDefaultModel","strip","registerEndpoint","name","config","$get","$apiEndpoint","Api","info","$apiAction","$apiRequest","ApiEndpoint","$config","$actions","bind","$http","isModel","isFunction","isValidDottedPath","path","lookupDottedPath","obj","Error","keys","split","i","length","combineParams","actionParams","givenParams","extractedParams","isString","charAt","substr","findUrlParams","urlParams","param","RegExp","cleanUpUrl","replace","parseUrl","t","urlParam","regex","val","isDefined","encodedVal","encodeUriSegment","match","tail","leadingSlashes","createRequestConfig","request","stripConfigKeys","indexOf","copy","expectsModel","promise","then","raw"],"mappings":"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","file":"meanie-angular-api.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Action.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiAction', ['$q', '$injector', '$log', '$url', function $apiAction($q, $injector, $log, $url) {\n\n  /**\n   * Return validated model class\n   */\n  function validatedModel(model) {\n\n    //No model?\n    if (!model) {\n      return null;\n    }\n\n    //Validate\n    if (!$injector.has(model)) {\n      $log.warn('Unknown model class/service:', model);\n      return null;\n    }\n\n    //Return model\n    return model;\n  }\n\n  /**\n   * Constructor\n   */\n  function ApiAction(action, endpoint) {\n\n    //Set vars\n    angular.extend(this, action);\n\n    //Set full action url, model and method\n    this.url = $url.concat(endpoint.url, this.url || '');\n    this.model = this.model || endpoint.model || false;\n    this.params = this.params || endpoint.params || {};\n    this.method = this.method || 'GET';\n    this.enforceDataFormat = endpoint.enforceDataFormat || false;\n\n    //Validate model\n    this.model = validatedModel(this.model);\n  }\n\n  /**\n   * Has body check\n   */\n  ApiAction.prototype.hasBody = function() {\n    return /^(POST|PUT|PATCH)$/i.test(this.method);\n  };\n\n  /**\n   * Expects array check\n   */\n  ApiAction.prototype.expectsArray = function() {\n    return !!this.isArray;\n  };\n\n  /**\n   * Convert raw response data to a model\n   */\n  ApiAction.prototype.convertToModel = function(data) {\n\n    //Array given?\n    if (angular.isArray(data)) {\n      return data.map(function(element) {\n        return this.convertToModel(element);\n      }, this);\n    }\n\n    //Instantiate new model\n    var Model = $injector.get(this.model);\n    return new Model(data);\n  };\n\n  /**\n   * Default success response interceptor\n   */\n  ApiAction.prototype.successInterceptor = function(response) {\n\n    //Check if we expect an array\n    var expectsArray = this.expectsArray();\n    var isArray = angular.isArray(response.data);\n\n    //Validate data type\n    if (isArray !== expectsArray) {\n\n      //Issue warning\n      $log.warn(\n        'Expected', expectsArray ? 'array' : 'object',\n        'as response, got', isArray ? 'array' : (typeof response.data)\n      );\n\n      //Enforce data format?\n      if (this.enforceDataFormat) {\n        response.data = (expectsArray ? [] : {});\n      }\n    }\n\n    //Initialize if empty\n    return response.data || (expectsArray ? [] : {});\n  };\n\n  /**\n   * Default error response interceptor\n   */\n  ApiAction.prototype.errorInterceptor = function(response) {\n    return $q.reject(response);\n  };\n\n  //Return factory function\n  return function(action, endpoint) {\n    return new ApiAction(action, endpoint);\n  };\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Model', [])\n\n/**\n * Model definition\n */\n.factory('$apiModel', function $apiModel() {\n\n  /**\n   * Constructor\n   */\n  function ApiModel(data) {\n    this.fromObject(data);\n  }\n\n  /**\n   * From plain object converter\n   */\n  ApiModel.prototype.fromObject = function(data, merge) {\n\n    //Unless merging, delete any existing keys\n    if (!merge) {\n      for (var key in this) {\n        if (this.hasOwnProperty(key)) {\n          delete this[key];\n        }\n      }\n    }\n\n    //No data?\n    if (!angular.isObject(data)) {\n      return this;\n    }\n\n    //Load from object data\n    angular.forEach(data, function(value, key) {\n      this[key] = value;\n    }, this);\n\n    //Return self\n    return this;\n  };\n\n  /**\n   * To plain object converter\n   */\n  ApiModel.prototype.toObject = function() {\n\n    //Copy our properties onto a simple object\n    var data = angular.extend({}, this);\n    return data;\n  };\n\n  //Return\n  return ApiModel;\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Service', [\n  'Api.Endpoint.Service',\n  'Api.Model'\n])\n\n/**\n * Provider definition\n */\n.provider('$api', function $apiProvider() {\n\n  //Defaults\n  this.defaults = {\n    verbose: false,\n    enforceDataFormat: false,\n    baseUrl: '/',\n    actions: {\n      query: {\n        method: 'GET',\n        isArray: true\n      },\n      get: {\n        method: 'GET'\n      },\n      create: {\n        method: 'POST'\n      },\n      update: {\n        method: 'PUT'\n      },\n      delete: {\n        method: 'DELETE'\n      }\n    },\n    params: {\n      id: '@id'\n    },\n    model: '$apiModel',\n    stripTrailingSlashes: true\n  };\n\n  //Registered endpoints\n  this.endpoints = {};\n\n  /**\n   * Set verbose\n   */\n  this.setVerbose = function(verbose) {\n    this.defaults.verbose = !!verbose;\n    return this;\n  };\n\n  /**\n   * Set base URL\n   */\n  this.setBaseUrl = function(url) {\n    this.defaults.baseUrl = url;\n    return this;\n  };\n\n  /**\n   * Set data format enforcing\n   */\n  this.setEnforceDataFormat = function(enforce) {\n    this.defaults.enforceDataFormat = !!enforce;\n    return this;\n  };\n\n  /**\n   * Set default actions\n   */\n  this.setDefaultActions = function(actions) {\n    this.defaults.actions = actions || {};\n    return this;\n  };\n\n  /**\n   * Set default params\n   */\n  this.setDefaultParams = function(params) {\n    this.defaults.params = params || {};\n    return this;\n  };\n\n  /**\n   * Set default model\n   */\n  this.setDefaultModel = function(model) {\n    this.defaults.model = model || false;\n    return this;\n  };\n\n  /**\n   * Strip trailing slashes behaviour\n   */\n  this.stripTrailingSlashes = function(strip) {\n    this.defaults.stripTrailingSlashes = !!strip;\n    return this;\n  };\n\n  /**\n   * Register endpoint\n   */\n  this.registerEndpoint = function(name, config) {\n    if (name) {\n      this.endpoints[name] = config || {};\n    }\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$injector', '$log', '$apiEndpoint', function($injector, $log, $apiEndpoint) {\n\n    //Initialize API interface\n    var Api = function(endpoint) {\n      return this[endpoint];\n    };\n\n    //Append all endpoints\n    angular.forEach(this.endpoints, function(config, name) {\n\n      //Warn if overwriting\n      if (Api[name]) {\n        $log.warn('API endpoint', name, 'is being overwritten.');\n      }\n\n      //Extend endpoint config with defaults and initialize it\n      config = angular.extend({}, this.defaults, config);\n      if (config.verbose) {\n        $log.info('API endpoint', name + ':', config);\n      }\n\n      //Initialize endpoint\n      Api[name] = $apiEndpoint(name, config);\n    }, this);\n\n    //Return\n    return Api;\n  }];\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Endpoint.Service', [\n  'Api.Action.Service',\n  'Api.Request.Service',\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiEndpoint', ['$url', '$apiAction', '$apiRequest', function $apiEndpoint($url, $apiAction, $apiRequest) {\n\n  /**\n   * Constructor\n   */\n  function ApiEndpoint(name, config) {\n\n    //Determine full URL of endpoint\n    config.url = $url.concat(config.baseUrl, config.url || $url.concat(name, ':id'));\n    config.actions = config.actions || {};\n\n    //Expose config and actions container\n    this.$config = config;\n    this.$actions = {};\n\n    //Create action instances and bind request method to action key on endpoint\n    angular.forEach(config.actions, function(action, key) {\n      this.$actions[key] = $apiAction(action || {}, config);\n      this[key] = angular.bind(this, $apiRequest, this.$actions[key]);\n    }, this);\n  }\n\n  //Return factory function\n  return function(name, config) {\n    return new ApiEndpoint(name, config);\n  };\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Request.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiRequest', ['$http', '$url', function $apiRequest($http, $url) {\n\n  /**\n   * Check if a data object is a model\n   */\n  function isModel(data) {\n    return angular.isObject(data) && angular.isFunction(data.toObject);\n  }\n\n  /**\n   * Check if dotted path is valid\n   */\n  function isValidDottedPath(path) {\n    return (\n      path && path !== 'hasOwnProperty' && /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test('.' + path)\n    );\n  }\n\n  /**\n   * Lookup dotted path in an object\n   */\n  function lookupDottedPath(obj, path) {\n\n    //Check if valid\n    if (!isValidDottedPath(path)) {\n      throw new Error('Invalid dotted path:' + path);\n    }\n\n    //Split path in object keys to traverse\n    var keys = path.split('.');\n    for (var i = 0; i < keys.length && obj !== undefined; i++) {\n      var key = keys[i];\n      obj = (obj !== null) ? obj[key] : undefined;\n    }\n\n    //Return reference\n    return obj;\n  }\n\n  /**\n   * Combine given params with extracted params from data\n   */\n  function combineParams(actionParams, givenParams, data) {\n\n    //Extract data params from action params\n    var extractedParams = {};\n    angular.forEach(actionParams || {}, function(value, key) {\n\n      //Function? Call now\n      if (angular.isFunction(value)) {\n        value = value();\n      }\n\n      //String value with @ identifier? Look up in data\n      if (angular.isString(value) && value.charAt(0) === '@') {\n        value = lookupDottedPath(data, value.substr(1));\n      }\n\n      //Set value\n      extractedParams[key] = value;\n    });\n\n    //Extend with given params\n    return angular.extend(extractedParams, givenParams || {});\n  }\n\n  /**\n   * Find URL params\n   */\n  function findUrlParams(url) {\n    var urlParams = {};\n    angular.forEach(url.split(/\\W/), function(param) {\n\n      //Filter hasOwnProperty\n      if (param === 'hasOwnProperty') {\n        throw new Error('Invalid parameter name: hasOwnProperty');\n      }\n\n      //Find all valid url params (have value, non digit)\n      if (param && !(/^\\\\d+$/.test(param))) {\n        if (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url)) {\n          urlParams[param] = true;\n        }\n      }\n    });\n    return urlParams;\n  }\n\n  /**\n   * Clean up URL\n   */\n  function cleanUpUrl(url, stripTrailingSlashes) {\n\n    //Strip trailing slashes if needed\n    if (stripTrailingSlashes) {\n      url = url.replace(/\\/+$/, '') || '/';\n    }\n\n    //Replace collapsed `/.` if found in the last URL path segment before the query\n    //E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`\n    return url\n      .replace(/\\/\\.(?=\\w+($|\\?))/, '.')\n      .replace(/\\/\\\\\\./, '/.');\n  }\n\n  /**\n   * Parse URL\n   */\n  function parseUrl(url, params, urlParams, stripTrailingSlashes) {\n\n    //Replace escaped \\:\n    url = url.replace(/\\\\:/g, ':');\n\n    //Loop the valid URL params now\n    angular.forEach(urlParams, function(t, urlParam) {\n\n      //Extract value for this url param from given params\n      var val = params.hasOwnProperty(urlParam) ? params[urlParam] : null;\n      var regex;\n\n      //If defined and not null, encode it and replace in URL\n      if (angular.isDefined(val) && val !== null) {\n        var encodedVal = $url.encodeUriSegment(val);\n        regex = new RegExp(':' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, function(match, tail) {\n          return encodedVal + tail;\n        });\n      }\n\n      //Otherwise, remove from URL\n      else {\n        regex = new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, function(match, leadingSlashes, tail) {\n          if (tail.charAt(0) === '/') {\n            return tail;\n          }\n          else {\n            return leadingSlashes + tail;\n          }\n        });\n      }\n    });\n\n    //Return cleaned up URL\n    return cleanUpUrl(url, stripTrailingSlashes);\n  }\n\n  /**\n   * Create request config\n   */\n  function createRequestConfig(action, params, data) {\n\n    //Initialize\n    var request = {};\n    var stripConfigKeys = [\n      'params', 'model', 'isArray', 'stripTrailingSlashes',\n      'successInterceptor', 'errorInterceptor'\n    ];\n\n    //Map action config to http request config\n    angular.forEach(action, function(value, key) {\n      if (stripConfigKeys.indexOf(key) === -1) {\n        request[key] = angular.copy(value);\n      }\n    });\n\n    //Append data if we have a body\n    if (action.hasBody() && data) {\n      if (isModel(data)) {\n        data = data.toObject();\n      }\n      request.data = data;\n    }\n\n    //Combine params out of given params and data and find URL params\n    params = combineParams(action.params, params, data);\n    var urlParams = findUrlParams(request.url);\n\n    //Parse URL\n    request.url = parseUrl(action.url, params, urlParams, action.stripTrailingSlashes);\n\n    //Set remaining given non-url params as query params, delegate param encoding to $http\n    angular.forEach(params, function(value, key) {\n      if (!urlParams[key]) {\n        request.params = request.params || {};\n        request.params[key] = value;\n      }\n    });\n\n    //Return\n    return request;\n  }\n\n  /**\n   * Api request executer\n   */\n  return function ApiRequest(action, params, data) {\n\n    //Parameter juggling\n    if (action.hasBody() && params && !data) {\n      data = params;\n      params = null;\n    }\n\n    //Create request config\n    var request = createRequestConfig(action, params, data);\n    var expectsModel = action.model && /^(GET|POST|PUT|PATCH)$/i.test(action.method);\n\n    //Use $http to do the request and intercept the response\n    var promise = $http(request).then(\n      action.successInterceptor.bind(action),\n      action.errorInterceptor.bind(action)\n    );\n\n    //Then handle the raw data\n    return promise.then(function(raw) {\n      if (action.hasBody() && isModel(data)) {\n        return data.fromObject(raw);\n      }\n      else if (expectsModel) {\n        return action.convertToModel(raw);\n      }\n      return raw;\n    });\n  };\n}]);\n\n})(window, window.angular);\n","/**\n * meanie-angular-api - v1.1.0 - 23-11-2015\n * https://github.com/meanie/angular-api\n *\n * Copyright (c) 2015 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n!function(t,e,r){\"use strict\";e.module(\"Api.Action.Service\",[\"Url.Service\"]).factory(\"$apiAction\",[\"$q\",\"$injector\",\"$log\",\"$url\",function(t,r,n,i){function o(t){return t?r.has(t)?t:(n.warn(\"Unknown model class/service:\",t),null):null}function s(t,r){e.extend(this,t),this.url=i.concat(r.url,this.url||\"\"),this.model=this.model||r.model||!1,this.params=this.params||r.params||{},this.method=this.method||\"GET\",this.enforceDataFormat=r.enforceDataFormat||!1,this.model=o(this.model)}return s.prototype.hasBody=function(){return/^(POST|PUT|PATCH)$/i.test(this.method)},s.prototype.expectsArray=function(){return!!this.isArray},s.prototype.convertToModel=function(t){if(e.isArray(t))return t.map(function(t){return this.convertToModel(t)},this);var n=r.get(this.model);return new n(t)},s.prototype.successInterceptor=function(t){var r=this.expectsArray(),i=e.isArray(t.data);return i!==r&&(n.warn(\"Expected\",r?\"array\":\"object\",\"as response, got\",t.data),this.enforceDataFormat&&(t.data=r?[]:{})),t.data||(r?[]:{})},s.prototype.errorInterceptor=function(e){return t.reject(e)},function(t,e){return new s(t,e)}}])}(window,window.angular),function(t,e,r){\"use strict\";e.module(\"Api.Model\",[]).factory(\"$apiModel\",function(){function t(t){this.fromObject(t)}return t.prototype.fromObject=function(t,r){if(!r)for(var n in this)this.hasOwnProperty(n)&&delete this[n];return e.isObject(t)?(e.forEach(t,function(t,e){this[e]=t},this),this):this},t.prototype.toObject=function(){var t=e.extend({},this);return t},t})}(window,window.angular),function(t,e,r){\"use strict\";e.module(\"Api.Service\",[\"Api.Endpoint.Service\",\"Api.Model\"]).provider(\"$api\",function(){this.defaults={verbose:!1,enforceDataFormat:!1,baseUrl:\"/\",actions:{query:{method:\"GET\",isArray:!0},get:{method:\"GET\"},create:{method:\"POST\"},update:{method:\"PUT\"},\"delete\":{method:\"DELETE\"}},params:{id:\"@id\"},model:\"$apiModel\",stripTrailingSlashes:!0},this.endpoints={},this.setVerbose=function(t){return this.defaults.verbose=!!t,this},this.setBaseUrl=function(t){return this.defaults.baseUrl=t,this},this.setEnforceDataFormat=function(t){return this.defaults.enforceDataFormat=!!t,this},this.setDefaultActions=function(t){return this.defaults.actions=t||{},this},this.setDefaultParams=function(t){return this.defaults.params=t||{},this},this.setDefaultModel=function(t){return this.defaults.model=t||!1,this},this.stripTrailingSlashes=function(t){return this.defaults.stripTrailingSlashes=!!t,this},this.registerEndpoint=function(t,e){return t&&(this.endpoints[t]=e||{}),this},this.$get=[\"$injector\",\"$log\",\"$apiEndpoint\",function(t,r,n){var i=function(t){return this[t]};return e.forEach(this.endpoints,function(t,o){i[o]&&r.warn(\"API endpoint\",o,\"is being overwritten.\"),t=e.extend({},this.defaults,t),t.verbose&&r.info(\"API endpoint\",o+\":\",t),i[o]=n(o,t)},this),i}]})}(window,window.angular),function(t,e,r){\"use strict\";e.module(\"Api.Endpoint.Service\",[\"Api.Action.Service\",\"Api.Request.Service\",\"Url.Service\"]).factory(\"$apiEndpoint\",[\"$url\",\"$apiAction\",\"$apiRequest\",function(t,r,n){function i(i,o){o.url=t.concat(o.baseUrl,o.url||t.concat(i,\":id\")),o.actions=o.actions||{},this.$config=o,this.$actions={},e.forEach(o.actions,function(t,i){this.$actions[i]=r(t||{},o),this[i]=e.bind(this,n,this.$actions[i])},this)}return function(t,e){return new i(t,e)}}])}(window,window.angular),function(t,e,r){\"use strict\";e.module(\"Api.Request.Service\",[\"Url.Service\"]).factory(\"$apiRequest\",[\"$http\",\"$url\",function(t,n){function i(t){return e.isObject(t)&&e.isFunction(t.toObject)}function o(t){return t&&\"hasOwnProperty\"!==t&&/^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test(\".\"+t)}function s(t,e){if(!o(e))throw new Error(\"Invalid dotted path:\"+e);for(var n=e.split(\".\"),i=0;i<n.length&&t!==r;i++){var s=n[i];t=null!==t?t[s]:r}return t}function a(t,r,n){var i={};return e.forEach(t||{},function(t,r){e.isFunction(t)&&(t=t()),e.isString(t)&&\"@\"===t.charAt(0)&&(t=s(n,t.substr(1))),i[r]=t}),e.extend(i,r||{})}function c(t){var r={};return e.forEach(t.split(/\\W/),function(e){if(\"hasOwnProperty\"===e)throw new Error(\"Invalid parameter name: hasOwnProperty\");e&&!/^\\\\d+$/.test(e)&&new RegExp(\"(^|[^\\\\\\\\]):\"+e+\"(\\\\W|$)\").test(t)&&(r[e]=!0)}),r}function u(t,e){return e&&(t=t.replace(/\\/+$/,\"\")||\"/\"),t.replace(/\\/\\.(?=\\w+($|\\?))/,\".\").replace(/\\/\\\\\\./,\"/.\")}function h(t,r,i,o){return t=t.replace(/\\\\:/g,\":\"),e.forEach(i,function(i,o){var s,a=r.hasOwnProperty(o)?r[o]:null;if(e.isDefined(a)&&null!==a){var c=n.encodeUriSegment(a);s=new RegExp(\":\"+o+\"(\\\\W|$)\",\"g\"),t=t.replace(s,function(t,e){return c+e})}else s=new RegExp(\"(/?):\"+o+\"(\\\\W|$)\",\"g\"),t=t.replace(s,function(t,e,r){return\"/\"===r.charAt(0)?r:e+r})}),u(t,o)}function f(t,r,n){var o={},s=[\"params\",\"model\",\"isArray\",\"stripTrailingSlashes\",\"successInterceptor\",\"errorInterceptor\"];e.forEach(t,function(t,r){-1===s.indexOf(r)&&(o[r]=e.copy(t))}),t.hasBody()&&n&&(i(n)&&(n=n.toObject()),o.data=n),r=a(t.params,r,n);var u=c(o.url);return o.url=h(t.url,r,u,t.stripTrailingSlashes),e.forEach(r,function(t,e){u[e]||(o.params=o.params||{},o.params[e]=t)}),o}return function(e,r,n){e.hasBody()&&r&&!n&&(n=r,r=null);var o=f(e,r,n),s=e.model&&/^(GET|POST|PUT|PATCH)$/i.test(e.method),a=t(o).then(e.successInterceptor.bind(e),e.errorInterceptor.bind(e));return a.then(function(t){return e.hasBody()&&i(n)?n.fromObject(t):s?e.convertToModel(t):t})}}])}(window,window.angular);\n//# sourceMappingURL=meanie-angular-api.min.js.map\n"],"sourceRoot":"/source/"}