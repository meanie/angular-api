{"version":3,"sources":["action.service.js","api.service.js","endpoint.service.js","request.service.js","meanie-angular-api.min.js"],"names":["window","angular","undefined","module","factory","$q","$injector","$log","$url","validatedModel","model","has","warn","ApiAction","action","endpoint","extend","this","url","concat","params","method","enforceDataFormat","prototype","hasBody","test","expectsArray","isArray","expectsModel","isModel","convertToModel","data","map","element","Model","get","successInterceptor","response","errorInterceptor","reject","provider","defaults","verbose","baseUrl","actions","query","create","update","delete","id","stripTrailingSlashes","endpoints","setVerbose","setBaseUrl","setEnforceDataFormat","enforce","setDefaultActions","setDefaultParams","setDefaultModel","strip","registerEndpoint","name","config","$get","$apiEndpoint","Api","forEach","info","$apiAction","$apiRequest","ApiEndpoint","$config","$actions","key","bind","$http","isValidDottedPath","path","lookupDottedPath","obj","Error","keys","split","i","length","combineParams","actionParams","givenParams","extractedParams","value","isFunction","isString","charAt","substr","findUrlParams","urlParams","param","RegExp","cleanUpUrl","replace","parseUrl","t","urlParam","regex","val","hasOwnProperty","isDefined","encodedVal","encodeUriSegment","match","tail","leadingSlashes","createRequestConfig","request","stripConfigKeys","indexOf","copy","isObject","toJson","toObject","promise","then","raw"],"mappings":"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","file":"meanie-angular-api.min.js","sourcesContent":["(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Action.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiAction', ['$q', '$injector', '$log', '$url', function $apiAction($q, $injector, $log, $url) {\n\n  /**\n   * Return validated model class\n   */\n  function validatedModel(model) {\n\n    //No model?\n    if (!model) {\n      return null;\n    }\n\n    //Validate\n    if (!$injector.has(model)) {\n      $log.warn('Unknown model class/service:', model);\n      return null;\n    }\n\n    //Return model\n    return model;\n  }\n\n  /**\n   * Constructor\n   */\n  function ApiAction(action, endpoint) {\n\n    //Set vars\n    angular.extend(this, action);\n\n    //Set full action url, model and method\n    this.url = $url.concat(endpoint.url, this.url || '');\n    this.model = this.model || endpoint.model || false;\n    this.params = this.params || endpoint.params || {};\n    this.method = this.method || 'GET';\n    this.enforceDataFormat = endpoint.enforceDataFormat || false;\n\n    //Validate model\n    this.model = validatedModel(this.model);\n  }\n\n  /**\n   * Has body check\n   */\n  ApiAction.prototype.hasBody = function() {\n    return /^(POST|PUT|PATCH)$/i.test(this.method);\n  };\n\n  /**\n   * Expects array check\n   */\n  ApiAction.prototype.expectsArray = function() {\n    return !!this.isArray;\n  };\n\n  /**\n   * Expects model check\n   */\n  ApiAction.prototype.expectsModel = function() {\n    return (this.model && !!this.isModel);\n  };\n\n  /**\n   * Convert raw response data to a model\n   */\n  ApiAction.prototype.convertToModel = function(data) {\n\n    //Array given?\n    if (angular.isArray(data)) {\n      return data.map(function(element) {\n        return this.convertToModel(element);\n      }, this);\n    }\n\n    //Instantiate new model\n    var Model = $injector.get(this.model);\n    return new Model(data);\n  };\n\n  /**\n   * Default success response interceptor\n   */\n  ApiAction.prototype.successInterceptor = function(response) {\n\n    //Check if we expect an array\n    var expectsArray = this.expectsArray();\n    var isArray = angular.isArray(response.data);\n\n    //Validate data type\n    if (isArray !== expectsArray) {\n\n      //Issue warning\n      $log.warn(\n        'Expected', expectsArray ? 'array' : 'object',\n        'as response, got', isArray ? 'array' : (typeof response.data)\n      );\n\n      //Enforce data format?\n      if (this.enforceDataFormat) {\n        response.data = (expectsArray ? [] : {});\n      }\n    }\n\n    //Initialize if empty\n    return response.data || (expectsArray ? [] : {});\n  };\n\n  /**\n   * Default error response interceptor\n   */\n  ApiAction.prototype.errorInterceptor = function(response) {\n    return $q.reject(response);\n  };\n\n  //Return factory function\n  return function(action, endpoint) {\n    return new ApiAction(action, endpoint);\n  };\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Service', [\n  'Api.Endpoint.Service'\n])\n\n/**\n * Provider definition\n */\n.provider('$api', function $apiProvider() {\n\n  //Defaults\n  this.defaults = {\n    verbose: false,\n    enforceDataFormat: false,\n    baseUrl: '/',\n    actions: {\n      query: {\n        method: 'GET',\n        isArray: true,\n        isModel: true\n      },\n      get: {\n        method: 'GET',\n        isModel: true\n      },\n      create: {\n        method: 'POST'\n      },\n      update: {\n        method: 'PUT'\n      },\n      delete: {\n        method: 'DELETE'\n      }\n    },\n    params: {\n      id: '@id'\n    },\n    model: '',\n    stripTrailingSlashes: true\n  };\n\n  //Registered endpoints\n  this.endpoints = {};\n\n  /**\n   * Set verbose\n   */\n  this.setVerbose = function(verbose) {\n    this.defaults.verbose = !!verbose;\n    return this;\n  };\n\n  /**\n   * Set base URL\n   */\n  this.setBaseUrl = function(url) {\n    this.defaults.baseUrl = url;\n    return this;\n  };\n\n  /**\n   * Set data format enforcing\n   */\n  this.setEnforceDataFormat = function(enforce) {\n    this.defaults.enforceDataFormat = !!enforce;\n    return this;\n  };\n\n  /**\n   * Set default actions\n   */\n  this.setDefaultActions = function(actions) {\n    this.defaults.actions = actions || {};\n    return this;\n  };\n\n  /**\n   * Set default params\n   */\n  this.setDefaultParams = function(params) {\n    this.defaults.params = params || {};\n    return this;\n  };\n\n  /**\n   * Set default model\n   */\n  this.setDefaultModel = function(model) {\n    this.defaults.model = model || false;\n    return this;\n  };\n\n  /**\n   * Strip trailing slashes behaviour\n   */\n  this.stripTrailingSlashes = function(strip) {\n    this.defaults.stripTrailingSlashes = !!strip;\n    return this;\n  };\n\n  /**\n   * Register endpoint\n   */\n  this.registerEndpoint = function(name, config) {\n    if (name) {\n      this.endpoints[name] = config || {};\n    }\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$injector', '$log', '$apiEndpoint', function($injector, $log, $apiEndpoint) {\n\n    //Initialize API interface\n    var Api = function(endpoint) {\n      return this[endpoint];\n    };\n\n    //Append all endpoints\n    angular.forEach(this.endpoints, function(config, name) {\n\n      //Warn if overwriting\n      if (Api[name]) {\n        $log.warn('API endpoint', name, 'is being overwritten.');\n      }\n\n      //Extend endpoint config with defaults and initialize it\n      config = angular.extend({}, this.defaults, config);\n      if (config.verbose) {\n        $log.info('API endpoint', name + ':', config);\n      }\n\n      //Initialize endpoint\n      Api[name] = $apiEndpoint(name, config);\n    }, this);\n\n    //Return\n    return Api;\n  }];\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Endpoint.Service', [\n  'Api.Action.Service',\n  'Api.Request.Service',\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiEndpoint', ['$url', '$apiAction', '$apiRequest', function $apiEndpoint($url, $apiAction, $apiRequest) {\n\n  /**\n   * Constructor\n   */\n  function ApiEndpoint(name, config) {\n\n    //Determine full URL of endpoint\n    config.url = $url.concat(config.baseUrl, config.url || $url.concat(name, ':id'));\n    config.actions = config.actions || {};\n\n    //Expose config and actions container\n    this.$config = config;\n    this.$actions = {};\n\n    //Create action instances and bind request method to action key on endpoint\n    angular.forEach(config.actions, function(action, key) {\n      this.$actions[key] = $apiAction(action || {}, config);\n      this[key] = angular.bind(this, $apiRequest, this.$actions[key]);\n    }, this);\n  }\n\n  //Return factory function\n  return function(name, config) {\n    return new ApiEndpoint(name, config);\n  };\n}]);\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Request.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiRequest', ['$http', '$url', function $apiRequest($http, $url) {\n\n  /**\n   * Check if dotted path is valid\n   */\n  function isValidDottedPath(path) {\n    return (\n      path && path !== 'hasOwnProperty' && /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test('.' + path)\n    );\n  }\n\n  /**\n   * Lookup dotted path in an object\n   */\n  function lookupDottedPath(obj, path) {\n\n    //Check if valid\n    if (!isValidDottedPath(path)) {\n      throw new Error('Invalid dotted path:' + path);\n    }\n\n    //Split path in object keys to traverse\n    var keys = path.split('.');\n    for (var i = 0; i < keys.length && obj !== undefined; i++) {\n      var key = keys[i];\n      obj = (obj !== null) ? obj[key] : undefined;\n    }\n\n    //Return reference\n    return obj;\n  }\n\n  /**\n   * Combine given params with extracted params from data\n   */\n  function combineParams(actionParams, givenParams, data) {\n\n    //Extract data params from action params\n    var extractedParams = {};\n    angular.forEach(actionParams || {}, function(value, key) {\n\n      //Function? Call now\n      if (angular.isFunction(value)) {\n        value = value();\n      }\n\n      //String value with @ identifier? Look up in data\n      if (angular.isString(value) && value.charAt(0) === '@') {\n        value = lookupDottedPath(data, value.substr(1));\n      }\n\n      //Set value\n      extractedParams[key] = value;\n    });\n\n    //Extend with given params\n    return angular.extend(extractedParams, givenParams || {});\n  }\n\n  /**\n   * Find URL params\n   */\n  function findUrlParams(url) {\n    var urlParams = {};\n    angular.forEach(url.split(/\\W/), function(param) {\n\n      //Filter hasOwnProperty\n      if (param === 'hasOwnProperty') {\n        throw new Error('Invalid parameter name: hasOwnProperty');\n      }\n\n      //Find all valid url params (have value, non digit)\n      if (param && !(/^\\\\d+$/.test(param))) {\n        if (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url)) {\n          urlParams[param] = true;\n        }\n      }\n    });\n    return urlParams;\n  }\n\n  /**\n   * Clean up URL\n   */\n  function cleanUpUrl(url, stripTrailingSlashes) {\n\n    //Strip trailing slashes if needed\n    if (stripTrailingSlashes) {\n      url = url.replace(/\\/+$/, '') || '/';\n    }\n\n    //Replace collapsed `/.` if found in the last URL path segment before the query\n    //E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`\n    return url\n      .replace(/\\/\\.(?=\\w+($|\\?))/, '.')\n      .replace(/\\/\\\\\\./, '/.');\n  }\n\n  /**\n   * Parse URL\n   */\n  function parseUrl(url, params, urlParams, stripTrailingSlashes) {\n\n    //Replace escaped \\:\n    url = url.replace(/\\\\:/g, ':');\n\n    //Loop the valid URL params now\n    angular.forEach(urlParams, function(t, urlParam) {\n\n      //Extract value for this url param from given params\n      var val = params.hasOwnProperty(urlParam) ? params[urlParam] : null;\n      var regex;\n\n      //If defined and not null, encode it and replace in URL\n      if (angular.isDefined(val) && val !== null) {\n        var encodedVal = $url.encodeUriSegment(val);\n        regex = new RegExp(':' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, function(match, tail) {\n          return encodedVal + tail;\n        });\n      }\n\n      //Otherwise, remove from URL\n      else {\n        regex = new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, function(match, leadingSlashes, tail) {\n          if (tail.charAt(0) === '/') {\n            return tail;\n          }\n          else {\n            return leadingSlashes + tail;\n          }\n        });\n      }\n    });\n\n    //Return cleaned up URL\n    return cleanUpUrl(url, stripTrailingSlashes);\n  }\n\n  /**\n   * Create request config\n   */\n  function createRequestConfig(action, params, data) {\n\n    //Initialize\n    var request = {};\n    var stripConfigKeys = [\n      'params', 'model', 'isArray', 'stripTrailingSlashes',\n      'successInterceptor', 'errorInterceptor'\n    ];\n\n    //Map action config to http request config\n    angular.forEach(action, function(value, key) {\n      if (stripConfigKeys.indexOf(key) === -1) {\n        request[key] = angular.copy(value);\n      }\n    });\n\n    //Append data if we have a body\n    if (action.hasBody() && data && angular.isObject(data)) {\n\n      //If toJson or toObject method present, use that, otherwise convert to simple object manually\n      if (angular.isFunction(data.toJson)) {\n        request.data = data.toJson();\n      }\n      else if (angular.isFunction(data.toObject)) {\n        request.data = data.toObject();\n      }\n      else {\n        request.data = angular.extend({}, data);\n      }\n    }\n\n    //Combine params out of given params and data and find URL params\n    params = combineParams(action.params, params, data);\n    var urlParams = findUrlParams(request.url);\n\n    //Parse URL\n    request.url = parseUrl(action.url, params, urlParams, action.stripTrailingSlashes);\n\n    //Set remaining given non-url params as query params, delegate param encoding to $http\n    angular.forEach(params, function(value, key) {\n      if (!urlParams[key]) {\n        request.params = request.params || {};\n        request.params[key] = value;\n      }\n    });\n\n    //Return\n    return request;\n  }\n\n  /**\n   * Api request executer\n   */\n  return function ApiRequest(action, params, data) {\n\n    //Parameter juggling\n    if (action.hasBody() && params && !data) {\n      data = params;\n      params = null;\n    }\n\n    //Create request config and use $http to do the request and intercept the response\n    var request = createRequestConfig(action, params, data);\n    var promise = $http(request).then(\n      action.successInterceptor.bind(action),\n      action.errorInterceptor.bind(action)\n    );\n\n    //Then handle the raw data\n    return promise.then(function(raw) {\n      if (action.expectsModel()) {\n        return action.convertToModel(raw);\n      }\n      return raw;\n    });\n  };\n}]);\n\n})(window, window.angular);\n","/**\n * meanie-angular-api - v1.2.0 - 31-11-2015\n * https://github.com/meanie/angular-api\n *\n * Copyright (c) 2015 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n!function(t,e,r){\"use strict\";e.module(\"Api.Action.Service\",[\"Url.Service\"]).factory(\"$apiAction\",[\"$q\",\"$injector\",\"$log\",\"$url\",function(t,r,n,i){function o(t){return t?r.has(t)?t:(n.warn(\"Unknown model class/service:\",t),null):null}function s(t,r){e.extend(this,t),this.url=i.concat(r.url,this.url||\"\"),this.model=this.model||r.model||!1,this.params=this.params||r.params||{},this.method=this.method||\"GET\",this.enforceDataFormat=r.enforceDataFormat||!1,this.model=o(this.model)}return s.prototype.hasBody=function(){return/^(POST|PUT|PATCH)$/i.test(this.method)},s.prototype.expectsArray=function(){return!!this.isArray},s.prototype.expectsModel=function(){return this.model&&!!this.isModel},s.prototype.convertToModel=function(t){if(e.isArray(t))return t.map(function(t){return this.convertToModel(t)},this);var n=r.get(this.model);return new n(t)},s.prototype.successInterceptor=function(t){var r=this.expectsArray(),i=e.isArray(t.data);return i!==r&&(n.warn(\"Expected\",r?\"array\":\"object\",\"as response, got\",i?\"array\":typeof t.data),this.enforceDataFormat&&(t.data=r?[]:{})),t.data||(r?[]:{})},s.prototype.errorInterceptor=function(e){return t.reject(e)},function(t,e){return new s(t,e)}}])}(window,window.angular),function(t,e,r){\"use strict\";e.module(\"Api.Service\",[\"Api.Endpoint.Service\",\"Api.Model\"]).provider(\"$api\",function(){this.defaults={verbose:!1,enforceDataFormat:!1,baseUrl:\"/\",actions:{query:{method:\"GET\",isArray:!0,isModel:!0},get:{method:\"GET\",isModel:!0},create:{method:\"POST\"},update:{method:\"PUT\"},\"delete\":{method:\"DELETE\"}},params:{id:\"@id\"},model:\"\",stripTrailingSlashes:!0},this.endpoints={},this.setVerbose=function(t){return this.defaults.verbose=!!t,this},this.setBaseUrl=function(t){return this.defaults.baseUrl=t,this},this.setEnforceDataFormat=function(t){return this.defaults.enforceDataFormat=!!t,this},this.setDefaultActions=function(t){return this.defaults.actions=t||{},this},this.setDefaultParams=function(t){return this.defaults.params=t||{},this},this.setDefaultModel=function(t){return this.defaults.model=t||!1,this},this.stripTrailingSlashes=function(t){return this.defaults.stripTrailingSlashes=!!t,this},this.registerEndpoint=function(t,e){return t&&(this.endpoints[t]=e||{}),this},this.$get=[\"$injector\",\"$log\",\"$apiEndpoint\",function(t,r,n){var i=function(t){return this[t]};return e.forEach(this.endpoints,function(t,o){i[o]&&r.warn(\"API endpoint\",o,\"is being overwritten.\"),t=e.extend({},this.defaults,t),t.verbose&&r.info(\"API endpoint\",o+\":\",t),i[o]=n(o,t)},this),i}]})}(window,window.angular),function(t,e,r){\"use strict\";e.module(\"Api.Endpoint.Service\",[\"Api.Action.Service\",\"Api.Request.Service\",\"Url.Service\"]).factory(\"$apiEndpoint\",[\"$url\",\"$apiAction\",\"$apiRequest\",function(t,r,n){function i(i,o){o.url=t.concat(o.baseUrl,o.url||t.concat(i,\":id\")),o.actions=o.actions||{},this.$config=o,this.$actions={},e.forEach(o.actions,function(t,i){this.$actions[i]=r(t||{},o),this[i]=e.bind(this,n,this.$actions[i])},this)}return function(t,e){return new i(t,e)}}])}(window,window.angular),function(t,e,r){\"use strict\";e.module(\"Api.Request.Service\",[\"Url.Service\"]).factory(\"$apiRequest\",[\"$http\",\"$url\",function(t,n){function i(t){return t&&\"hasOwnProperty\"!==t&&/^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test(\".\"+t)}function o(t,e){if(!i(e))throw new Error(\"Invalid dotted path:\"+e);for(var n=e.split(\".\"),o=0;o<n.length&&t!==r;o++){var s=n[o];t=null!==t?t[s]:r}return t}function s(t,r,n){var i={};return e.forEach(t||{},function(t,r){e.isFunction(t)&&(t=t()),e.isString(t)&&\"@\"===t.charAt(0)&&(t=o(n,t.substr(1))),i[r]=t}),e.extend(i,r||{})}function a(t){var r={};return e.forEach(t.split(/\\W/),function(e){if(\"hasOwnProperty\"===e)throw new Error(\"Invalid parameter name: hasOwnProperty\");e&&!/^\\\\d+$/.test(e)&&new RegExp(\"(^|[^\\\\\\\\]):\"+e+\"(\\\\W|$)\").test(t)&&(r[e]=!0)}),r}function c(t,e){return e&&(t=t.replace(/\\/+$/,\"\")||\"/\"),t.replace(/\\/\\.(?=\\w+($|\\?))/,\".\").replace(/\\/\\\\\\./,\"/.\")}function u(t,r,i,o){return t=t.replace(/\\\\:/g,\":\"),e.forEach(i,function(i,o){var s,a=r.hasOwnProperty(o)?r[o]:null;if(e.isDefined(a)&&null!==a){var c=n.encodeUriSegment(a);s=new RegExp(\":\"+o+\"(\\\\W|$)\",\"g\"),t=t.replace(s,function(t,e){return c+e})}else s=new RegExp(\"(/?):\"+o+\"(\\\\W|$)\",\"g\"),t=t.replace(s,function(t,e,r){return\"/\"===r.charAt(0)?r:e+r})}),c(t,o)}function l(t,r,n){var i={},o=[\"params\",\"model\",\"isArray\",\"stripTrailingSlashes\",\"successInterceptor\",\"errorInterceptor\"];e.forEach(t,function(t,r){-1===o.indexOf(r)&&(i[r]=e.copy(t))}),t.hasBody()&&n&&e.isObject(n)&&(e.isFunction(n.toJson)?i.data=n.toJson():e.isFunction(n.toObject)?i.data=n.toObject():i.data=e.extend({},n)),r=s(t.params,r,n);var c=a(i.url);return i.url=u(t.url,r,c,t.stripTrailingSlashes),e.forEach(r,function(t,e){c[e]||(i.params=i.params||{},i.params[e]=t)}),i}return function(e,r,n){e.hasBody()&&r&&!n&&(n=r,r=null);var i=l(e,r,n),o=t(i).then(e.successInterceptor.bind(e),e.errorInterceptor.bind(e));return o.then(function(t){return e.expectsModel()?e.convertToModel(t):t})}}])}(window,window.angular);\n//# sourceMappingURL=meanie-angular-api.min.js.map\n"],"sourceRoot":"/source/"}