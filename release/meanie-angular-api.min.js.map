{"version":3,"sources":["action.service.js","api.model.js","api.service.js","endpoint.service.js","request.service.js","meanie-angular-api.min.js"],"names":["window","angular","undefined","module","factory","$q","$injector","$log","$url","validatedModel","model","has","warn","ApiAction","action","endpoint","extend","this","url","concat","method","prototype","hasBody","test","expectsArray","isArray","convertToModel","data","map","element","Model","get","successInterceptor","response","errorInterceptor","reject","ApiModel","fromJSON","init","forEach","value","key","isObject","toJSON","provider","defaults","baseUrl","actions","query","create","update","destroy","params","id","stripTrailingSlashes","endpoints","setBaseUrl","setDefaultActions","setDefaultParams","setDefaultModel","strip","registerEndpoint","name","config","$get","$apiEndpoint","Api","$apiAction","$apiRequest","ApiEndpoint","$config","$actions","bind","$http","isModel","isFunction","isValidDottedPath","path","lookupDottedPath","obj","Error","keys","split","i","length","combineParams","actionParams","givenParams","extractedParams","isString","charAt","substr","findUrlParams","urlParams","param","RegExp","cleanUpUrl","replace","parseUrl","t","urlParam","regex","val","hasOwnProperty","isDefined","encodedVal","encodeUriSegment","match","tail","leadingSlashes","createRequestConfig","request","stripConfigKeys","indexOf","copy","expectsModel","promise","then","raw"],"mappings":"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","file":"meanie-angular-api.min.js","sourcesContent":["(function (window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Action.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiAction', ['$q', '$injector', '$log', '$url', function $apiAction($q, $injector, $log, $url) {\n\n  /**\n   * Return validated model class\n   */\n  function validatedModel(model) {\n\n    //No model?\n    if (!model) {\n      return null;\n    }\n\n    //Validate\n    if (!$injector.has(model)) {\n      $log.warn('Unknown model class/service:', model);\n      return null;\n    }\n\n    //Return model\n    return model;\n  }\n\n  /**\n   * Constructor\n   */\n  function ApiAction(action, endpoint) {\n\n    //Set vars\n    angular.extend(this, action);\n\n    //Set full action url, model and method\n    this.url = $url.concat(endpoint.url, this.url || '');\n    this.model = this.model || endpoint.model || false;\n    this.method = this.method || 'GET';\n\n    //Validate model\n    this.model = validatedModel(this.model);\n  }\n\n  /**\n   * Has body check\n   */\n  ApiAction.prototype.hasBody = function() {\n    return /^(POST|PUT|PATCH)$/i.test(this.method);\n  };\n\n  /**\n   * Expects array check\n   */\n  ApiAction.prototype.expectsArray = function() {\n    return !!this.isArray;\n  };\n\n  /**\n   * Convert raw response data to a model\n   */\n  ApiAction.prototype.convertToModel = function(data) {\n\n    //Array given?\n    if (angular.isArray(data)) {\n      return data.map(function(element) {\n        return this.convertToModel(element);\n      }, this);\n    }\n\n    //Instantiate new model\n    var Model = $injector.get(this.model);\n    return new Model(data);\n  };\n\n  /**\n   * Default success response interceptor\n   */\n  ApiAction.prototype.successInterceptor = function(response) {\n\n    //Check if we expect an array\n    var expectsArray = this.expectsArray();\n\n    //Validate data type\n    if (angular.isArray(response.data) !== expectsArray) {\n      $log.warn(\n        'Expected', expectsArray ? 'array' : 'object',\n        'as response, got', response.data\n      );\n    }\n\n    //Initialize if empty\n    return response.data || (expectsArray ? [] : {});\n  };\n\n  /**\n   * Default error response interceptor\n   */\n  ApiAction.prototype.errorInterceptor = function(response) {\n    return $q.reject(response);\n  };\n\n  //Return factory function\n  return function(action, endpoint) {\n    return new ApiAction(action, endpoint);\n  };\n}]);\n\n})(window, window.angular);\n","(function (window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Model', [])\n\n/**\n * Model definition\n */\n.factory('$apiModel', function $apiModel() {\n\n  /**\n   * Constructor\n   */\n  function ApiModel(data) {\n    this.fromJSON(data);\n  }\n\n  /**\n   * Init\n   */\n  ApiModel.prototype.init = function() {\n    angular.forEach(this, function(value, key) {\n      delete this[key];\n    }, this);\n  };\n\n  /**\n   * From JSON converter\n   */\n  ApiModel.prototype.fromJSON = function(data) {\n\n    //Init\n    this.init();\n\n    //No data?\n    if (!angular.isObject(data)) {\n      return this;\n    }\n\n    //Load from JSON data\n    angular.forEach(data, function(value, key) {\n      this[key] = value;\n    }, this);\n\n    //Return self\n    return this;\n  };\n\n  /**\n   * To JSON converter\n   */\n  ApiModel.prototype.toJSON = function() {\n\n    //Copy our properties onto a simple object\n    var data = angular.extend({}, this);\n    return data;\n  };\n\n  //Return\n  return ApiModel;\n});\n\n})(window, window.angular);\n","(function (window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Service', [\n  'Api.Endpoint.Service',\n  'Api.Model'\n])\n\n/**\n * Provider definition\n */\n.provider('$api', function $apiProvider() {\n\n  //Defaults\n  this.defaults = {\n    baseUrl: '/',\n    actions: {\n      query: {\n        method: 'GET',\n        isArray: true\n      },\n      get: {\n        method: 'GET'\n      },\n      create: {\n        method: 'POST'\n      },\n      update: {\n        method: 'PUT'\n      },\n      destroy: {\n        method: 'DELETE'\n      }\n    },\n    params: {\n      id: '@id'\n    },\n    model: '$apiModel',\n    stripTrailingSlashes: true\n  };\n\n  //Registered endpoints\n  this.endpoints = {};\n\n  /**\n   * Set base URL\n   */\n  this.setBaseUrl = function(url) {\n    this.defaults.baseUrl = url;\n    return this;\n  };\n\n  /**\n   * Set default actions\n   */\n  this.setDefaultActions = function(actions) {\n    this.defaults.actions = actions || {};\n    return this;\n  };\n\n  /**\n   * Set default params\n   */\n  this.setDefaultParams = function(params) {\n    this.defaults.params = params || {};\n    return this;\n  };\n\n  /**\n   * Set default model\n   */\n  this.setDefaultModel = function(model) {\n    this.defaults.model = model || false;\n    return this;\n  };\n\n  /**\n   * Strip trailing slashes behaviour\n   */\n  this.stripTrailingSlashes = function(strip) {\n    this.defaults.stripTrailingSlashes = !!strip;\n    return this;\n  };\n\n  /**\n   * Register endpoint\n   */\n  this.registerEndpoint = function(name, config) {\n    if (name) {\n      this.endpoints[name] = config || {};\n    }\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = ['$injector', '$log', '$apiEndpoint', function($injector, $log, $apiEndpoint) {\n\n    //Initialize API interface\n    var Api = function(endpoint) {\n      return this[endpoint];\n    };\n\n    //Append all endpoints\n    angular.forEach(this.endpoints, function(config, name) {\n\n      //Warn if overwriting\n      if (Api[name]) {\n        $log.warn('API endpoint', name, 'is being overwritten.');\n      }\n\n      //Extend endpoint config with defaults and initialize it\n      config = angular.extend({}, this.defaults, config);\n      Api[name] = $apiEndpoint(name, config);\n    }, this);\n\n    //Return\n    return Api;\n  }];\n});\n\n})(window, window.angular);\n","(function (window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Endpoint.Service', [\n  'Api.Action.Service',\n  'Api.Request.Service',\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiEndpoint', ['$url', '$apiAction', '$apiRequest', function $apiEndpoint($url, $apiAction, $apiRequest) {\n\n  /**\n   * Constructor\n   */\n  function ApiEndpoint(name, config) {\n\n    //Determine full URL of endpoint\n    config.url = $url.concat(config.baseUrl, config.url || $url.concat(name, ':id'));\n    config.actions = config.actions || {};\n\n    //Expose config and actions container\n    this.$config = config;\n    this.$actions = {};\n\n    //Create action instances and bind request method to action key on endpoint\n    angular.forEach(config.actions, function(action, key) {\n      this.$actions[key] = $apiAction(action || {}, config);\n      this[key] = angular.bind(this, $apiRequest, this.$actions[key]);\n    }, this);\n  }\n\n  //Return factory function\n  return function(name, config) {\n    return new ApiEndpoint(name, config);\n  };\n}]);\n\n})(window, window.angular);\n","(function (window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Request.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiRequest', ['$http', '$url', function $apiRequest($http, $url) {\n\n  /**\n   * Check if a data object is a model\n   */\n  function isModel(data) {\n    return angular.isObject(data) && angular.isFunction(data.toJSON);\n  }\n\n  /**\n   * Check if dotted path is valid\n   */\n  function isValidDottedPath(path) {\n    return (\n      path && path !== 'hasOwnProperty' && /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test('.' + path)\n    );\n  }\n\n  /**\n   * Lookup dotted path in an object\n   */\n  function lookupDottedPath(obj, path) {\n\n    //Check if valid\n    if (!isValidDottedPath(path)) {\n      throw new Error('Invalid dotted path:' + path);\n    }\n\n    //Split path in object keys to traverse\n    var keys = path.split('.');\n    for (var i = 0; i < keys.length && obj !== undefined; i++) {\n      var key = keys[i];\n      obj = (obj !== null) ? obj[key] : undefined;\n    }\n\n    //Return reference\n    return obj;\n  }\n\n  /**\n   * Combine given params with extracted params from data\n   */\n  function combineParams(actionParams, givenParams, data) {\n\n    //Extract data params from action params\n    var extractedParams = {};\n    angular.forEach(actionParams || {}, function(value, key) {\n\n      //Function? Call now\n      if (angular.isFunction(value)) {\n        value = value();\n      }\n\n      //String value with @ identifier? Look up in data\n      if (angular.isString(value) && value.charAt(0) === '@') {\n        value = lookupDottedPath(data, value.substr(1));\n      }\n\n      //Set value\n      extractedParams[key] = value;\n    });\n\n    //Extend with given params\n    return angular.extend(extractedParams, givenParams || {});\n  }\n\n  /**\n   * Find URL params\n   */\n  function findUrlParams(url) {\n    var urlParams = {};\n    angular.forEach(url.split(/\\W/), function(param) {\n\n      //Filter hasOwnProperty\n      if (param === 'hasOwnProperty') {\n        throw new Error('Invalid parameter name: hasOwnProperty');\n      }\n\n      //Find all valid url params (have value, non digit)\n      if (param && !(/^\\\\d+$/.test(param))) {\n        if (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url)) {\n          urlParams[param] = true;\n        }\n      }\n    });\n    return urlParams;\n  }\n\n  /**\n   * Clean up URL\n   */\n  function cleanUpUrl(url, stripTrailingSlashes) {\n\n    //Strip trailing slashes if needed\n    if (stripTrailingSlashes) {\n      url = url.replace(/\\/+$/, '') || '/';\n    }\n\n    //Replace collapsed `/.` if found in the last URL path segment before the query\n    //E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`\n    return url\n      .replace(/\\/\\.(?=\\w+($|\\?))/, '.')\n      .replace(/\\/\\\\\\./, '/.');\n  }\n\n  /**\n   * Parse URL\n   */\n  function parseUrl(url, params, urlParams, stripTrailingSlashes) {\n\n    //Replace escaped \\:\n    url = url.replace(/\\\\:/g, ':');\n\n    //Loop the valid URL params now\n    angular.forEach(urlParams, function(t, urlParam) {\n\n      //Extract value for this url param from given params\n      var val = params.hasOwnProperty(urlParam) ? params[urlParam] : null;\n      var regex;\n\n      //If defined and not null, encode it and replace in URL\n      if (angular.isDefined(val) && val !== null) {\n        var encodedVal = $url.encodeUriSegment(val);\n        regex = new RegExp(':' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, function(match, tail) {\n          return encodedVal + tail;\n        });\n      }\n\n      //Otherwise, remove from URL\n      else {\n        regex = new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, function(match, leadingSlashes, tail) {\n          if (tail.charAt(0) === '/') {\n            return tail;\n          }\n          else {\n            return leadingSlashes + tail;\n          }\n        });\n      }\n    });\n\n    //Return cleaned up URL\n    return cleanUpUrl(url, stripTrailingSlashes);\n  }\n\n  /**\n   * Create request config\n   */\n  function createRequestConfig(action, params, data) {\n\n    //Initialize\n    var request = {};\n    var stripConfigKeys = [\n      'params', 'model', 'isArray', 'stripTrailingSlashes',\n      'successInterceptor', 'errorInterceptor'\n    ];\n\n    //Map action config to http request config\n    angular.forEach(action, function(value, key) {\n      if (stripConfigKeys.indexOf(key) === -1) {\n        request[key] = angular.copy(value);\n      }\n    });\n\n    //Append data if we have a body\n    if (action.hasBody() && data) {\n      if (isModel(data)) {\n        data = data.toJSON();\n      }\n      request.data = data;\n    }\n\n    //Combine params out of given params and data and find URL params\n    params = combineParams(action.params, params, data);\n    var urlParams = findUrlParams(request.url);\n\n    //Parse URL\n    request.url = parseUrl(action.url, params, urlParams, action.stripTrailingSlashes);\n\n    //Set remaining given non-url params as query params, delegate param encoding to $http\n    angular.forEach(params, function(value, key) {\n      if (!urlParams[key]) {\n        request.params = request.params || {};\n        request.params[key] = value;\n      }\n    });\n\n    //Return\n    return request;\n  }\n\n  /**\n   * Api request executer\n   */\n  return function ApiRequest(action, params, data) {\n\n    //Parameter juggling\n    if (action.hasBody() && params && !data) {\n      data = params;\n      params = null;\n    }\n\n    //Create request config\n    var request = createRequestConfig(action, params, data);\n    var expectsModel = action.model && /^(GET|POST|PUT|PATCH)$/i.test(action.method);\n\n    //Use $http to do the request and intercept the response\n    var promise = $http(request).then(\n      action.successInterceptor.bind(action),\n      action.errorInterceptor.bind(action)\n    );\n\n    //Then handle the raw data\n    return promise.then(function(raw) {\n      if (action.hasBody() && isModel(data)) {\n        return data.fromJSON(raw);\n      }\n      else if (expectsModel) {\n        return action.convertToModel(raw);\n      }\n      return raw;\n    });\n  };\n}]);\n\n})(window, window.angular);\n",null],"sourceRoot":"/source/"}