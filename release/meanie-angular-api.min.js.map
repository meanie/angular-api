{"version":3,"sources":["meanie-angular-api.min.js","action.service.js","api.service.js","baseModel.service.js","endpoint.service.js","request.service.js"],"names":["_typeof","Symbol","iterator","obj","constructor","window","angular","undefined","module","factory","$q","$injector","$log","$url","validatedModel","model","has","warn","ApiAction","action","endpoint","extend","this","url","concat","method","enforceDataFormat","params","prototype","hasBody","test","expectsArray","Boolean","isArray","expectsModel","isModel","convertToModel","data","_this","map","Model","get","successInterceptor","response","errorInterceptor","reject","provider","defaults","verbose","baseUrl","actions","query","create","update","delete","id","stripTrailingSlashes","endpoints","setVerbose","setBaseUrl","replace","setEnforceDataFormat","enforce","setDefaultActions","setDefaultParams","setDefaultModel","setConfig","param","value","strip","registerEndpoint","name","config","$get","$apiEndpoint","Api","forEach","info","$window","dateStringToMoment","regex","match","date","moment","ISO_8601","isValid","copyProperty","key","_ret","arr","v","isFunction","clone","copy","$baseModel","fromJSON","allowEmpty","isString","isId","json","isObject","valueFromJSON","toJSON","valueToJSON","hasOwnProperty","extract","properties","_this2","length","merge","_this3","clear","stripId","ModelClass","prop","onlyId","_len","arguments","keys","Array","_key","apply","includes","str","$apiAction","$apiRequest","ApiEndpoint","$config","$actions","bind","$http","isValidDottedPath","path","lookupDottedPath","Error","split","i","combineParams","actionParams","givenParams","extractedParams","charAt","substr","findUrlParams","urlParams","RegExp","cleanUpUrl","parseUrl","t","urlParam","val","isDefined","encodedVal","encodeUriSegment","tail","leadingSlashes","createRequestConfig","request","stripConfigKeys","indexOf","promise","then","raw"],"mappings":"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","file":"meanie-angular-api.min.js","sourcesContent":["/**\n * meanie-angular-api - v1.12.0 - 8-6-2016\n * https://github.com/meanie/angular-api\n *\n * Copyright (c) 2016 Adam Buczynski <me@adambuczynski.com>\n * License: MIT\n */\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Action.Service', ['Url.Service'])\n\n  /**\n   * Factory definition\n   */\n  .factory('$apiAction', ['$q', '$injector', '$log', '$url', function $apiAction($q, $injector, $log, $url) {\n\n    /**\n     * Return validated model class\n     */\n    function validatedModel(model) {\n\n      //No model?\n      if (!model) {\n        return null;\n      }\n\n      //Validate\n      if (!$injector.has(model)) {\n        $log.warn('Unknown model class/service:', model);\n        return null;\n      }\n\n      //Return model\n      return model;\n    }\n\n    /**\n     * Constructor\n     */\n    function ApiAction(action, endpoint) {\n\n      //Set vars\n      angular.extend(this, action);\n\n      //Set full action url, model and method\n      this.url = $url.concat(endpoint.url, this.url || '');\n      this.model = this.model || endpoint.model || false;\n      this.method = this.method || 'GET';\n      this.enforceDataFormat = endpoint.enforceDataFormat || false;\n\n      //Determine params\n      if (typeof this.params === 'undefined') {\n        this.params = endpoint.params;\n      }\n\n      //Normalize\n      this.params = this.params || {};\n\n      //Validate model\n      this.model = validatedModel(this.model);\n    }\n\n    /**\n     * Has body check\n     */\n    ApiAction.prototype.hasBody = function () {\n      return (/^(POST|PUT|PATCH)$/i.test(this.method)\n      );\n    };\n\n    /**\n     * Expects array check\n     */\n    ApiAction.prototype.expectsArray = function () {\n      return Boolean(this.isArray);\n    };\n\n    /**\n     * Expects model check\n     */\n    ApiAction.prototype.expectsModel = function () {\n      return this.model && Boolean(this.isModel);\n    };\n\n    /**\n     * Convert raw response data to a model\n     */\n    ApiAction.prototype.convertToModel = function (data) {\n      var _this = this;\n\n      //Array given?\n      if (angular.isArray(data)) {\n        return data.map(function (data) {\n          return _this.convertToModel(data);\n        });\n      }\n\n      //Get model class and return model instance\n      var Model = $injector.get(this.model);\n      return new Model(data);\n    };\n\n    /**\n     * Default success response interceptor\n     */\n    ApiAction.prototype.successInterceptor = function (response) {\n\n      //Check if we expect an array\n      var expectsArray = this.expectsArray();\n      var isArray = angular.isArray(response.data);\n\n      //Validate data type\n      if (isArray !== expectsArray) {\n\n        //Issue warning\n        $log.warn('Expected', expectsArray ? 'array' : 'object', 'as response, got', isArray ? 'array' : _typeof(response.data));\n\n        //Enforce data format?\n        if (this.enforceDataFormat) {\n          response.data = expectsArray ? [] : {};\n        }\n      }\n\n      //Initialize if empty\n      return response.data || (expectsArray ? [] : {});\n    };\n\n    /**\n     * Default error response interceptor\n     */\n    ApiAction.prototype.errorInterceptor = function (response) {\n      return $q.reject(response);\n    };\n\n    //Return factory function\n    return function (action, endpoint) {\n      return new ApiAction(action, endpoint);\n    };\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Service', ['Api.Endpoint.Service'])\n\n  /**\n   * Provider definition\n   */\n  .provider('$api', function $apiProvider() {\n\n    //Defaults\n    this.defaults = {\n      verbose: false,\n      enforceDataFormat: false,\n      baseUrl: '/',\n      actions: {\n        query: {\n          method: 'GET',\n          isArray: true,\n          isModel: true\n        },\n        get: {\n          method: 'GET',\n          isModel: true\n        },\n        create: {\n          method: 'POST'\n        },\n        update: {\n          method: 'PUT'\n        },\n        delete: {\n          method: 'DELETE'\n        }\n      },\n      params: {\n        id: '@id'\n      },\n      model: '',\n      stripTrailingSlashes: true\n    };\n\n    //Registered endpoints\n    this.endpoints = {};\n\n    /**\n     * Set verbose\n     */\n    this.setVerbose = function (verbose) {\n      this.defaults.verbose = !!verbose;\n      return this;\n    };\n\n    /**\n     * Set base URL\n     */\n    this.setBaseUrl = function (url) {\n      //TODO: the replacement is protecting port numbers from later becoming\n      //removed on account of the request service url parsing thinking it's a\n      //parameter. The code there should be updated to prevent port replacement,\n      //rather than \"protecting\" it in this manner here.\n      this.defaults.baseUrl = url.replace(/:([0-9]+)/, '\\\\:$1');\n      return this;\n    };\n\n    /**\n     * Set data format enforcing\n     */\n    this.setEnforceDataFormat = function (enforce) {\n      this.defaults.enforceDataFormat = !!enforce;\n      return this;\n    };\n\n    /**\n     * Set default actions\n     */\n    this.setDefaultActions = function (actions) {\n      this.defaults.actions = actions || {};\n      return this;\n    };\n\n    /**\n     * Set default params\n     */\n    this.setDefaultParams = function (params) {\n      this.defaults.params = params || {};\n      return this;\n    };\n\n    /**\n     * Set default model\n     */\n    this.setDefaultModel = function (model) {\n      this.defaults.model = model || false;\n      return this;\n    };\n\n    /**\n     * Set a generic config parameter (use only for config params that you\n     * want to pass on to the $http service)\n     */\n    this.setConfig = function (param, value) {\n      this.defaults[param] = value;\n      return this;\n    };\n\n    /**\n     * Strip trailing slashes behaviour\n     */\n    this.stripTrailingSlashes = function (strip) {\n      this.defaults.stripTrailingSlashes = !!strip;\n      return this;\n    };\n\n    /**\n     * Register endpoint\n     */\n    this.registerEndpoint = function (name, config) {\n      if (name) {\n        this.endpoints[name] = config || {};\n      }\n      return this;\n    };\n\n    /**\n     * Service getter\n     */\n    this.$get = ['$log', '$apiEndpoint', function ($log, $apiEndpoint) {\n      var _this = this;\n\n      //Initialize API interface\n      var Api = function Api(endpoint) {\n        return this[endpoint];\n      };\n\n      //Append all endpoints\n      angular.forEach(this.endpoints, function (config, name) {\n\n        //Warn if overwriting\n        if (Api[name]) {\n          $log.warn('API endpoint', name, 'is being overwritten.');\n        }\n\n        //Extend endpoint config with defaults\n        config = angular.extend({}, _this.defaults, config);\n        if (config.verbose) {\n          $log.info('API endpoint', name + ':', config);\n        }\n\n        //Initialize endpoint\n        Api[name] = $apiEndpoint(name, config);\n      });\n\n      //Return\n      return Api;\n    }];\n  });\n})(window, window.angular);\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('BaseModel.Service', [])\n\n  /**\n   * Model definition\n   */\n  .factory('$baseModel', ['$window', '$log', '$injector', function ($window, $log, $injector) {\n\n    //See if we have the moment service available to us\n    var moment = void 0;\n    if ($injector.has('moment')) {\n      moment = $injector.get('moment');\n    } else if (typeof $window.moment !== 'undefined') {\n      moment = $window.moment;\n    }\n\n    /**\n     * Check if given string is a ISO 8601 date string,\n     * Returns a moment if it is and null if it's not\n     */\n    function dateStringToMoment(value) {\n      var regex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2}).*/;\n      if (value.match(regex)) {\n        var date = moment(value, moment.ISO_8601, true);\n        if (date.isValid()) {\n          return date;\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Copy a property\n     */\n    function copyProperty(obj, key) {\n      if (angular.isArray(obj[key])) {\n        var _ret = function () {\n          var arr = obj[key];\n          return {\n            v: arr.map(function (value, key) {\n              return copyProperty(arr, key);\n            })\n          };\n        }();\n\n        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n      }\n      if (obj[key] && angular.isFunction(obj[key].clone)) {\n        return obj[key].clone();\n      }\n      return angular.copy(obj[key]);\n    }\n\n    /**\n     * Constructor\n     */\n    function $baseModel(data) {\n      this.fromJSON(data);\n    }\n\n    /**************************************************************************\n     * Helper methods\n     ***/\n\n    /**\n     * Convert a property to a model\n     */\n    $baseModel.prototype.convertToModel = function (key, Model, isArray, allowEmpty) {\n\n      //Paremeter shuffling\n      if (typeof Model === 'boolean') {\n        isArray = Model;\n        Model = null;\n      }\n\n      //If undefined, check what we were expecting\n      if (typeof this[key] === 'undefined') {\n        if (isArray) {\n          this[key] = [];\n        } else {\n          this[key] = null;\n        }\n      }\n\n      //If no model specified, we're done\n      if (!Model) {\n        return;\n      }\n\n      //Empty and allowed empty?\n      if (!this[key] && allowEmpty) {\n        return;\n      }\n\n      //String specified, use injector\n      if (typeof Model === 'string') {\n        if (!$injector.has(Model)) {\n          return $log.warn('Unknown model', Model, 'specified for sub model conversion');\n        }\n        Model = $injector.get(Model);\n      }\n\n      //Get model class and initiate\n      if (angular.isArray(this[key])) {\n        this[key] = this[key].map(function (data) {\n          return new Model(data);\n        });\n      } else if (angular.isString(this[key]) && $baseModel.isId(this[key])) {\n        this[key] = new Model({ id: this[key] });\n      } else {\n        this[key] = new Model(this[key]);\n      }\n    };\n\n    /**\n     * From JSON converter\n     */\n    $baseModel.prototype.fromJSON = function (json) {\n      var _this = this;\n\n      if (angular.isObject(json)) {\n        angular.forEach(json, function (value, key) {\n          _this[key] = $baseModel.valueFromJSON(value);\n        }, this);\n      }\n      return this;\n    };\n\n    /**\n     * To JSON converter\n     */\n    $baseModel.prototype.toJSON = function (data) {\n      var json = {};\n      if (data && angular.isObject(data)) {\n        angular.forEach(data, function (value, key) {\n          json[key] = $baseModel.valueToJSON(value);\n        });\n      }\n      angular.forEach(this, function (value, key) {\n        if (!json.hasOwnProperty(key)) {\n          json[key] = $baseModel.valueToJSON(value);\n        }\n      });\n      return json;\n    };\n\n    /**\n     * Extract a subset of data from the model\n     */\n    $baseModel.prototype.extract = function (properties) {\n      var _this2 = this;\n\n      //Initialize object\n      var obj = {};\n\n      //No properties given? Iterate all object properties\n      if (!angular.isArray(properties) || !properties.length) {\n        angular.forEach(this, function (value, key) {\n          obj[key] = copyProperty(_this2, key);\n        });\n      } else {\n        angular.forEach(properties, function (key) {\n          obj[key] = copyProperty(_this2, key);\n        });\n      }\n\n      //Return resulting object\n      return obj;\n    };\n\n    /**\n     * Merge a set of data into the model\n     */\n    $baseModel.prototype.merge = function (data) {\n      var _this3 = this;\n\n      if (data && angular.isObject(data)) {\n        angular.forEach(data, function (value, key) {\n          _this3[key] = copyProperty(data, key);\n        });\n      }\n    };\n\n    /**\n     * Clear own properties\n     */\n    $baseModel.prototype.clear = function () {\n      for (var key in this) {\n        if (this.hasOwnProperty(key)) {\n          delete this[key];\n        }\n      }\n    };\n\n    /**\n     * Clone\n     */\n    $baseModel.prototype.clone = function (stripId) {\n      var ModelClass = this.constructor;\n      var clone = new ModelClass(this.extract());\n      if (clone.id && stripId) {\n        delete clone.id;\n      }\n      return clone;\n    };\n\n    /**\n     * Copy a property\n     */\n    $baseModel.prototype.copyProperty = function (obj, key) {\n      if (this[key] && angular.isFunction(this[key].clone)) {\n        obj[key] = this[key].clone();\n      } else {\n        obj[key] = angular.copy(this[key]);\n      }\n    };\n\n    /**************************************************************************\n     * Static methods\n     ***/\n\n    /**\n     * Helper to convert a value from JSON\n     */\n    $baseModel.valueFromJSON = function (value) {\n      if (angular.isArray(value)) {\n        return value.map($baseModel.valueFromJSON);\n      } else if (moment && angular.isString(value)) {\n        var date = dateStringToMoment(value);\n        return date || value;\n      }\n      return angular.copy(value);\n    };\n\n    /**\n    * Helper to convert a value to JSON\n    */\n    $baseModel.valueToJSON = function (value) {\n      if (angular.isArray(value)) {\n        return value.map($baseModel.valueToJSON);\n      } else if (value && angular.isObject(value)) {\n        if (angular.isFunction(value.toJSON)) {\n          return value.toJSON();\n        }\n        var copy = {};\n        for (var prop in value) {\n          if (value.hasOwnProperty(prop)) {\n            copy[prop] = $baseModel.valueToJSON(value[prop]);\n          }\n        }\n        return copy;\n      }\n      return value;\n    };\n\n    /**\n     * Strip object to only ID\n     */\n    $baseModel.onlyId = function (obj) {\n      if (angular.isArray(obj)) {\n        return obj.map($baseModel.onlyId);\n      }\n      if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || !obj.id) {\n        return obj;\n      }\n      return obj.id;\n    };\n\n    /**\n     * Strip a given object to specific keys\n     */\n    $baseModel.strip = function (obj) {\n      for (var _len = arguments.length, keys = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        keys[_key - 1] = arguments[_key];\n      }\n\n      if (angular.isArray(obj)) {\n        return obj.map(function (obj) {\n          return $baseModel.strip.apply($baseModel, [obj].concat(keys));\n        });\n      }\n      if (!obj || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') {\n        return obj;\n      }\n      angular.forEach(obj, function (value, key) {\n        if (!keys.includes(key)) {\n          delete obj[key];\n        }\n      });\n      return obj;\n    };\n\n    /**\n     * Test for MongoDB object ID\n     */\n    $baseModel.isId = function (str) {\n      return str.match(/^[a-f\\d]{24}$/i);\n    };\n\n    //Return\n    return $baseModel;\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Endpoint.Service', ['Api.Action.Service', 'Api.Request.Service', 'Url.Service'])\n\n  /**\n   * Factory definition\n   */\n  .factory('$apiEndpoint', ['$url', '$apiAction', '$apiRequest', function $apiEndpoint($url, $apiAction, $apiRequest) {\n\n    /**\n     * Constructor\n     */\n    function ApiEndpoint(name, config) {\n      var _this = this;\n\n      //Determine full URL of endpoint\n      config.actions = config.actions || {};\n      config.url = $url.concat(config.baseUrl, config.url || $url.concat(name, ':id'));\n\n      //Expose config and actions container\n      this.$config = config;\n      this.$actions = {};\n\n      //Create action instances and bind request method to action key on endpoint\n      angular.forEach(config.actions, function (action, key) {\n        _this.$actions[key] = $apiAction(action || {}, config);\n        _this[key] = angular.bind(_this, $apiRequest, _this.$actions[key]);\n      });\n    }\n\n    //Return factory function\n    return function (name, config) {\n      return new ApiEndpoint(name, config);\n    };\n  }]);\n})(window, window.angular);\n'use strict';\n\n(function (window, angular, undefined) {\n  'use strict';\n\n  /**\n   * Module definition and dependencies\n   */\n\n  angular.module('Api.Request.Service', ['Url.Service'])\n\n  /**\n   * Factory definition\n   */\n  .factory('$apiRequest', ['$http', '$url', function $apiRequest($http, $url) {\n\n    /**\n     * Check if dotted path is valid\n     */\n    function isValidDottedPath(path) {\n      return path && path !== 'hasOwnProperty' && /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test('.' + path);\n    }\n\n    /**\n     * Lookup dotted path in an object\n     */\n    function lookupDottedPath(obj, path) {\n\n      //Check if valid\n      if (!isValidDottedPath(path)) {\n        throw new Error('Invalid dotted path:' + path);\n      }\n\n      //Split path in object keys to traverse\n      var keys = path.split('.');\n      for (var i = 0; i < keys.length && obj !== undefined; i++) {\n        var key = keys[i];\n        obj = obj !== null ? obj[key] : undefined;\n      }\n\n      //Return reference\n      return obj;\n    }\n\n    /**\n     * Combine given params with extracted params from data\n     */\n    function combineParams(actionParams, givenParams, data) {\n\n      //Extract data params from action params\n      var extractedParams = {};\n      angular.forEach(actionParams || {}, function (value, key) {\n\n        //Function? Call now\n        if (angular.isFunction(value)) {\n          value = value();\n        }\n\n        //String value with @ identifier? Look up in data\n        if (angular.isString(value) && value.charAt(0) === '@') {\n          value = lookupDottedPath(data, value.substr(1));\n        }\n\n        //Set value\n        extractedParams[key] = value;\n      });\n\n      //Extend with given params\n      return angular.extend(extractedParams, givenParams || {});\n    }\n\n    /**\n     * Find URL params\n     */\n    function findUrlParams(url) {\n      var urlParams = {};\n      angular.forEach(url.split(/\\W/), function (param) {\n\n        //Filter hasOwnProperty\n        if (param === 'hasOwnProperty') {\n          throw new Error('Invalid parameter name: hasOwnProperty');\n        }\n\n        //Find all valid url params (have value, non digit)\n        if (param && !/^\\\\d+$/.test(param)) {\n          if (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url)) {\n            urlParams[param] = true;\n          }\n        }\n      });\n      return urlParams;\n    }\n\n    /**\n     * Clean up URL\n     */\n    function cleanUpUrl(url, stripTrailingSlashes) {\n\n      //Strip trailing slashes if needed\n      if (stripTrailingSlashes) {\n        url = url.replace(/\\/+$/, '') || '/';\n      }\n\n      //Replace collapsed `/.` if found in the last URL path segment before\n      //the query, e.g. `http://url.com/id./format?q=x` becomes\n      //`http://url.com/id.format?q=x`\n      return url.replace(/\\/\\.(?=\\w+($|\\?))/, '.').replace(/\\/\\\\\\./, '/.');\n    }\n\n    /**\n     * Parse URL\n     */\n    function parseUrl(url, params, urlParams, stripTrailingSlashes) {\n\n      //Replace escaped \\:\n      url = url.replace(/\\\\:/g, ':');\n\n      //Loop the valid URL params now\n      angular.forEach(urlParams, function (t, urlParam) {\n\n        //Extract value for this url param from given params\n        var val = params.hasOwnProperty(urlParam) ? params[urlParam] : null;\n        var regex = void 0;\n\n        //If defined and not null, encode it and replace in URL\n        if (angular.isDefined(val) && val !== null) {\n          (function () {\n            var encodedVal = $url.encodeUriSegment(val);\n            regex = new RegExp(':' + urlParam + '(\\\\W|$)', 'g');\n            url = url.replace(regex, function (match, tail) {\n              return encodedVal + tail;\n            });\n          })();\n        }\n\n        //Otherwise, remove from URL\n        else {\n            regex = new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g');\n            url = url.replace(regex, function (match, leadingSlashes, tail) {\n              if (tail.charAt(0) === '/') {\n                return tail;\n              } else {\n                return leadingSlashes + tail;\n              }\n            });\n          }\n      });\n\n      //Return cleaned up URL\n      return cleanUpUrl(url, stripTrailingSlashes);\n    }\n\n    /**\n     * Create request config\n     */\n    function createRequestConfig(action, params, data) {\n\n      //Initialize\n      var request = {};\n      var stripConfigKeys = ['params', 'model', 'isArray', 'isModel', 'successInterceptor', 'errorInterceptor', 'stripTrailingSlashes'];\n\n      //Map action config to http request config\n      angular.forEach(action, function (value, key) {\n        if (stripConfigKeys.indexOf(key) === -1) {\n          request[key] = angular.copy(value);\n        }\n      });\n\n      //Append data if we have a body\n      if (action.hasBody() && data && angular.isObject(data)) {\n        if (angular.isFunction(data.toJSON)) {\n          request.data = data.toJSON();\n        } else if (angular.isArray(data)) {\n          request.data = data;\n        } else {\n          request.data = angular.extend({}, data);\n        }\n      }\n\n      //Process params\n      if (params && angular.isObject(params)) {\n        for (var key in params) {\n          if (params.hasOwnProperty(key) && angular.isObject(params[key])) {\n            if (angular.isFunction(params[key].toJSON)) {\n              params[key] = params[key].toJSON();\n            }\n          }\n        }\n      }\n\n      //Combine params out of given params and data and find URL params\n      params = combineParams(action.params, params, data);\n      var urlParams = findUrlParams(request.url);\n\n      //Parse URL\n      request.url = parseUrl(action.url, params, urlParams, action.stripTrailingSlashes);\n\n      //Set remaining given non-url params as query params,\n      //delegate param encoding to $http\n      angular.forEach(params, function (value, key) {\n        if (!urlParams[key]) {\n          request.params = request.params || {};\n          request.params[key] = value;\n        }\n      });\n\n      //Return\n      return request;\n    }\n\n    /**\n     * Api request executer\n     */\n    return function ApiRequest(action, params, data) {\n\n      //Parameter juggling\n      if (action.hasBody() && params && !data) {\n        data = params;\n        params = null;\n      }\n\n      //Create request config and use $http to do the request\n      //and intercept the response\n      var request = createRequestConfig(action, params, data);\n      var promise = $http(request).then(action.successInterceptor.bind(action), action.errorInterceptor.bind(action));\n\n      //Then handle the raw data\n      return promise.then(function (raw) {\n        if (action.expectsModel()) {\n          return action.convertToModel(raw);\n        }\n        return raw;\n      });\n    };\n  }]);\n})(window, window.angular);","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Action.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiAction', function $apiAction($q, $injector, $log, $url) {\n\n  /**\n   * Return validated model class\n   */\n  function validatedModel(model) {\n\n    //No model?\n    if (!model) {\n      return null;\n    }\n\n    //Validate\n    if (!$injector.has(model)) {\n      $log.warn('Unknown model class/service:', model);\n      return null;\n    }\n\n    //Return model\n    return model;\n  }\n\n  /**\n   * Constructor\n   */\n  function ApiAction(action, endpoint) {\n\n    //Set vars\n    angular.extend(this, action);\n\n    //Set full action url, model and method\n    this.url = $url.concat(endpoint.url, this.url || '');\n    this.model = this.model || endpoint.model || false;\n    this.method = this.method || 'GET';\n    this.enforceDataFormat = endpoint.enforceDataFormat || false;\n\n    //Determine params\n    if (typeof this.params === 'undefined') {\n      this.params = endpoint.params;\n    }\n\n    //Normalize\n    this.params = this.params || {};\n\n    //Validate model\n    this.model = validatedModel(this.model);\n  }\n\n  /**\n   * Has body check\n   */\n  ApiAction.prototype.hasBody = function() {\n    return /^(POST|PUT|PATCH)$/i.test(this.method);\n  };\n\n  /**\n   * Expects array check\n   */\n  ApiAction.prototype.expectsArray = function() {\n    return Boolean(this.isArray);\n  };\n\n  /**\n   * Expects model check\n   */\n  ApiAction.prototype.expectsModel = function() {\n    return (this.model && Boolean(this.isModel));\n  };\n\n  /**\n   * Convert raw response data to a model\n   */\n  ApiAction.prototype.convertToModel = function(data) {\n\n    //Array given?\n    if (angular.isArray(data)) {\n      return data.map(data => this.convertToModel(data));\n    }\n\n    //Get model class and return model instance\n    let Model = $injector.get(this.model);\n    return new Model(data);\n  };\n\n  /**\n   * Default success response interceptor\n   */\n  ApiAction.prototype.successInterceptor = function(response) {\n\n    //Check if we expect an array\n    let expectsArray = this.expectsArray();\n    let isArray = angular.isArray(response.data);\n\n    //Validate data type\n    if (isArray !== expectsArray) {\n\n      //Issue warning\n      $log.warn(\n        'Expected', expectsArray ? 'array' : 'object',\n        'as response, got', isArray ? 'array' : (typeof response.data)\n      );\n\n      //Enforce data format?\n      if (this.enforceDataFormat) {\n        response.data = (expectsArray ? [] : {});\n      }\n    }\n\n    //Initialize if empty\n    return response.data || (expectsArray ? [] : {});\n  };\n\n  /**\n   * Default error response interceptor\n   */\n  ApiAction.prototype.errorInterceptor = function(response) {\n    return $q.reject(response);\n  };\n\n  //Return factory function\n  return function(action, endpoint) {\n    return new ApiAction(action, endpoint);\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Service', [\n  'Api.Endpoint.Service'\n])\n\n/**\n * Provider definition\n */\n.provider('$api', function $apiProvider() {\n\n  //Defaults\n  this.defaults = {\n    verbose: false,\n    enforceDataFormat: false,\n    baseUrl: '/',\n    actions: {\n      query: {\n        method: 'GET',\n        isArray: true,\n        isModel: true\n      },\n      get: {\n        method: 'GET',\n        isModel: true\n      },\n      create: {\n        method: 'POST'\n      },\n      update: {\n        method: 'PUT'\n      },\n      delete: {\n        method: 'DELETE'\n      }\n    },\n    params: {\n      id: '@id'\n    },\n    model: '',\n    stripTrailingSlashes: true\n  };\n\n  //Registered endpoints\n  this.endpoints = {};\n\n  /**\n   * Set verbose\n   */\n  this.setVerbose = function(verbose) {\n    this.defaults.verbose = !!verbose;\n    return this;\n  };\n\n  /**\n   * Set base URL\n   */\n  this.setBaseUrl = function(url) {\n    //TODO: the replacement is protecting port numbers from later becoming\n    //removed on account of the request service url parsing thinking it's a\n    //parameter. The code there should be updated to prevent port replacement,\n    //rather than \"protecting\" it in this manner here.\n    this.defaults.baseUrl = url.replace(/:([0-9]+)/, '\\\\:$1');\n    return this;\n  };\n\n  /**\n   * Set data format enforcing\n   */\n  this.setEnforceDataFormat = function(enforce) {\n    this.defaults.enforceDataFormat = !!enforce;\n    return this;\n  };\n\n  /**\n   * Set default actions\n   */\n  this.setDefaultActions = function(actions) {\n    this.defaults.actions = actions || {};\n    return this;\n  };\n\n  /**\n   * Set default params\n   */\n  this.setDefaultParams = function(params) {\n    this.defaults.params = params || {};\n    return this;\n  };\n\n  /**\n   * Set default model\n   */\n  this.setDefaultModel = function(model) {\n    this.defaults.model = model || false;\n    return this;\n  };\n\n  /**\n   * Set a generic config parameter (use only for config params that you\n   * want to pass on to the $http service)\n   */\n  this.setConfig = function(param, value) {\n    this.defaults[param] = value;\n    return this;\n  };\n\n  /**\n   * Strip trailing slashes behaviour\n   */\n  this.stripTrailingSlashes = function(strip) {\n    this.defaults.stripTrailingSlashes = !!strip;\n    return this;\n  };\n\n  /**\n   * Register endpoint\n   */\n  this.registerEndpoint = function(name, config) {\n    if (name) {\n      this.endpoints[name] = config || {};\n    }\n    return this;\n  };\n\n  /**\n   * Service getter\n   */\n  this.$get = function($log, $apiEndpoint) {\n\n    //Initialize API interface\n    let Api = function(endpoint) {\n      return this[endpoint];\n    };\n\n    //Append all endpoints\n    angular.forEach(this.endpoints, (config, name) => {\n\n      //Warn if overwriting\n      if (Api[name]) {\n        $log.warn('API endpoint', name, 'is being overwritten.');\n      }\n\n      //Extend endpoint config with defaults\n      config = angular.extend({}, this.defaults, config);\n      if (config.verbose) {\n        $log.info('API endpoint', name + ':', config);\n      }\n\n      //Initialize endpoint\n      Api[name] = $apiEndpoint(name, config);\n    });\n\n    //Return\n    return Api;\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('BaseModel.Service', [])\n\n/**\n * Model definition\n */\n.factory('$baseModel', function($window, $log, $injector) {\n\n  //See if we have the moment service available to us\n  let moment;\n  if ($injector.has('moment')) {\n    moment = $injector.get('moment');\n  }\n  else if (typeof $window.moment !== 'undefined') {\n    moment = $window.moment;\n  }\n\n  /**\n   * Check if given string is a ISO 8601 date string,\n   * Returns a moment if it is and null if it's not\n   */\n  function dateStringToMoment(value) {\n    let regex = /(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2})\\:(\\d{2})\\:(\\d{2}).*/;\n    if (value.match(regex)) {\n      let date = moment(value, moment.ISO_8601, true);\n      if (date.isValid()) {\n        return date;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Copy a property\n   */\n  function copyProperty(obj, key) {\n    if (angular.isArray(obj[key])) {\n      let arr = obj[key];\n      return arr.map((value, key) => copyProperty(arr, key));\n    }\n    if (obj[key] && angular.isFunction(obj[key].clone)) {\n      return obj[key].clone();\n    }\n    return angular.copy(obj[key]);\n  }\n\n  /**\n   * Constructor\n   */\n  function $baseModel(data) {\n    this.fromJSON(data);\n  }\n\n  /**************************************************************************\n   * Helper methods\n   ***/\n\n  /**\n   * Convert a property to a model\n   */\n  $baseModel.prototype.convertToModel = function(\n    key, Model, isArray, allowEmpty\n  ) {\n\n    //Paremeter shuffling\n    if (typeof Model === 'boolean') {\n      isArray = Model;\n      Model = null;\n    }\n\n    //If undefined, check what we were expecting\n    if (typeof this[key] === 'undefined') {\n      if (isArray) {\n        this[key] = [];\n      }\n      else {\n        this[key] = null;\n      }\n    }\n\n    //If no model specified, we're done\n    if (!Model) {\n      return;\n    }\n\n    //Empty and allowed empty?\n    if (!this[key] && allowEmpty) {\n      return;\n    }\n\n    //String specified, use injector\n    if (typeof Model === 'string') {\n      if (!$injector.has(Model)) {\n        return $log.warn(\n          'Unknown model', Model, 'specified for sub model conversion'\n        );\n      }\n      Model = $injector.get(Model);\n    }\n\n    //Get model class and initiate\n    if (angular.isArray(this[key])) {\n      this[key] = this[key].map(data => new Model(data));\n    }\n    else if (angular.isString(this[key]) && $baseModel.isId(this[key])) {\n      this[key] = new Model({id: this[key]});\n    }\n    else {\n      this[key] = new Model(this[key]);\n    }\n  };\n\n  /**\n   * From JSON converter\n   */\n  $baseModel.prototype.fromJSON = function(json) {\n    if (angular.isObject(json)) {\n      angular.forEach(json, (value, key) => {\n        this[key] = $baseModel.valueFromJSON(value);\n      }, this);\n    }\n    return this;\n  };\n\n  /**\n   * To JSON converter\n   */\n  $baseModel.prototype.toJSON = function(data) {\n    let json = {};\n    if (data && angular.isObject(data)) {\n      angular.forEach(data, (value, key) => {\n        json[key] = $baseModel.valueToJSON(value);\n      });\n    }\n    angular.forEach(this, (value, key) => {\n      if (!json.hasOwnProperty(key)) {\n        json[key] = $baseModel.valueToJSON(value);\n      }\n    });\n    return json;\n  };\n\n  /**\n   * Extract a subset of data from the model\n   */\n  $baseModel.prototype.extract = function(properties) {\n\n    //Initialize object\n    let obj = {};\n\n    //No properties given? Iterate all object properties\n    if (!angular.isArray(properties) || !properties.length) {\n      angular.forEach(this, (value, key) => {\n        obj[key] = copyProperty(this, key);\n      });\n    }\n    else {\n      angular.forEach(properties, key => {\n        obj[key] = copyProperty(this, key);\n      });\n    }\n\n    //Return resulting object\n    return obj;\n  };\n\n  /**\n   * Merge a set of data into the model\n   */\n  $baseModel.prototype.merge = function(data) {\n    if (data && angular.isObject(data)) {\n      angular.forEach(data, (value, key) => {\n        this[key] = copyProperty(data, key);\n      });\n    }\n  };\n\n  /**\n   * Clear own properties\n   */\n  $baseModel.prototype.clear = function() {\n    for (let key in this) {\n      if (this.hasOwnProperty(key)) {\n        delete this[key];\n      }\n    }\n  };\n\n  /**\n   * Clone\n   */\n  $baseModel.prototype.clone = function(stripId) {\n    let ModelClass = this.constructor;\n    let clone = new ModelClass(this.extract());\n    if (clone.id && stripId) {\n      delete clone.id;\n    }\n    return clone;\n  };\n\n  /**\n   * Copy a property\n   */\n  $baseModel.prototype.copyProperty = function(obj, key) {\n    if (this[key] && angular.isFunction(this[key].clone)) {\n      obj[key] = this[key].clone();\n    }\n    else {\n      obj[key] = angular.copy(this[key]);\n    }\n  };\n\n  /**************************************************************************\n   * Static methods\n   ***/\n\n  /**\n   * Helper to convert a value from JSON\n   */\n  $baseModel.valueFromJSON = function(value) {\n    if (angular.isArray(value)) {\n      return value.map($baseModel.valueFromJSON);\n    }\n    else if (moment && angular.isString(value)) {\n      let date = dateStringToMoment(value);\n      return date || value;\n    }\n    return angular.copy(value);\n  };\n\n  /**\n  * Helper to convert a value to JSON\n  */\n  $baseModel.valueToJSON = function(value) {\n    if (angular.isArray(value)) {\n      return value.map($baseModel.valueToJSON);\n    }\n    else if (value && angular.isObject(value)) {\n      if (angular.isFunction(value.toJSON)) {\n        return value.toJSON();\n      }\n      let copy = {};\n      for (let prop in value) {\n        if (value.hasOwnProperty(prop)) {\n          copy[prop] = $baseModel.valueToJSON(value[prop]);\n        }\n      }\n      return copy;\n    }\n    return value;\n  };\n\n  /**\n   * Strip object to only ID\n   */\n  $baseModel.onlyId = function(obj) {\n    if (angular.isArray(obj)) {\n      return obj.map($baseModel.onlyId);\n    }\n    if (!obj || typeof obj !== 'object' || !obj.id) {\n      return obj;\n    }\n    return obj.id;\n  };\n\n  /**\n   * Strip a given object to specific keys\n   */\n  $baseModel.strip = function(obj, ...keys) {\n    if (angular.isArray(obj)) {\n      return obj.map(obj => $baseModel.strip(obj, ...keys));\n    }\n    if (!obj || typeof obj !== 'object') {\n      return obj;\n    }\n    angular.forEach(obj, (value, key) => {\n      if (!keys.includes(key)) {\n        delete obj[key];\n      }\n    });\n    return obj;\n  };\n\n  /**\n   * Test for MongoDB object ID\n   */\n  $baseModel.isId = function(str) {\n    return str.match(/^[a-f\\d]{24}$/i);\n  };\n\n  //Return\n  return $baseModel;\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Endpoint.Service', [\n  'Api.Action.Service',\n  'Api.Request.Service',\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiEndpoint', function $apiEndpoint($url, $apiAction, $apiRequest) {\n\n  /**\n   * Constructor\n   */\n  function ApiEndpoint(name, config) {\n\n    //Determine full URL of endpoint\n    config.actions = config.actions || {};\n    config.url = $url.concat(\n      config.baseUrl, config.url || $url.concat(name, ':id')\n    );\n\n    //Expose config and actions container\n    this.$config = config;\n    this.$actions = {};\n\n    //Create action instances and bind request method to action key on endpoint\n    angular.forEach(config.actions, (action, key) => {\n      this.$actions[key] = $apiAction(action || {}, config);\n      this[key] = angular.bind(this, $apiRequest, this.$actions[key]);\n    });\n  }\n\n  //Return factory function\n  return function(name, config) {\n    return new ApiEndpoint(name, config);\n  };\n});\n\n})(window, window.angular);\n","(function(window, angular, undefined) {'use strict';\n\n/**\n * Module definition and dependencies\n */\nangular.module('Api.Request.Service', [\n  'Url.Service'\n])\n\n/**\n * Factory definition\n */\n.factory('$apiRequest', function $apiRequest($http, $url) {\n\n  /**\n   * Check if dotted path is valid\n   */\n  function isValidDottedPath(path) {\n    return (\n      path && path !== 'hasOwnProperty' &&\n      /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/.test('.' + path)\n    );\n  }\n\n  /**\n   * Lookup dotted path in an object\n   */\n  function lookupDottedPath(obj, path) {\n\n    //Check if valid\n    if (!isValidDottedPath(path)) {\n      throw new Error('Invalid dotted path:' + path);\n    }\n\n    //Split path in object keys to traverse\n    let keys = path.split('.');\n    for (let i = 0; i < keys.length && obj !== undefined; i++) {\n      let key = keys[i];\n      obj = (obj !== null) ? obj[key] : undefined;\n    }\n\n    //Return reference\n    return obj;\n  }\n\n  /**\n   * Combine given params with extracted params from data\n   */\n  function combineParams(actionParams, givenParams, data) {\n\n    //Extract data params from action params\n    let extractedParams = {};\n    angular.forEach(actionParams || {}, (value, key) => {\n\n      //Function? Call now\n      if (angular.isFunction(value)) {\n        value = value();\n      }\n\n      //String value with @ identifier? Look up in data\n      if (angular.isString(value) && value.charAt(0) === '@') {\n        value = lookupDottedPath(data, value.substr(1));\n      }\n\n      //Set value\n      extractedParams[key] = value;\n    });\n\n    //Extend with given params\n    return angular.extend(extractedParams, givenParams || {});\n  }\n\n  /**\n   * Find URL params\n   */\n  function findUrlParams(url) {\n    let urlParams = {};\n    angular.forEach(url.split(/\\W/), param => {\n\n      //Filter hasOwnProperty\n      if (param === 'hasOwnProperty') {\n        throw new Error('Invalid parameter name: hasOwnProperty');\n      }\n\n      //Find all valid url params (have value, non digit)\n      if (param && !(/^\\\\d+$/.test(param))) {\n        if (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url)) {\n          urlParams[param] = true;\n        }\n      }\n    });\n    return urlParams;\n  }\n\n  /**\n   * Clean up URL\n   */\n  function cleanUpUrl(url, stripTrailingSlashes) {\n\n    //Strip trailing slashes if needed\n    if (stripTrailingSlashes) {\n      url = url.replace(/\\/+$/, '') || '/';\n    }\n\n    //Replace collapsed `/.` if found in the last URL path segment before\n    //the query, e.g. `http://url.com/id./format?q=x` becomes\n    //`http://url.com/id.format?q=x`\n    return url\n      .replace(/\\/\\.(?=\\w+($|\\?))/, '.')\n      .replace(/\\/\\\\\\./, '/.');\n  }\n\n  /**\n   * Parse URL\n   */\n  function parseUrl(url, params, urlParams, stripTrailingSlashes) {\n\n    //Replace escaped \\:\n    url = url.replace(/\\\\:/g, ':');\n\n    //Loop the valid URL params now\n    angular.forEach(urlParams, (t, urlParam) => {\n\n      //Extract value for this url param from given params\n      let val = params.hasOwnProperty(urlParam) ? params[urlParam] : null;\n      let regex;\n\n      //If defined and not null, encode it and replace in URL\n      if (angular.isDefined(val) && val !== null) {\n        let encodedVal = $url.encodeUriSegment(val);\n        regex = new RegExp(':' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, (match, tail) => {\n          return encodedVal + tail;\n        });\n      }\n\n      //Otherwise, remove from URL\n      else {\n        regex = new RegExp('(\\/?):' + urlParam + '(\\\\W|$)', 'g');\n        url = url.replace(regex, (match, leadingSlashes, tail) => {\n          if (tail.charAt(0) === '/') {\n            return tail;\n          }\n          else {\n            return leadingSlashes + tail;\n          }\n        });\n      }\n    });\n\n    //Return cleaned up URL\n    return cleanUpUrl(url, stripTrailingSlashes);\n  }\n\n  /**\n   * Create request config\n   */\n  function createRequestConfig(action, params, data) {\n\n    //Initialize\n    let request = {};\n    let stripConfigKeys = [\n      'params', 'model', 'isArray', 'isModel',\n      'successInterceptor', 'errorInterceptor',\n      'stripTrailingSlashes'\n    ];\n\n    //Map action config to http request config\n    angular.forEach(action, (value, key) => {\n      if (stripConfigKeys.indexOf(key) === -1) {\n        request[key] = angular.copy(value);\n      }\n    });\n\n    //Append data if we have a body\n    if (action.hasBody() && data && angular.isObject(data)) {\n      if (angular.isFunction(data.toJSON)) {\n        request.data = data.toJSON();\n      }\n      else if (angular.isArray(data)) {\n        request.data = data;\n      }\n      else {\n        request.data = angular.extend({}, data);\n      }\n    }\n\n    //Process params\n    if (params && angular.isObject(params)) {\n      for (let key in params) {\n        if (params.hasOwnProperty(key) && angular.isObject(params[key])) {\n          if (angular.isFunction(params[key].toJSON)) {\n            params[key] = params[key].toJSON();\n          }\n        }\n      }\n    }\n\n    //Combine params out of given params and data and find URL params\n    params = combineParams(action.params, params, data);\n    let urlParams = findUrlParams(request.url);\n\n    //Parse URL\n    request.url = parseUrl(\n      action.url, params, urlParams, action.stripTrailingSlashes);\n\n    //Set remaining given non-url params as query params,\n    //delegate param encoding to $http\n    angular.forEach(params, (value, key) => {\n      if (!urlParams[key]) {\n        request.params = request.params || {};\n        request.params[key] = value;\n      }\n    });\n\n    //Return\n    return request;\n  }\n\n  /**\n   * Api request executer\n   */\n  return function ApiRequest(action, params, data) {\n\n    //Parameter juggling\n    if (action.hasBody() && params && !data) {\n      data = params;\n      params = null;\n    }\n\n    //Create request config and use $http to do the request\n    //and intercept the response\n    let request = createRequestConfig(action, params, data);\n    let promise = $http(request).then(\n      action.successInterceptor.bind(action),\n      action.errorInterceptor.bind(action)\n    );\n\n    //Then handle the raw data\n    return promise.then(raw => {\n      if (action.expectsModel()) {\n        return action.convertToModel(raw);\n      }\n      return raw;\n    });\n  };\n});\n\n})(window, window.angular);\n"],"sourceRoot":"/source/"}